{"version":3,"sources":["machines/fetch.ts","machines/store.ts","components/Table.tsx","components/Table.treat.ts","Home.tsx","Charts.tsx","components/BottomAppBar.tsx","machines/form.ts","constants.ts","Insitutions.tsx","Insitutions.treat.ts","AssetAccounts.tsx","Assets.tsx","components/TopAppBar.tsx","AddReport.tsx","AssetsAndReports.tsx","ImportExport.tsx","App.tsx","App.treat.ts","serviceWorker.ts","index.tsx"],"names":["fetchMachine","Machine","id","initial","context","url","data","error","retries","maxRetries","states","idle","on","FETCH","loading","invoke","src","onDone","target","actions","sendParent","onError","success","REFETCH","failure","cond","RETRY","fatal","type","guards","canNotRetry","setData","assign","_","event","notifyData","console","log","setError","notifyError","incrementRetries","services","fetch","then","response","json","nanoid","customAlphabet","localDateStringToUtcTimestamp","date","localDate","Date","UTC","getFullYear","getMonth","getDate","storeMachine","key","db","urlDataToSave","undefined","fetchRef","entry","spawn","withContext","name","ctx","e","dbData","sessionStorage","getItem","JSON","parse","low","Memory","setState","LOAD","send","to","LOADED","UPDATE_DATA","LOAD_FROM_INPUT","loaded","window","URL","revokeObjectURL","_state","SAVE","loaded_from_input","setItem","stringify","getState","saving","createObjectURL","Blob","SAVED","updating_data","actionType","entity","reportId","get","push","datetime","write","assetAccountStates","forEach","aas","allErs","er","find","ex","report","value","set","asset","newEr","allReports","r","updatedAssetAccountStates","balance","aasInner","assetAccountId","filter","includes","newAas","Error","remove","i","Table","children","className","Tr","Td","colspan","colSpan","Th","getTotalForReport","store","targetCurrency","assetFilterFunction","reduce","acc","currVal","assetAccount","assetAccounts","aa","assets","a","assetId","Math","round","erData","exchangeRates","assetPriceInBaseCurrency","isBaseAssetACurrency","class","currencyAsset","currency","erToBaseCurrency","currencyAssetToBase","parseFloat","getExchangeRate","getInstitutions","sortBy","institutions","sortIndex","getAssetAccounts","flatMap","inst","institutionId","Home","props","useContext","StoreContext","sortedReports","reports","Fab","color","aria-label","component","Link","style","margin","top","right","bottom","left","position","map","length","toISOString","substr","onClick","storeService","subclass","exchangeRate","rate","width","defaultValue","onChange","v","updateExchangeRate","Charts","useSearchParams","searchParams","currencies","fromSearchParam","pastYear","start","addMonths","addYears","parseInt","end","isWithinInterval","data1","allReportsInCurrency","compact","d","x","getUTCFullYear","padStart","String","getUTCMonth","getUTCDate","y","toFixed","data3","totalForCurrency","currencyIdx","animate","xScale","format","xFormat","yScale","min","max","stacked","axisTop","axisRight","axisBottom","tickValues","legend","legendOffset","axisLeft","orient","tickSize","tickPadding","tickRotation","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","sliceTooltip","slice","background","padding","border","points","xFormatted","point","serieColor","serieId","yFormatted","height","display","legendPosition","useStyles","makeStyles","createStyles","text","spacing","paper","paddingBottom","list","marginBottom","subheader","backgroundColor","palette","appBar","grow","flexGrow","fabButton","zIndex","fullList","locs","values","0","1","2","doesMatch","l","pathname","startsWith","BottomAppBar","classes","location","useLocation","React","useState","setValue","useEffect","some","idx","findIndex","AppBar","BottomNavigation","newValue","BottomNavigationAction","label","icon","formMachine","SUBMIT","validating","submitting","form","getValues","submitted","ALL_ASSET_TYPES","ALL_INSTITUTION_TYPES","yupInstitution","yup","required","integer","moreThan","Insitutions","useForm","validationSchema","useMachine","devTools","formMachineState","formMachineSend","matches","validateSync","onSubmit","handleSubmit","ref","register","errors","message","assetAccountsWithCurrentInstitution","AssetAccounts","assetAccountStatesWithThisAssetAccount","Assets","assetAccountsWithCurrentAsset","TopAppBar","Tabs","variant","scrollButtons","Tab","yupAssectAccountState","of","AddEditReport","params","useParams","nonSortedAssetAccountStates","defaultValues","navigate","useNavigate","latestReportId","maxBy","latestAssetAccountStates","index","rowWithHeader","rowWithData","laas","Fragment","AssetsAndReports","path","element","ImportExport","state1","state","Button","size","content","file","reader","FileReader","onload","link","document","createElement","setAttribute","result","body","appendChild","click","readAsDataURL","download","obj","readAsText","files","createContext","App","Provider","CssBaseline","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.467c69ba.chunk.js","sourcesContent":["import { Machine, assign, sendParent } from 'xstate';\n\ninterface FetchSchema {\n  states: {\n    idle: {};\n    loading: {};\n    success: {};\n    failure: {};\n    fatal: {};\n  };\n}\n\ninterface FetchContext {\n  url: string;\n  data: any;\n  error: any;\n  retries: number;\n  maxRetries: number;\n}\n\ntype FetchEvent = { type: 'FETCH' } | { type: 'REFETCH' } | { type: 'RETRY' };\n\nexport const fetchMachine = Machine<FetchContext, FetchSchema, FetchEvent>(\n  {\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      url: '',\n      data: null,\n      error: null,\n      retries: 0,\n      maxRetries: 3,\n    },\n    states: {\n      idle: {\n        on: {\n          FETCH: 'loading',\n        },\n      },\n      loading: {\n        invoke: {\n          src: 'fetch',\n          onDone: {\n            target: 'success',\n            actions: ['setData', 'notifyData', sendParent('LOADED')],\n          },\n          onError: {\n            target: 'failure',\n            actions: ['setError', 'notifyError'],\n          },\n        },\n      },\n      success: {\n        on: {\n          REFETCH: {\n            target: 'loading',\n            actions: 'resetRetries',\n          },\n        },\n      },\n      failure: {\n        on: {\n          '': {\n            target: 'fatal',\n            cond: 'canNotRetry',\n          },\n          RETRY: {\n            target: 'loading',\n            actions: 'incrementRetries',\n          },\n        },\n      },\n      fatal: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      canNotRetry: ({ retries, maxRetries }) => retries === maxRetries,\n    },\n    actions: {\n      setData: assign({ data: (_, event) => (event as any).data }),\n      notifyData: () => {\n        console.log('-----notifydata')\n      },\n\n      setError: assign({ error: (_, event) => (event as any).data }),\n      notifyError: () => {},\n\n      incrementRetries: assign({ retries: context => context.retries + 1 }),\n      // resetRetries: assign({ retries: 0 }),\n    },\n    services: {\n      fetch: context =>\n        fetch(context.url)\n          .then(response => response.json())\n          .then(json => json),\n    },\n  }\n);\n","import { Machine, assign, spawn, send } from 'xstate';\nimport { customAlphabet } from 'nanoid';\nimport low, { LowdbSync } from 'lowdb';\nimport Memory from 'lowdb/adapters/Memory';\n\nimport { fetchMachine } from './fetch';\nimport { fintrack } from '../../typings/fintrack';\n\nconst nonAmbiquousChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ123456789';\nconst nanoid = customAlphabet(nonAmbiquousChars, 6);\n\nconst localDateStringToUtcTimestamp = (date: string): number => {\n  const localDate = new Date(date);\n  const utcTimestamp = Date.UTC(\n    localDate.getFullYear(),\n    localDate.getMonth(),\n    localDate.getDate()\n  );\n  return utcTimestamp;\n};\n\ninterface StoreSchema {\n  states: {\n    idle: {};\n    loaded: {};\n    loaded_from_input: {};\n    saving: {};\n    updating_data: {};\n    // saved: {};\n  };\n}\n\nexport interface StoreContext {\n  db: LowdbSync<fintrack.JSONShape> | null;\n  // data: fintrack.JSONShape | null;\n  // fetchMachine: StateMachine<FetchContext, FetchSchema, FetchEvent, any> | null;\n  fetchRef: any;\n  urlDataToSave: string | undefined;\n}\n\ntype EventUpdateDataBase = {\n  type: 'UPDATE_DATA';\n  actionType: 'delete' | 'create' | 'update';\n};\n\ntype EventUpdateDataCreateCommon = {\n  entity: 'institutions' | 'assets' | 'assetAccounts' | 'reports';\n  data: any;\n};\n\ntype EventUpdateDataCreateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'create';\n  data: {\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'update';\n  data: {\n    reportId: fintrack.ID;\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateExchangeRate = {\n  entity: 'exchangeRates';\n  actionType: 'update';\n  data: {\n    asset: fintrack.Asset;\n    report: fintrack.Report;\n    value: string;\n    // date: Date;\n    // assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateData =\n  | (EventUpdateDataBase & EventUpdateDataCreateCommon)\n  | (EventUpdateDataBase & EventUpdateDataCreateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateExchangeRate);\n\ntype LoadFromInput = {\n  type: 'LOAD_FROM_INPUT';\n  data: fintrack.JSONShape;\n};\n\nexport type StoreEvent =\n  | { type: 'LOAD'; data: fintrack.JSONShape }\n  | LoadFromInput\n  | {\n      type: 'LOADED';\n    }\n  | { type: 'SAVE' }\n  | { type: 'SAVED' }\n  | EventUpdateData;\n\n// {\n//   context: {\n//     url: shouldFetchFail ? 'https://non-existent-url' : '/data.json',\n//     maxRetries: 4,\n//   },\n// }\n\nexport const storeMachine = Machine<StoreContext, StoreSchema, StoreEvent>({\n  key: 'store',\n  initial: 'idle',\n  context: {\n    db: null,\n    // data: null,\n    urlDataToSave: undefined,\n    // fetchMachine: null,\n    fetchRef: null,\n  },\n  entry: assign({\n    fetchRef: () =>\n      spawn(\n        fetchMachine.withContext({\n          url: '/data.json',\n          maxRetries: 4,\n          data: null,\n          error: null,\n          retries: 0,\n        }),\n        {\n          name: 'fetch',\n        }\n      ),\n    // TODO any\n  }) as any,\n  states: {\n    idle: {\n      entry: assign((ctx, e) => {\n        if (ctx.db !== null) {\n          return {};\n        }\n        const dbData =\n          sessionStorage.getItem('fintrack_db') !== null\n            ? JSON.parse(sessionStorage.getItem('fintrack_db')!)\n            : null;\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(dbData);\n        return {\n          db,\n        };\n      }),\n      on: {\n        LOAD: {\n          actions: send('FETCH', {\n            to: 'fetch',\n          }),\n        },\n        LOADED: 'loaded',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    loaded: {\n      entry: assign((ctx, e) => {\n        if (ctx.urlDataToSave !== undefined) {\n          window.URL.revokeObjectURL(ctx.urlDataToSave);\n        }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(ctx.fetchRef._state.context.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n      },\n    },\n    loaded_from_input: {\n      entry: assign((ctx, e: LoadFromInput) => {\n        console.log('=========loaded_from_input', e);\n        // if (ctx.urlDataToSave !== undefined) {\n        //   window.URL.revokeObjectURL(ctx.urlDataToSave);\n        // }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(e.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        sessionStorage.setItem(\n          'fintrack_db',\n          JSON.stringify(ctx.db?.getState())\n        );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    saving: {\n      entry: assign((ctx, e) => {\n        console.log('-=====ctx.data', ctx.db?.getState());\n        return {\n          urlDataToSave: window.URL.createObjectURL(\n            new Blob([JSON.stringify(ctx.db?.getState(), null, 2)], {\n              type: 'text/plain',\n            })\n          ),\n        };\n      }),\n      on: {\n        SAVED: 'loaded',\n      },\n      // invoke: {\n      //   src: 'saver',\n      //   onDone: 'saved',\n      //   onError: 'saved',\n      // }\n    },\n    updating_data: {\n      entry: assign((ctx, e: EventUpdateData) => {\n        if (e.actionType === 'create') {\n          if (e.entity === 'assetAccountStates') {\n            const reportId = nanoid();\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .push({\n                id: reportId,\n                datetime: localDateStringToUtcTimestamp(e.data.date),\n              })\n              .write();\n            e.data.assetAccountStates.forEach((aas) => {\n              ctx.db\n                ?.get('data')\n                .get('assetAccountStates')\n                .push({\n                  ...aas,\n                  reportId,\n                })\n                .write();\n            });\n          } else {\n            ctx.db\n              ?.get('data')\n              ?.get(e.entity)\n              .push({\n                id: nanoid(),\n                ...e.data,\n              })\n              .write();\n          }\n        } else if (e.actionType === 'update') {\n          if (e.entity === 'exchangeRates') {\n            const allErs = ctx.db?.get('data').get('exchangeRates');\n            const er = allErs?.find((ex) => ex.reportId === e.data.report.id);\n            if (er?.value() !== undefined) {\n              er.get('data').set(e.data.asset.id, e.data.value).write();\n            } else {\n              const newEr: fintrack.ExchangeRate = {\n                id: nanoid(),\n                reportId: e.data.report.id,\n                data: {\n                  [e.data.asset.id]: e.data.value,\n                },\n              };\n              allErs?.push(newEr).write();\n            }\n          }\n          if (e.entity === 'assetAccountStates') {\n            const allReports = ctx.db?.get('data').get('reports');\n            const report = allReports?.find((r) => r.id === e.data.reportId);\n            report\n              ?.set('datetime', localDateStringToUtcTimestamp(e.data.date))\n              .write();\n\n            let updatedAssetAccountStates: fintrack.ID[] = [];\n\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .forEach((aas) => {\n                if (aas.reportId === e.data.reportId) {\n                  aas.balance = e.data.assetAccountStates.find(\n                    (aasInner) => aasInner.assetAccountId === aas.assetAccountId\n                  )?.balance!;\n                  updatedAssetAccountStates.push(aas.assetAccountId);\n                }\n              })\n              .write();\n\n            e.data.assetAccountStates\n              .filter(\n                (aas) => !updatedAssetAccountStates.includes(aas.assetAccountId)\n              )\n              .forEach((newAas) => {\n                ctx.db\n                  ?.get('data')\n                  .get('assetAccountStates')\n                  .push({\n                    ...newAas,\n                    reportId: e.data.reportId,\n                  })\n                  .write();\n              });\n          }\n        } else if (e.actionType === 'delete') {\n          if (e.entity === 'institutions') {\n            ctx.db\n              ?.get('data')\n              .get('institutions')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assets') {\n            ctx.db\n              ?.get('data')\n              .get('assets')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assetAccounts') {\n            ctx.db\n              ?.get('data')\n              .get('assetAccounts')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'reports') {\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .remove((i) => i.id === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('exchangeRates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n          }\n        } else {\n          throw new Error('How did you end up here?');\n        }\n        sessionStorage.setItem(\n          'fintrack_db',\n          JSON.stringify(ctx.db?.getState())\n        );\n        // ctx.data?.institutions.push({\n        //   id: nanoid(),\n        //   ...e.data,\n        // });\n        // console.log(\n        //   '!!!!!!updating_data',\n        //   e.actionType,\n        //   e.type,\n        //   e.data,\n        //   ctx.db?.getState()\n        // );\n        return {};\n      }),\n      on: {\n        '': 'idle',\n      },\n    },\n  },\n  // {\n  //   services: {\n  //     saver: context => {\n  //       var data = new Blob(['asd'], {type: 'text/plain'});\n  //       // If we are replacing a previously generated file we need to\n  //       // manually revoke the object URL to avoid memory leaks.\n  //       // if (textFile !== null) {\n  //       //   window.URL.revokeObjectURL(textFile);\n  //       // }\n  //       // textFile = window.URL.createObjectURL(data);\n\n  //       // returns a URL you can use as a href\n  //       return window.URL.createObjectURL(data);\n  //     }\n  //   }\n  // }\n});\n","import React from 'react';\n\nimport * as styles from './Table.treat';\n\nexport const Table: React.FC = ({ children }) => {\n  return (\n    <table className={styles.table}>\n      {children}\n    </table>\n  )\n}\n\nexport const Tr: React.FC = ({ children }) => {\n  return (\n    <tr className={styles.tr}>\n      {children}\n    </tr>\n  )\n}\n\nexport const Td: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <td className={styles.td} colSpan={colspan}>\n      {children}\n    </td>\n  )\n}\n\nexport const Th: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <th className={styles.th} colSpan={colspan}>\n      {children}\n    </th>\n  )\n}\n","import \"!../../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./Table.treat.6VVywW1.css\";\nexport var table = '_3-1r7';\nexport var tr = '_3Mjlo';\nexport var th = '_1rfFa';\nexport var td = 'zX0YF';","import React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport Fab from '@material-ui/core/Fab';\nimport Add from '@material-ui/icons/Add';\n\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { StoreEvent } from './machines/store';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nfunction getExchangeRate(\n  store: fintrack.JSONShape | undefined,\n  erData: fintrack.ExchangeRateData | undefined,\n  // report: fintrack.Report,\n  asset: fintrack.Asset,\n  targetCurrency: fintrack.Currency\n): number {\n  if (erData === undefined) {\n    return 0;\n  }\n  const isBaseAssetACurrency = asset.class === 'CURRENCY';\n  // if (asset.currency === targetCurrency) {\n  //   return 1;\n  // }\n\n  // then find such asset where class is currency, name is asset.currency\n  // and check whether currency of such asset is `fintrack.BaseCurrency` (USD)\n  const currencyAsset = isBaseAssetACurrency\n    ? asset\n    : store?.data.assets.find(\n        (a) => a.class === 'CURRENCY' && a.name === asset.currency\n      )!;\n  let erToBaseCurrency = 1;\n\n  if (currencyAsset.currency !== targetCurrency) {\n    const currencyAssetToBase = store?.data.assets.find(\n      (a) => a.class === 'CURRENCY' && a.name === targetCurrency\n    );\n    if (currencyAssetToBase !== undefined) {\n      const er = erData[currencyAssetToBase.id];\n      if (er !== null) {\n        // console.log({ er })\n        erToBaseCurrency = parseFloat(er!);\n      } else {\n        erToBaseCurrency = 0;\n      }\n    }\n  }\n  if (erToBaseCurrency === 0) {\n    return 0;\n  }\n  // console.log({ targetCurrency, asset, currencyAsset, erToBaseCurrency });\n  return (\n    (parseFloat(erData[currencyAsset.id] || '0') / erToBaseCurrency) *\n    (isBaseAssetACurrency ? 1 : parseFloat(erData[asset.id] || '0'))\n  );\n}\n\nexport function getTotalForReport(\n  store: fintrack.JSONShape | undefined,\n  report: fintrack.Report,\n  targetCurrency: fintrack.Currency,\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean\n): number | undefined {\n  return store?.data.assetAccountStates\n    .filter((aas) => aas.reportId === report.id)\n    .reduce((acc, currVal) => {\n      const assetAccount = store.data.assetAccounts.find(\n        (aa) => aa.id === currVal.assetAccountId\n      )!;\n      const asset = store.data.assets.find(\n        (a) => a.id === assetAccount.assetId\n      )!;\n      if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n        return Math.round(acc);\n      }\n      // asset.currency\n      const erData = store.data.exchangeRates.find(\n        (er) => er.reportId === report.id\n      )?.data;\n      // const erToAssetCurrency = erData[asset.id] ?? '0';\n      let erFromAssetToTarget = getExchangeRate(\n        store,\n        erData,\n        asset,\n        targetCurrency\n      );\n      const assetPriceInBaseCurrency =\n        // parseFloat(erToAssetCurrency) *\n        erFromAssetToTarget * parseFloat(currVal.balance);\n      // if (asset.currency !== baseCurrency) {\n      // }\n      // if (report.id === 'UJ1XJQ') {\n      //   console.log(\n      //     'targetCurrency',\n      //     targetCurrency,\n      //     'asset',\n      //     asset,\n      //     'erFromAssetToBase',\n      //     erFromAssetToBase,\n      //     't',\n      //     assetPriceInBaseCurrency\n      //   );\n      // }\n      return Math.round(assetPriceInBaseCurrency + acc);\n    }, 0);\n}\n\nexport function getInstitutions(\n  store: fintrack.JSONShape | undefined\n): fintrack.Institution[] | undefined {\n  return _.sortBy(store?.data.institutions, (i) => i.sortIndex || i.name);\n}\n\nexport function getAssetAccounts(\n  store: fintrack.JSONShape | undefined\n): fintrack.AssetAccount[] | undefined {\n  return getInstitutions(store)?.flatMap((inst) => {\n    return _.sortBy(\n      store?.data.assetAccounts.filter((aa) => aa.institutionId === inst.id),\n      // TODO replace name with sort order\n      (aa) => aa.name\n    );\n  });\n}\n\nexport const Home: React.FC<OwnProps> = (props) => {\n  const store = useContext(StoreContext);\n\n  const assetAccounts = getAssetAccounts(store);\n  if (assetAccounts === undefined) {\n    return null;\n  }\n  const sortedReports = _.sortBy(store?.data.reports, (r) => -1 * r.datetime);\n  const assets = store?.data.assets;\n  const lastReport = sortedReports[0]!;\n\n  const deleteReport = (reportId: string) => {\n    props.storeService.send('UPDATE_DATA', {\n      actionType: 'delete',\n      entity: 'reports',\n      data: {\n        id: reportId,\n      },\n    });\n  };\n\n  const updateExchangeRate = (\n    value: string,\n    asset: fintrack.Asset,\n    report: fintrack.Report\n  ) => {\n    console.log('_________value', value, asset, report);\n\n    props.storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'update',\n      entity: 'exchangeRates',\n      data: {\n        value,\n        asset,\n        report,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Your net worth is...</h1>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        component={Link}\n        to=\"add-edit-report\"\n        style={{\n          margin: 0,\n          top: 'auto',\n          right: 20,\n          bottom: 80,\n          left: 'auto',\n          position: 'fixed',\n        }}\n      >\n        <Add />\n      </Fab>\n      <Table>\n        <thead>\n          <Tr>\n            <Th></Th>\n            {getInstitutions(store)?.map((inst) => {\n              return (\n                <Th\n                  colspan={\n                    assetAccounts.filter((aa) => aa.institutionId === inst.id)\n                      .length\n                  }\n                >\n                  {inst.name}\n                </Th>\n              );\n            })}\n          </Tr>\n          <Tr>\n            <Th>date</Th>\n            {assetAccounts.map((aa) => (\n              <Th>{aa.name}</Th>\n            ))}\n            <Th>Total in RUB</Th>\n            <Th>Total in USD</Th>\n            <Th>Total in EUR</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const assetAccountStates = store?.data.assetAccountStates.filter(\n              (aas) => aas.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>\n                  <Link to={`add-edit-report/${report.id}`}>\n                    {new Date(report.datetime).toISOString().substr(0, 10)}\n                  </Link>\n                </Td>\n                {assetAccounts.map((aa) => {\n                  const aas = assetAccountStates?.find(\n                    (aas) => aas.assetAccountId === aa.id\n                  );\n                  return <Td>{aas?.balance}</Td>;\n                })}\n                <Td>{getTotalForReport(store, report, 'RUB')}</Td>\n                <Td>{getTotalForReport(store, report, 'USD')}</Td>\n                <Td>{getTotalForReport(store, report, 'EUR')}</Td>\n                <Td>\n                  <button\n                    onClick={() => {\n                      deleteReport(report.id);\n                    }}\n                  >\n                    delete\n                  </button>\n                </Td>\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <h2>Exchange rates</h2>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>date</Th>\n            {assets?.map((a) => (\n              <Th>\n                {a.class} {a.subclass} {a.name} in {a.currency}\n              </Th>\n            ))}\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const exchangeRate = store?.data.exchangeRates.find(\n              (er) => er.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>{new Date(report.datetime).toISOString().substr(0, 10)}</Td>\n                {assets?.map((a) => {\n                  const rate = exchangeRate?.data?.[a.id];\n                  // const aas = exchangeRate.find(\n                  //   (aas) => aas.assetAccountId === aa.id\n                  // );\n                  return (\n                    <Td>\n                      <input\n                        style={{ width: 50 }}\n                        defaultValue={rate}\n                        onChange={(v) =>\n                          updateExchangeRate(v.target.value, a, report)\n                        }\n                      />\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\n// import { ResponsiveBump, BumpInputSerie } from '@nivo/bump';\nimport { ResponsiveLine, Serie } from '@nivo/line';\nimport { ResponsiveStream } from '@nivo/stream';\nimport { isWithinInterval, addYears } from 'date-fns';\nimport { addMonths } from 'date-fns/esm';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport _ from 'lodash';\n\nimport { StoreContext } from './App';\nimport { getTotalForReport } from './Home';\nimport { fintrack } from '../typings/fintrack';\n\nexport const Charts: React.FC = () => {\n  const store = useContext(StoreContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const currencies: fintrack.Currency[] = ['USD', 'EUR', 'RUB'];\n\n  const fromSearchParam = searchParams.get('yearsBack');\n  const pastYear: Interval = {\n    // should be last report date and not now\n    start: addMonths(\n      addYears(new Date(), -1 * parseInt(fromSearchParam ?? '0', 10)),\n      -2\n    ),\n    end: new Date(),\n  };\n\n  const reports = store?.data.reports.filter((r) =>\n    fromSearchParam !== null ? isWithinInterval(r.datetime, pastYear) : true\n  );\n\n  const data1: Serie[] = currencies.map((currency) => {\n    const allReportsInCurrency = _.compact(\n      reports?.map((report) => {\n        const d = new Date(report.datetime);\n        const x =\n          d.getUTCFullYear() +\n          '-' +\n          _.padStart(String(d.getUTCMonth() + 1), 2, '0') +\n          '-' +\n          d.getUTCDate();\n        console.log(\n          '=====d.getUTCMonth() === 1',\n          d.getUTCMonth() === 1,\n          getTotalForReport(store, report, currency),\n          x\n        );\n\n        // if (d.getUTCMonth() !== 1 && d.getUTCMonth() !== 7) {\n        //   return;\n        // }\n        return {\n          // x: report.datetime,\n          x,\n          // x: '2018-01',\n          y: (\n            getTotalForReport(\n              store,\n              report,\n              currency,\n              (a) => a.name === currency\n            ) || 0\n          ).toFixed(0),\n        };\n      })\n    );\n    console.log('====allReportsInCurrency', allReportsInCurrency);\n    return {\n      id: currency,\n      data: allReportsInCurrency || [],\n    };\n  });\n\n  const data3: Serie[] = currencies.map((currency) => {\n    const allReportsInCurrency = _.compact(\n      reports?.map((report) => {\n        const d = new Date(report.datetime);\n        const x =\n          d.getUTCFullYear() +\n          '-' +\n          _.padStart(String(d.getUTCMonth() + 1), 2, '0') +\n          '-' +\n          d.getUTCDate();\n        console.log(\n          '=====d.getUTCMonth() === 1',\n          d.getUTCMonth() === 1,\n          getTotalForReport(store, report, currency),\n          x\n        );\n\n        // if (d.getUTCMonth() !== 1 && d.getUTCMonth() !== 7) {\n        //   return;\n        // }\n        return {\n          // x: report.datetime,\n          x,\n          // x: '2018-01',\n          y: (\n            (getTotalForReport(\n              store,\n              report,\n              currency,\n              (a) => a.name === currency\n            )! / getTotalForReport(store, report, currency)! || 0) * 100\n          ).toFixed(0),\n        };\n      })\n    );\n    console.log('====allReportsInCurrency', allReportsInCurrency);\n    return {\n      id: currency,\n      data: allReportsInCurrency || [],\n    };\n  });\n\n  console.log({ data1 });\n\n  const totalForCurrency = (currencyIdx: any) => {\n    return (\n      <ResponsiveLine\n        animate={false}\n        data={[data1[currencyIdx]]}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          // precision: 'month',\n          // useUTC: true,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          // type: 'log',\n          // base: 8,\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          stacked: true,\n          // reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          format: '%Y %m',\n          tickValues: 'every 4 months',\n          legend: 'время',\n          legendOffset: -12,\n        }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n        }}\n        // colors={{ scheme: 'nivo' }}\n        pointSize={0}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        enableSlices=\"x\"\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n        sliceTooltip={({ slice }) => {\n          console.log('------slice', slice);\n          return (\n            <div\n              style={{\n                background: 'white',\n                padding: '9px 12px',\n                border: '1px solid #ccc',\n              }}\n            >\n              <div>{slice.points[0].data.xFormatted}</div>\n              {slice.points.map((point) => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: '3px 0',\n                  }}\n                >\n                  <strong>{point.serieId}</strong> {point.data.yFormatted}\n                </div>\n              ))}\n            </div>\n          );\n        }}\n      />\n    );\n  };\n\n  return (\n    <div style={{ height: 300 }}>\n      <h1>Charts</h1>\n      <h6>\n        <Link to=\"?yearsBack=1\">1 year</Link> |{' '}\n        <Link to=\"?yearsBack=2\">2 year</Link> | <Link to=\".\">all</Link>\n      </h6>\n      <div style={{ width: '100%', height: 300, display: 'flex' }}>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(0)}</div>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(1)}</div>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(2)}</div>\n      </div>\n\n      <ResponsiveLine\n        animate={false}\n        data={data3}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          // precision: 'month',\n          // useUTC: true,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          // type: 'log',\n          // base: 8,\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          // stacked: true,\n          // reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          format: '%Y %m',\n          tickValues: 'every 4 months',\n          legend: 'время',\n          legendOffset: -12,\n        }}\n        // axisBottom={{\n        //   orient: 'bottom',\n        //   tickSize: 5,\n        //   tickPadding: 5,\n        //   tickRotation: 0,\n        //   legend: 'date',\n        //   legendOffset: 36,\n        //   legendPosition: 'middle',\n        // }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: '%',\n          legendOffset: -50,\n          legendPosition: 'middle',\n        }}\n        // colors={{ scheme: 'nivo' }}\n        pointSize={4}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        enableSlices=\"x\"\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n        sliceTooltip={({ slice }) => {\n          console.log('------slice', slice);\n          return (\n            <div\n              style={{\n                background: 'white',\n                padding: '9px 12px',\n                border: '1px solid #ccc',\n              }}\n            >\n              <div>{slice.points[0].data.xFormatted}</div>\n              {slice.points.map((point) => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: '3px 0',\n                  }}\n                >\n                  <strong>{point.serieId}</strong> {point.data.yFormatted}%\n                </div>\n              ))}\n            </div>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport ShowChartOutlinedIcon from '@material-ui/icons/ShowChartOutlined';\nimport TableChartOutlinedIcon from '@material-ui/icons/TableChartOutlined';\nimport ImportExportOutlinedIcon from '@material-ui/icons/ImportExportOutlined';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport React, { useEffect } from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport _ from 'lodash';\nimport { AppBar } from '@material-ui/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    text: {\n      padding: theme.spacing(2, 2, 0),\n    },\n    paper: {\n      paddingBottom: 50,\n    },\n    list: {\n      marginBottom: theme.spacing(2),\n    },\n    subheader: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n    // list: {\n    //   width: 250,\n    // },\n    fullList: {\n      width: 'auto',\n    },\n  })\n);\n\nconst locations = {\n  0: '/',\n  1: '/assets-and-reports',\n  2: '/import-export',\n} as const;\n\ntype Locations = keyof typeof locations;\nconst locs = _.values(locations);\n\nconst doesMatch = (l: string, pathname: string): boolean =>\n  l === '/' ? pathname === '/' : pathname.startsWith(l);\n\nexport const BottomAppBar: React.FC = () => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  const [value, setValue] = React.useState<Locations | undefined>(undefined);\n\n  useEffect(() => {\n    if (!locs.some((l) => doesMatch(l, location.pathname))) {\n      setValue(undefined);\n    }\n    const idx = locs.findIndex((l) => doesMatch(l, location.pathname));\n    if (idx !== -1) {\n      setValue(idx as Locations);\n    }\n  }, [location.pathname, value]);\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          console.log({ event, newValue });\n          setValue(newValue);\n        }}\n        // showLabels\n\n      >\n        <BottomNavigationAction\n          component={Link}\n          to=\".\"\n          label=\"Charts\"\n          icon={<ShowChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"assets-and-reports\"\n          label=\"Data\"\n          icon={<TableChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"import-export\"\n          label=\"Export/import\"\n          icon={<SettingsIcon />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n","import { Machine, assign, send } from 'xstate';\nimport { FormContextValues } from 'react-hook-form';\n\ninterface FormSchema {\n  states: {\n    idle: {};\n    validating: {};\n    submitting: {};\n    submitted: {};\n  };\n}\n\ntype FormEvent =\n  | {\n      type: 'SUBMIT';\n    }\n  | {\n      type: 'REINIT';\n    };\n\ninterface FormContext<T> {\n  form: FormContextValues<T>;\n}\n\nexport const formMachine = Machine<FormContext<any>, FormSchema, FormEvent>({\n  id: 'form',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        SUBMIT: 'submitting',\n      },\n    },\n    validating: {},\n    submitting: {\n      entry: assign((context, e) => {\n        console.log(\n          'e',\n          e,\n          '---context.form.getValues();',\n          context.form.getValues(),\n        );\n        // send('SAVE', {\n        //   to: 'store',\n        // });\n        console.log('======');\n        return {};\n      }),\n      on: {\n        '': 'submitted',\n      },\n      // onDone: {\n      //   target: 'submitted'\n      // }\n      // entry: send('SAVE', {\n      //   to: 'store',\n      // })\n    },\n    submitted: {\n      on: {\n        'REINIT': 'idle',\n      },\n    },\n  },\n});\n","export const BASE_CURRENCY = 'USD' as const;\n\nexport const ALL_ASSET_TYPES = [\n  'CURRENCY',\n  'CRYPTO_CURRENCY',\n  'SECURITY',\n  'VALUABLE_ASSET',\n  'PRECIOUS_METAL',\n] as const;\n\nexport const ALL_INSTITUTION_TYPES = [\n  'BANK',\n  'BROKER',\n  'PERSON',\n  'PHYSICAL_LOCATION',\n  'E-WALLET',\n  'OTHER',\n] as const;\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\nimport * as yup from 'yup';\n\nimport * as styles from './Insitutions.treat';\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { ALL_INSTITUTION_TYPES } from './constants';\nimport { Th, Table, Tr, Td } from './components/Table';\nimport { StoreEvent } from './machines/store';\nimport { getAssetAccounts } from './Home';\nimport { TopAppBar } from './components/TopAppBar';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldType = 'type';\nconst fieldName = 'name';\nconst fieldSortIndex = 'sortIndex';\n\ntype FormValues = {\n  [fieldType]: string;\n  [fieldName]: string;\n  [fieldSortIndex]: number;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nconst yupInstitution = yup.object({\n  [fieldType]: yup.string().required('required'),\n  [fieldName]: yup.string().required('required'),\n  [fieldSortIndex]: yup\n    .number()\n    .integer()\n    .moreThan(-1, 'required posititve number')\n    .required('required'),\n});\n\nexport const Insitutions: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>({\n    validationSchema: yupInstitution,\n  });\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('________', values);\n    formMachineSend('SUBMIT');\n  };\n\n  const deleteInstitution = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'institutions',\n      data: {\n        id,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'institutions',\n        data: yupInstitution.validateSync(\n          formMachineState.context.form.getValues()\n        ),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  return (\n    <div className={styles.root}>\n      <h1>Institutions {store?.data.institutions?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={3}></Th>\n              <Th>Used in # of</Th>\n              <Th></Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>type</Th>\n              <Th>name</Th>\n              <Th>sort index</Th>\n              <Th>asset accounts</Th>\n              <Th>action</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldType}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_INSTITUTION_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldSortIndex}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.sortIndex?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store?.data.institutions?.map((inst) => {\n              const assetAccountsWithCurrentInstitution = getAssetAccounts(\n                store\n              )!.filter((aa) => aa.institutionId === inst.id);\n              return (\n                <Tr key={inst.id}>\n                  <Td>{inst.id}</Td>\n                  <Td>{inst.type}</Td>\n                  <Td>{inst.name}</Td>\n                  <Td>{inst.sortIndex}</Td>\n                  <Td>{assetAccountsWithCurrentInstitution.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentInstitution.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteInstitution(inst.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","export var root = '_2kclh';","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { getAssetAccounts } from './Home';\nimport { TopAppBar } from './components/TopAppBar';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, any, any>;\n};\n\nconst fieldInstitutionId = 'institutionId';\nconst fieldAssetId = 'assetId';\nconst fieldName = 'name';\n\ntype FormValues = {\n  [fieldInstitutionId]: string;\n  [fieldAssetId]: string;\n  [fieldName]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const AssetAccounts: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assetAccounts',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAssetAccount = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assetAccounts',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Asset accounts {getAssetAccounts(store)?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={4}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>id</Th>\n              <Th>asset</Th>\n              <Th>institution</Th>\n              <Th>name</Th>\n              <Th>reports</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldAssetId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.assets.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.class} {v.subclass} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <select\n                  name={fieldInstitutionId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.institutions.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.type} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {getAssetAccounts(store)?.map((assetAccount) => {\n              // actually store is definitely not undefined here\n              // as `getAssetAccounts` has returned data\n              if (store === undefined) {\n                return null;\n              }\n              const assetAccountStatesWithThisAssetAccount = store?.data.assetAccountStates.filter(\n                (aas) => aas.assetAccountId === assetAccount.id\n              );\n              return (\n                <Tr key={assetAccount.id}>\n                  <Td>{assetAccount.id}</Td>\n                  <Td>\n                    {\n                      store.data.assets.find(\n                        (a) => a.id === assetAccount.assetId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>\n                    {\n                      store.data.institutions.find(\n                        (a) => a.id === assetAccount.institutionId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>{assetAccountStatesWithThisAssetAccount.length}</Td>\n                  <Td>\n                    {assetAccountStatesWithThisAssetAccount.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAssetAccount(assetAccount.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { ALL_ASSET_TYPES } from './constants';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreEvent } from './machines/store';\nimport { getAssetAccounts } from './Home';\nimport { TopAppBar } from './components/TopAppBar';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldClass = 'class';\nconst fieldSubclass = 'subclass';\nconst fieldName = 'name';\nconst fieldCurrency = 'currency';\n\ntype FormValues = {\n  [fieldClass]: string;\n  [fieldSubclass]: string;\n  [fieldName]: string;\n  [fieldCurrency]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const Assets: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assets',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAsset = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assets',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Assets {store?.data.assets?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={5}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>class</Th>\n              <Th>subclass</Th>\n              <Th>name</Th>\n              <Th>currency</Th>\n              <Th>asset accounts</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldClass}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_ASSET_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldSubclass}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.subclass?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldCurrency}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.currency?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store?.data.assets?.map((asset) => {\n              const assetAccountsWithCurrentAsset = getAssetAccounts(\n                store\n              )?.filter((aa) => aa.assetId === asset.id)!;\n              return (\n                <Tr key={asset.id}>\n                  <Td>{asset.id}</Td>\n                  <Td>{asset.class}</Td>\n                  <Td>{asset.subclass}</Td>\n                  <Td>{asset.name}</Td>\n                  <Td>{asset.currency}</Td>\n                  <Td>{assetAccountsWithCurrentAsset.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentAsset.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAsset(asset.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\n// function a11yProps(index: any) {\n//   return {\n//     id: `simple-tab-${index}`,\n//     'aria-controls': `simple-tabpanel-${index}`,\n//   };\n// }\n\nexport const TopAppBar: React.FC = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          variant=\"scrollable\"\n          scrollButtons=\"desktop\"\n        >\n          <Tab label=\"Reports\" component={Link} to=\".\" />\n          <Tab label=\"Assets\" component={Link} to=\"assets\" />\n          <Tab label=\"Institutions\" component={Link} to=\"institutions\" />\n          <Tab label=\"Asset accounts\" component={Link} to=\"asset-accounts\" />\n        </Tabs>\n      </AppBar>\n      {/* <TabPanel value={value} index={0}>\n        Item One\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        Item Two\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        Item Three\n      </TabPanel> */}\n    </>\n  );\n};\n","import _ from 'lodash';\nimport React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport {\n  useForm,\n  // ValidationResolver,\n  // SchemaValidationResult,\n} from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\n\n// import { superstruct, Struct } from 'superstruct';\nimport * as yup from 'yup';\n\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { useNavigate } from 'react-router';\nimport { StoreEvent } from './machines/store';\nimport { Table, Tr, Td } from './components/Table';\nimport { getAssetAccounts, getInstitutions } from './Home';\n// import { superstructResolver } from './react-hook-form-resolvers/superstruct';\n// import { yupResolver } from './react-hook-form-resolvers/yup';\n\n// const struct = superstruct({\n//   types: {\n//     nonEmpty: (value) => value !== '',\n//   },\n// });\n\n// const struct = superstruct({\n//   types: {\n//     assetAccountState: value => value\n//   }\n//   // id: 'number',\n//   // title: 'string',\n//   // is_published: 'boolean?',\n//   // tags: ['string'],\n//   // author: {\n//   //   id: 'number',\n//   // },\n// })\n\n// const StructAssectAccountState = struct({\n//   assetAccountStates: [\n//     {\n//       balance: 'string & nonEmpty',\n//       // institutionId: 'string',\n//       // assetId: 'string',\n//       // balance: 'string',\n//       // comment: 'string?'\n//     },\n//   ],\n// });\n\nconst yupAssectAccountState = yup.object({\n  date: yup.date().required('дата!'),\n  assetAccountStates: yup.array().of(\n    yup.object({\n      balance: yup.string().required('заполняй, сука'),\n      assetAccountId: yup.string().required('заполняй, сука'),\n      // pricePerUnit: yup.string().required('заполняй, сука'),\n    })\n  ),\n});\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\ntype FormValues = {\n  date: string;\n  assetAccountStates: fintrack.AssetAccountState[];\n  // abc: string;\n};\n\nexport const AddEditReport: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const params = useParams();\n\n  const assetAccounts = getAssetAccounts(store);\n\n  let report: fintrack.Report | undefined;\n  let assetAccountStates: fintrack.AssetAccountState[] | undefined;\n  if (params.reportId !== undefined) {\n    report = store?.data.reports.find((r) => r.id === params.reportId);\n    const nonSortedAssetAccountStates = store?.data.assetAccountStates.filter(\n      (r) => r.reportId === report?.id\n    );\n    assetAccountStates = _.sortBy(nonSortedAssetAccountStates, (aas) => {\n      return assetAccounts?.findIndex((aa) => aa.id === aas.assetAccountId);\n    });\n  }\n\n  const form = useForm<FormValues>({\n    // validationResolver: superstructResolver(StructAssectAccountState),\n    // validationResolver: yupResolver(yupAssectAccountState),\n    validationSchema: yupAssectAccountState,\n    defaultValues: {\n      date: report?.datetime\n        ? new Date(report.datetime).toISOString().substr(0, 10)\n        : new Date().toISOString().substr(0, 10),\n      assetAccountStates,\n    },\n    // validationContext: {\n    //   'x': 'asd'\n    // }\n  });\n\n  const navigate = useNavigate();\n\n  const latestReportId = _.maxBy(store?.data.reports, (r) => r.datetime)?.id;\n  const latestAssetAccountStates = store?.data.assetAccountStates.filter(\n    (aas) => aas.reportId === latestReportId\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('=====values', values.date, values);\n    if (report === undefined) {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'create',\n        entity: 'assetAccountStates',\n        data: values,\n      });\n    } else {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'update',\n        entity: 'assetAccountStates',\n        data: {\n          reportId: report.id,\n          ...values,\n        },\n      });\n    }\n    navigate('/');\n  };\n\n  // const { fields, append, prepend, remove } = useFieldArray({\n  //   control: form.control,\n  //   name: 'items',\n  // });\n\n  // useEffect(() => {\n  //   append({ })\n  // }, [store?.assetAccounts])\n\n  // console.log('====form.errors', form.errors.assetAccountStates?.[0].balance);\n  // console.log('====', yupAssectAccountState.fields);\n  // console.log('==== err', form.getValues(), form.errors);\n\n  return (\n    <div>\n      <h1>Add report</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <input type=\"date\" name=\"date\" ref={form.register} />\n        {form.errors.date?.message}\n        <br />\n        <br />\n\n        <Table>\n          <thead>\n            <Tr>\n              <Td></Td>\n              <Td>New balance</Td>\n              <Td>Prev balance</Td>\n            </Tr>\n          </thead>\n          <tbody>\n            {assetAccounts?.map((assetAccount, index) => {\n              const renderInstitutionHeader =\n                index === 0 ||\n                assetAccounts[index].institutionId !==\n                  assetAccounts[index - 1].institutionId;\n              const rowWithHeader = !renderInstitutionHeader ? null : (\n                <Tr key={`header${assetAccount.id}`}>\n                  <Td colspan={3}>\n                    <h3>\n                      {\n                        getInstitutions(store)?.find(\n                          (i) => i.id === assetAccount.institutionId\n                        )?.name\n                      }\n                    </h3>\n                  </Td>\n                </Tr>\n              );\n              const rowWithData = (\n                <Tr key={`data${assetAccount.id}`}>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>\n                    <input\n                      name={`assetAccountStates[${index}].balance`}\n                      ref={form.register}\n                    />\n                    <input\n                      type=\"hidden\"\n                      name={`assetAccountStates[${index}].assetAccountId`}\n                      ref={form.register}\n                      value={assetAccount.id}\n                    />\n                    {form.errors.assetAccountStates?.[index]?.balance &&\n                      (form.errors.assetAccountStates?.[index]?.balance as any)\n                        .message}\n                  </Td>\n                  <Td>\n                    {\n                      latestAssetAccountStates?.find(\n                        (laas) => laas.assetAccountId === assetAccount.id\n                      )?.balance\n                    }\n                  </Td>\n                </Tr>\n              );\n              return (\n                <React.Fragment>\n                  {rowWithHeader}\n                  {rowWithData}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </Table>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Outlet, Routes, Route } from 'react-router';\nimport { Insitutions } from './Insitutions';\nimport { AssetAccounts } from './AssetAccounts';\nimport { Assets } from './Assets';\nimport { StoreEvent } from './machines/store';\nimport { Interpreter } from 'xstate';\nimport { TopAppBar } from './components/TopAppBar';\nimport { Home } from './Home';\nimport { AddEditReport } from './AddReport';\n\ntype Props = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nexport const AssetsAndReports: React.FC<Props> = ({\n  storeService,\n}) => {\n  return (\n    <div>\n      <TopAppBar />\n      {/* <Outlet /> */}\n      <Routes>\n        <Route\n          path=\"institutions\"\n          element={<Insitutions storeService={storeService} />}\n        />\n        <Route path=\"assets\" element={<Assets storeService={storeService} />} />\n        <Route\n          path=\"asset-accounts\"\n          element={<AssetAccounts storeService={storeService} />}\n        />\n        <Route element={<Home storeService={storeService} />} />\n        <Route\n          path=\"add-edit-report/:reportId\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n        <Route\n          path=\"add-edit-report\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n      </Routes>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Interpreter } from 'xstate';\nimport { useNavigate } from 'react-router';\nimport Button from '@material-ui/core/Button';\n\nimport { StoreEvent, StoreContext } from './machines/store';\n\ntype Props = {\n  state: any;\n  send: any;\n  storeService: Interpreter<StoreContext, any, StoreEvent, any>;\n};\n\nexport const ImportExport: React.FC<Props> = ({\n  state: state1,\n  send,\n  storeService,\n}) => {\n  const navigate = useNavigate();\n\n  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    var reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files![0]);\n\n    function onReaderLoad(event: ProgressEvent<FileReader>) {\n      console.log(event.target!.result);\n      var obj = JSON.parse(event.target!.result as string);\n      // alert_data(obj.name, obj.family);\n      send('LOAD_FROM_INPUT', {\n        data: obj,\n      });\n\n      navigate('/');\n    }\n  };\n\n  return (\n    <div>\n      {/* <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          send('SAVE');\n        }}\n        disabled={state1.matches('saving')}\n      >\n        prepare data for export\n      </Button> */}\n\n      <br />\n      <br />\n      {/* {state1.matches('saving') && (\n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          color=\"secondary\"\n          size=\"large\"\n          onClick={() => {\n            send('SAVE');\n          }}\n        >\n          <a\n            href={state1.context.urlDataToSave}\n            download=\"fintrack.json\"\n            onClick={() => {\n              setTimeout(() => {\n                send('SAVED');\n              }, 500);\n            }}\n          >\n            download\n          </a>\n        </Button>\n      )} */}\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          function download(content: any) {\n            var file = new Blob([content], {\n              type: 'text/json;charset=UTF-8',\n            });\n            var reader = new FileReader();\n            reader.onload = function () {\n              // var popup = window.open();\n              var link = document.createElement('a');\n              link.setAttribute('href', reader.result as string);\n              link.setAttribute('download', 'fintrack.json');\n              // popup!.\n              document.body.appendChild(link);\n              link.click();\n            };\n            reader.readAsDataURL(file);\n          }\n\n          download(JSON.stringify(state1.context.db, null, 2));\n\n          // setTimeout(() => {\n          //   send('SAVED');\n          // }, 500);\n        }}\n      >\n        export\n      </Button>\n\n      <br />\n      <br />\n\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        import\n        <div style={{ display: 'none ' }}>\n          <input type=\"file\" onChange={handleFile} />\n        </div>\n      </Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { useMachine } from '@xstate/react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport * as styles from './App.treat';\n// import { fetchMachine } from './machines/fetch';\nimport { storeMachine } from './machines/store';\nimport { fintrack } from '../typings/fintrack';\nimport { Charts } from './Charts';\nimport { BottomAppBar } from './components/BottomAppBar';\nimport { AssetsAndReports } from './AssetsAndReports';\nimport { ImportExport } from './ImportExport';\n\nexport const StoreContext = React.createContext<fintrack.JSONShape | undefined>(\n  undefined\n);\n\nconst App: React.FC = () => {\n  const [state1, send, storeService] = useMachine(storeMachine, {\n    devTools: true,\n  });\n\n  return (\n    <StoreContext.Provider value={state1.context.db?.getState()}>\n      <BrowserRouter>\n        <React.Fragment>\n          <CssBaseline />\n          <div className={styles.root}>\n            <div className={styles.content}>\n              <Routes>\n                <Route element={<Charts />} />\n                <Route\n                  path=\"assets-and-reports/*\"\n                  element={<AssetsAndReports storeService={storeService} />}\n                />\n                <Route\n                  path=\"import-export\"\n                  element={\n                    <ImportExport\n                      state={state1}\n                      send={send}\n                      storeService={storeService}\n                    />\n                  }\n                />\n              </Routes>\n            </div>\n            <BottomAppBar />\n          </div>\n        </React.Fragment>\n      </BrowserRouter>\n    </StoreContext.Provider>\n  );\n};\n\nexport default App;\n","import \"!../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./App.treat.3I0oFzE.css\";\nexport var root = '_3QqL3';\nexport var nav = '_3m8Iv';\nexport var content = '_2KOUX';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}