{"version":3,"sources":["machines/fetch.ts","machines/store.ts","components/Table.tsx","components/Table.treat.ts","constants.ts","utils.ts","Home.tsx","Charts.tsx","components/BottomAppBar.tsx","Insitutions.tsx","Insitutions.treat.ts","machines/form.ts","AssetAccounts.tsx","Assets.tsx","components/TopAppBar.tsx","AddReport.tsx","AddEditInstitution.tsx","InstitutionsSort.tsx","AssetsAndReports.tsx","ImportExport.tsx","App.tsx","App.treat.ts","serviceWorker.ts","index.tsx"],"names":["fetchMachine","Machine","id","initial","context","url","data","error","retries","maxRetries","states","idle","on","FETCH","loading","invoke","src","onDone","target","actions","sendParent","onError","success","REFETCH","failure","cond","RETRY","fatal","type","guards","canNotRetry","setData","assign","_","event","notifyData","console","log","setError","notifyError","incrementRetries","services","fetch","then","response","json","nanoid","customAlphabet","localDateStringToUtcTimestamp","date","localDate","Date","UTC","getFullYear","getMonth","getDate","storeMachine","key","db","urlDataToSave","undefined","fetchRef","entry","spawn","withContext","name","ctx","e","dbData","sessionStorage","getItem","JSON","parse","low","Memory","setState","LOAD","send","to","LOADED","UPDATE_DATA","LOAD_FROM_INPUT","loaded","window","URL","revokeObjectURL","_state","SAVE","loaded_from_input","setItem","stringify","saving","getState","createObjectURL","Blob","SAVED","updating_data","actionType","entity","reportId","get","push","datetime","write","assetAccountStates","forEach","aas","allErs","er","find","ex","report","value","set","asset","newEr","allReports","r","updatedAssetAccountStates","balance","aasInner","assetAccountId","filter","includes","newAas","allInsts","inst","i","Error","remove","Table","children","className","Tr","Td","colspan","colSpan","Th","ALL_ASSET_TYPES","ALL_INSTITUTION_TYPES","ACCOUNTING_MONEY_FORMAT","accounting","require","formatMoney","amount","symbol","format","amountNumber","parseFloat","getTotalForReport","store","targetCurrency","assetFilterFunction","reduce","acc","currVal","assetAccount","assetAccounts","aa","assets","a","assetId","erData","exchangeRates","isBaseAssetACurrency","class","currencyAsset","currency","erToBaseCurrency","currencyAssetToBase","getExchangeRate","getInstitutions","sortBy","institutions","sortIndex","getAssetAccounts","flatMap","institutionId","Home","props","useContext","StoreContext","sortedReports","reports","Fab","color","aria-label","component","Link","style","margin","top","right","bottom","left","position","Add","map","length","Button","variant","size","toISOString","substr","IconButton","onClick","storeService","Delete","subclass","exchangeRate","rate","width","defaultValue","onChange","v","updateExchangeRate","am4core","am4themes_animated","configureTimelineChart","chart","paddingRight","dateAxis","xAxes","am4charts","renderer","grid","template","location","minGridDistance","dateFormats","setKey","periodChangeDateFormats","axisFills","disabled","fill","fillOpacity","valueAxis","yAxes","minWidth","cursor","xAxis","fullWidthLineX","lineX","strokeWidth","scrollbarX","legend","TotalByCurrenciesChart","dataPerCurrency","totalsByCurrency","compact","toFixed","points","useEffect","seriesData","series","dataFields","dateX","valueY","tooltipText","bullets","create","dispose","height","marginBottom","TotalInCurrenciesChart","totalsInCurrency","stacked","index","yAxis","line","strokeOpacity","stroke","labels","align","marginTop","leftAxesContainer","layout","TotalCashDistibutionByCurrencyChart","containerId","lastReport","maxBy","totalInUSD","innerRadius","category","ticks","slices","alignLabels","text","radius","Charts","display","useStyles","makeStyles","theme","createStyles","padding","spacing","paper","paddingBottom","list","subheader","backgroundColor","palette","background","appBar","grow","flexGrow","fabButton","zIndex","fullList","locs","values","0","1","2","doesMatch","l","pathname","startsWith","BottomAppBar","classes","useLocation","React","useState","setValue","some","idx","findIndex","AppBar","BottomNavigation","newValue","BottomNavigationAction","label","icon","Insitutions","startIcon","Sort","stickyHeader","TableHead","TableRow","TableCell","TableBody","assetAccountsWithCurrentInstitution","hover","formMachine","SUBMIT","validating","submitting","form","getValues","submitted","AssetAccounts","useForm","useMachine","devTools","formMachineState","formMachineSend","matches","onSubmit","handleSubmit","ref","register","required","errors","message","assetAccountStatesWithThisAssetAccount","Assets","assetAccountsWithCurrentAsset","TopAppBar","Tabs","scrollButtons","Tab","yupAssectAccountState","yup","of","AddEditReport","params","useParams","nonSortedAssetAccountStates","foundAas","comment","validationSchema","defaultValues","navigate","useNavigate","nowTimestmap","getTime","prevReport","prevAssetAccountStates","rowWithHeader","prevAssetAccountBalance","laas","rowWithData","as","TextField","InputLabelProps","shrink","disableAnimation","control","helperText","Boolean","Restore","Fragment","Save","yupInstitution","integer","moreThan","AddEditInstitution","validateSync","SortableItem","SortableElement","ListItem","ContainerComponent","ListItemText","primary","ListItemSecondaryAction","SortableContainer1","SortableContainer","List","InstitutionsSort","items","setItems","onSortEnd","sort","newArr","arrayMove","oldIndex","newIndex","AssetsAndReports","path","element","ImportExport","state1","state","content","file","reader","FileReader","onload","link","document","createElement","setAttribute","result","body","appendChild","click","readAsDataURL","download","obj","readAsText","files","createContext","App","Provider","CssBaseline","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98d58837.chunk.js","sourcesContent":["import { Machine, assign, sendParent } from 'xstate';\n\ninterface FetchSchema {\n  states: {\n    idle: {};\n    loading: {};\n    success: {};\n    failure: {};\n    fatal: {};\n  };\n}\n\ninterface FetchContext {\n  url: string;\n  data: any;\n  error: any;\n  retries: number;\n  maxRetries: number;\n}\n\ntype FetchEvent = { type: 'FETCH' } | { type: 'REFETCH' } | { type: 'RETRY' };\n\nexport const fetchMachine = Machine<FetchContext, FetchSchema, FetchEvent>(\n  {\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      url: '',\n      data: null,\n      error: null,\n      retries: 0,\n      maxRetries: 3,\n    },\n    states: {\n      idle: {\n        on: {\n          FETCH: 'loading',\n        },\n      },\n      loading: {\n        invoke: {\n          src: 'fetch',\n          onDone: {\n            target: 'success',\n            actions: ['setData', 'notifyData', sendParent('LOADED')],\n          },\n          onError: {\n            target: 'failure',\n            actions: ['setError', 'notifyError'],\n          },\n        },\n      },\n      success: {\n        on: {\n          REFETCH: {\n            target: 'loading',\n            actions: 'resetRetries',\n          },\n        },\n      },\n      failure: {\n        on: {\n          '': {\n            target: 'fatal',\n            cond: 'canNotRetry',\n          },\n          RETRY: {\n            target: 'loading',\n            actions: 'incrementRetries',\n          },\n        },\n      },\n      fatal: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      canNotRetry: ({ retries, maxRetries }) => retries === maxRetries,\n    },\n    actions: {\n      setData: assign({ data: (_, event) => (event as any).data }),\n      notifyData: () => {\n        console.log('-----notifydata')\n      },\n\n      setError: assign({ error: (_, event) => (event as any).data }),\n      notifyError: () => {},\n\n      incrementRetries: assign({ retries: context => context.retries + 1 }),\n      // resetRetries: assign({ retries: 0 }),\n    },\n    services: {\n      fetch: context =>\n        fetch(context.url)\n          .then(response => response.json())\n          .then(json => json),\n    },\n  }\n);\n","import { Machine, assign, spawn, send } from 'xstate';\nimport { customAlphabet } from 'nanoid';\nimport low, { LowdbSync } from 'lowdb';\nimport Memory from 'lowdb/adapters/Memory';\n\nimport { fetchMachine } from './fetch';\nimport { fintrack } from '../../typings/fintrack';\n\nconst nonAmbiquousChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ123456789';\nconst nanoid = customAlphabet(nonAmbiquousChars, 6);\n\nconst localDateStringToUtcTimestamp = (date: string): number => {\n  const localDate = new Date(date);\n  const utcTimestamp = Date.UTC(\n    localDate.getFullYear(),\n    localDate.getMonth(),\n    localDate.getDate()\n  );\n  return utcTimestamp;\n};\n\ninterface StoreSchema {\n  states: {\n    idle: {};\n    loaded: {};\n    loaded_from_input: {};\n    saving: {};\n    updating_data: {};\n    // saved: {};\n  };\n}\n\nexport interface StoreContext {\n  db: LowdbSync<fintrack.JSONShape> | null;\n  // data: fintrack.JSONShape | null;\n  // fetchMachine: StateMachine<FetchContext, FetchSchema, FetchEvent, any> | null;\n  fetchRef: any;\n  urlDataToSave: string | undefined;\n}\n\ntype EventUpdateDataBase = {\n  type: 'UPDATE_DATA';\n  actionType: 'delete' | 'create' | 'update';\n};\n\ntype EventUpdateDataCreateCommon = {\n  entity: 'institutions' | 'assets' | 'assetAccounts' | 'reports';\n  data: any;\n};\n\ntype EventUpdateDataCreateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'create';\n  data: {\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'update';\n  data: {\n    reportId: fintrack.ID;\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateExchangeRate = {\n  entity: 'exchangeRates';\n  actionType: 'update';\n  data: {\n    asset: fintrack.Asset;\n    report: fintrack.Report;\n    value: string;\n    // date: Date;\n    // assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateData =\n  | (EventUpdateDataBase & EventUpdateDataCreateCommon)\n  | (EventUpdateDataBase & EventUpdateDataCreateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateExchangeRate);\n\ntype LoadFromInput = {\n  type: 'LOAD_FROM_INPUT';\n  data: fintrack.JSONShape;\n};\n\nexport type StoreEvent =\n  | { type: 'LOAD'; data: fintrack.JSONShape }\n  | LoadFromInput\n  | {\n      type: 'LOADED';\n    }\n  | { type: 'SAVE' }\n  | { type: 'SAVED' }\n  | EventUpdateData;\n\n// {\n//   context: {\n//     url: shouldFetchFail ? 'https://non-existent-url' : '/data.json',\n//     maxRetries: 4,\n//   },\n// }\n\nexport const storeMachine = Machine<StoreContext, StoreSchema, StoreEvent>({\n  key: 'store',\n  initial: 'idle',\n  context: {\n    db: null,\n    // data: null,\n    urlDataToSave: undefined,\n    // fetchMachine: null,\n    fetchRef: null,\n  },\n  entry: assign({\n    fetchRef: () =>\n      spawn(\n        fetchMachine.withContext({\n          url: '/data.json',\n          maxRetries: 4,\n          data: null,\n          error: null,\n          retries: 0,\n        }),\n        {\n          name: 'fetch',\n        }\n      ),\n    // TODO any\n  }) as any,\n  states: {\n    idle: {\n      entry: assign((ctx, e) => {\n        if (ctx.db !== null) {\n          return {};\n        }\n        const dbData =\n          sessionStorage.getItem('fintrack_db') !== null\n            ? JSON.parse(sessionStorage.getItem('fintrack_db')!)\n            : null;\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(dbData);\n        return {\n          db,\n        };\n      }),\n      on: {\n        LOAD: {\n          actions: send('FETCH', {\n            to: 'fetch',\n          }),\n        },\n        LOADED: 'loaded',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    loaded: {\n      entry: assign((ctx, e) => {\n        if (ctx.urlDataToSave !== undefined) {\n          window.URL.revokeObjectURL(ctx.urlDataToSave);\n        }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(ctx.fetchRef._state.context.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n      },\n    },\n    loaded_from_input: {\n      entry: assign((ctx, e: LoadFromInput) => {\n        console.log('=========loaded_from_input', e);\n        // if (ctx.urlDataToSave !== undefined) {\n        //   window.URL.revokeObjectURL(ctx.urlDataToSave);\n        // }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(e.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        sessionStorage.setItem(\n          'fintrack_db',\n          JSON.stringify(e.data)\n        );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    saving: {\n      entry: assign((ctx, e) => {\n        console.log('-=====ctx.data', ctx.db?.getState());\n        return {\n          urlDataToSave: window.URL.createObjectURL(\n            new Blob([JSON.stringify(ctx.db?.getState(), null, 2)], {\n              type: 'text/plain',\n            })\n          ),\n        };\n      }),\n      on: {\n        SAVED: 'loaded',\n      },\n      // invoke: {\n      //   src: 'saver',\n      //   onDone: 'saved',\n      //   onError: 'saved',\n      // }\n    },\n    updating_data: {\n      entry: assign((ctx, e: EventUpdateData) => {\n        if (e.actionType === 'create') {\n          if (e.entity === 'assetAccountStates') {\n            const reportId = nanoid();\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .push({\n                id: reportId,\n                datetime: localDateStringToUtcTimestamp(e.data.date),\n              })\n              .write();\n            e.data.assetAccountStates.forEach((aas) => {\n              ctx.db\n                ?.get('data')\n                .get('assetAccountStates')\n                .push({\n                  ...aas,\n                  reportId,\n                })\n                .write();\n            });\n          } else {\n            ctx.db\n              ?.get('data')\n              ?.get(e.entity)\n              .push({\n                id: nanoid(),\n                ...e.data,\n              })\n              .write();\n          }\n        } else if (e.actionType === 'update') {\n          if (e.entity === 'exchangeRates') {\n            const allErs = ctx.db?.get('data').get('exchangeRates');\n            const er = allErs?.find((ex) => ex.reportId === e.data.report.id);\n            if (er?.value() !== undefined) {\n              er.get('data').set(e.data.asset.id, e.data.value).write();\n            } else {\n              const newEr: fintrack.ExchangeRate = {\n                id: nanoid(),\n                reportId: e.data.report.id,\n                data: {\n                  [e.data.asset.id]: e.data.value,\n                },\n              };\n              allErs?.push(newEr).write();\n            }\n          }\n          if (e.entity === 'assetAccountStates') {\n            const allReports = ctx.db?.get('data').get('reports');\n            const report = allReports?.find((r) => r.id === e.data.reportId);\n            report\n              ?.set('datetime', localDateStringToUtcTimestamp(e.data.date))\n              .write();\n\n            let updatedAssetAccountStates: fintrack.ID[] = [];\n\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .forEach((aas) => {\n                if (aas.reportId === e.data.reportId) {\n                  aas.balance = e.data.assetAccountStates.find(\n                    (aasInner) => aasInner.assetAccountId === aas.assetAccountId\n                  )?.balance!;\n                  updatedAssetAccountStates.push(aas.assetAccountId);\n                }\n              })\n              .write();\n\n            e.data.assetAccountStates\n              .filter(\n                (aas) => !updatedAssetAccountStates.includes(aas.assetAccountId)\n              )\n              .forEach((newAas) => {\n                ctx.db\n                  ?.get('data')\n                  .get('assetAccountStates')\n                  .push({\n                    ...newAas,\n                    reportId: e.data.reportId,\n                  })\n                  .write();\n              });\n          }\n          if (e.entity === 'institutions') {\n            const allInsts = ctx.db?.get('data').get('institutions');\n            const inst = allInsts?.find((i) => i.id === e.data.id);\n            inst?.assign(e.data).write();\n          }\n        } else if (e.actionType === 'delete') {\n          if (e.entity === 'institutions') {\n            ctx.db\n              ?.get('data')\n              .get('institutions')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assets') {\n            ctx.db\n              ?.get('data')\n              .get('assets')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assetAccounts') {\n            ctx.db\n              ?.get('data')\n              .get('assetAccounts')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'reports') {\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .remove((i) => i.id === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('exchangeRates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n          }\n        } else {\n          throw new Error('How did you end up here?');\n        }\n        sessionStorage.setItem(\n          'fintrack_db',\n          JSON.stringify(ctx.db?.getState())\n        );\n        // ctx.data?.institutions.push({\n        //   id: nanoid(),\n        //   ...e.data,\n        // });\n        // console.log(\n        //   '!!!!!!updating_data',\n        //   e.actionType,\n        //   e.type,\n        //   e.data,\n        //   ctx.db?.getState()\n        // );\n        return {};\n      }),\n      on: {\n        '': 'idle',\n      },\n    },\n  },\n  // {\n  //   services: {\n  //     saver: context => {\n  //       var data = new Blob(['asd'], {type: 'text/plain'});\n  //       // If we are replacing a previously generated file we need to\n  //       // manually revoke the object URL to avoid memory leaks.\n  //       // if (textFile !== null) {\n  //       //   window.URL.revokeObjectURL(textFile);\n  //       // }\n  //       // textFile = window.URL.createObjectURL(data);\n\n  //       // returns a URL you can use as a href\n  //       return window.URL.createObjectURL(data);\n  //     }\n  //   }\n  // }\n});\n","import React from 'react';\n\nimport * as styles from './Table.treat';\n\nexport const Table: React.FC = ({ children }) => {\n  return (\n    <table className={styles.table}>\n      {children}\n    </table>\n  )\n}\n\nexport const Tr: React.FC = ({ children }) => {\n  return (\n    <tr className={styles.tr}>\n      {children}\n    </tr>\n  )\n}\n\nexport const Td: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <td className={styles.td} colSpan={colspan}>\n      {children}\n    </td>\n  )\n}\n\nexport const Th: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <th className={styles.th} colSpan={colspan}>\n      {children}\n    </th>\n  )\n}\n","import \"!../../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./Table.treat.6VVywW1.css\";\nexport var table = '_3-1r7';\nexport var tr = '_3Mjlo';\nexport var th = '_1rfFa';\nexport var td = 'zX0YF';","import {fintrack} from '../typings/fintrack'\n\nexport const BASE_CURRENCY = 'USD' as const;\n\nexport const ALL_ASSET_TYPES = [\n  'CURRENCY',\n  'CRYPTO_CURRENCY',\n  'SECURITY',\n  'VALUABLE_ASSET',\n  'PRECIOUS_METAL',\n] as const;\n\nexport const ALL_INSTITUTION_TYPES = [\n  'BANK',\n  'BROKER',\n  'PERSON',\n  'PHYSICAL_LOCATION',\n  'E-WALLET',\n  'OTHER',\n] as const;\n\nexport const ACCOUNTING_MONEY_FORMAT: fintrack.AccountingMoneyFormat = [2, \",\", \".\"]\n\n","import { string, array } from 'yup';\n\nimport {fintrack} from '../typings/fintrack'\nimport {ACCOUNTING_MONEY_FORMAT} from './constants'\n\n\nconst accounting = require('accounting');\n\n\nexport function formatMoney(\n  amount: number | string,\n  symbol: string = \"\",\n  format: fintrack.AccountingMoneyFormat = ACCOUNTING_MONEY_FORMAT\n) {\n  const amountNumber = typeof amount === \"number\" ? amount : parseFloat(amount);\n  return accounting.formatMoney(amountNumber, symbol, ...format)\n}\n","import React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport _ from 'lodash';\n\nimport { Link } from 'react-router-dom';\nimport Fab from '@material-ui/core/Fab';\nimport {Add as AddIcon, Delete as DeleteIcon} from '@material-ui/icons';\nimport { IconButton, Button } from '@material-ui/core';\n\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { StoreEvent } from './machines/store';\nimport {formatMoney} from './utils'\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nfunction getExchangeRate(\n  store: fintrack.JSONShape | undefined,\n  erData: fintrack.ExchangeRateData | undefined,\n  // report: fintrack.Report,\n  asset: fintrack.Asset,\n  targetCurrency: fintrack.Currency\n): number {\n  if (erData === undefined) {\n    return 0;\n  }\n  const isBaseAssetACurrency = asset.class === 'CURRENCY';\n  // if (asset.currency === targetCurrency) {\n  //   return 1;\n  // }\n\n  // then find such asset where class is currency, name is asset.currency\n  // and check whether currency of such asset is `fintrack.BaseCurrency` (USD)\n  const currencyAsset = isBaseAssetACurrency\n    ? asset\n    : store?.data.assets.find(\n        (a) => a.class === 'CURRENCY' && a.name === asset.currency\n      )!;\n  let erToBaseCurrency = 1;\n\n  if (currencyAsset.currency !== targetCurrency) {\n    const currencyAssetToBase = store?.data.assets.find(\n      (a) => a.class === 'CURRENCY' && a.name === targetCurrency\n    );\n    if (currencyAssetToBase !== undefined) {\n      const er = erData[currencyAssetToBase.id];\n      if (er !== null) {\n        // console.log({ er })\n        erToBaseCurrency = parseFloat(er!);\n      } else {\n        erToBaseCurrency = 0;\n      }\n    }\n  }\n  if (erToBaseCurrency === 0) {\n    return 0;\n  }\n  // console.log({ targetCurrency, asset, currencyAsset, erToBaseCurrency });\n  return (\n    (parseFloat(erData[currencyAsset.id] || '0') / erToBaseCurrency) *\n    (isBaseAssetACurrency ? 1 : parseFloat(erData[asset.id] || '0'))\n  );\n}\n\nexport function getTotalForReport(\n  store: fintrack.JSONShape | undefined,\n  report: fintrack.Report,\n  targetCurrency: fintrack.Currency,\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean\n): number | undefined {\n  return store?.data.assetAccountStates\n    .filter((aas) => aas.reportId === report.id)\n    .reduce((acc, currVal) => {\n      const assetAccount = store.data.assetAccounts.find(\n        (aa) => aa.id === currVal.assetAccountId\n      )!;\n      const asset = store.data.assets.find(\n        (a) => a.id === assetAccount.assetId\n      )!;\n      if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n        return acc;\n      }\n      // asset.currency\n      const erData = store.data.exchangeRates.find(\n        (er) => er.reportId === report.id\n      )?.data;\n      // const erToAssetCurrency = erData[asset.id] ?? '0';\n      let erFromAssetToTarget = getExchangeRate(\n        store,\n        erData,\n        asset,\n        targetCurrency\n      );\n      const assetPriceInBaseCurrency =\n        // parseFloat(erToAssetCurrency) *\n        erFromAssetToTarget * parseFloat(currVal.balance);\n      return assetPriceInBaseCurrency + acc;\n    }, 0);\n}\n\nexport function getInstitutions(\n  store: fintrack.JSONShape | undefined\n): fintrack.Institution[] | undefined {\n  return _.sortBy(store?.data.institutions, (i) => i.sortIndex);\n}\n\nexport function getAssetAccounts(\n  store: fintrack.JSONShape | undefined\n): fintrack.AssetAccount[] | undefined {\n  return getInstitutions(store)?.flatMap((inst) => {\n    return _.sortBy(\n      store?.data.assetAccounts.filter((aa) => aa.institutionId === inst.id),\n      // TODO replace name with sort order\n      (aa) => aa.name\n    );\n  });\n}\n\nexport const Home: React.FC<OwnProps> = (props) => {\n  const store = useContext(StoreContext);\n\n  const assetAccounts = getAssetAccounts(store);\n  if (assetAccounts === undefined) {\n    return null;\n  }\n  const sortedReports = _.sortBy(store?.data.reports, (r) => -1 * r.datetime);\n  const assets = store?.data.assets;\n  const lastReport = sortedReports[0]!;\n\n  const deleteReport = (reportId: string) => {\n    props.storeService.send('UPDATE_DATA', {\n      actionType: 'delete',\n      entity: 'reports',\n      data: {\n        id: reportId,\n      },\n    });\n  };\n\n  const updateExchangeRate = (\n    value: string,\n    asset: fintrack.Asset,\n    report: fintrack.Report\n  ) => {\n    console.log('_________value', value, asset, report);\n\n    props.storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'update',\n      entity: 'exchangeRates',\n      data: {\n        value,\n        asset,\n        report,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Your net worth is...</h1>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        component={Link}\n        to=\"add-edit-report\"\n        style={{\n          margin: 0,\n          top: 'auto',\n          right: 20,\n          bottom: 80,\n          left: 'auto',\n          position: 'fixed',\n        }}\n      >\n        <AddIcon />\n      </Fab>\n      <Table>\n        <thead>\n          <Tr>\n            <Th></Th>\n            {getInstitutions(store)?.map((inst) => {\n              return (\n                <Th\n                  key={inst.id}\n                  colspan={\n                    assetAccounts.filter((aa) => aa.institutionId === inst.id)\n                      .length\n                  }\n                >\n                  {inst.name}\n                </Th>\n              );\n            })}\n          </Tr>\n          <Tr>\n            <Th>date</Th>\n            {assetAccounts.map((aa) => (\n              <Th>{aa.name}</Th>\n            ))}\n            <Th>Total in RUB</Th>\n            <Th>Total in USD</Th>\n            <Th>Total in EUR</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const assetAccountStates = store?.data.assetAccountStates.filter(\n              (aas) => aas.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    color=\"primary\"\n                    component={Link}\n                    to={`add-edit-report/${report.id}`}\n                  >\n                    {new Date(report.datetime).toISOString().substr(0, 10)}\n                  </Button>\n                </Td>\n                {assetAccounts.map((aa) => {\n                  const aas = assetAccountStates?.find(\n                    (aas) => aas.assetAccountId === aa.id\n                  );\n                  return <Td>{formatMoney(aas?.balance || '0')}</Td>;\n                })}\n                <Td>{formatMoney(getTotalForReport(store, report, 'RUB') || 0)}</Td>\n                <Td>{formatMoney(getTotalForReport(store, report, 'USD') || 0)}</Td>\n                <Td>{formatMoney(getTotalForReport(store, report, 'EUR') || 0)}</Td>\n                <Td>\n                    <IconButton\n                      color=\"secondary\"\n                      size=\"small\"\n                      onClick={() => deleteReport(report.id)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                </Td>\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <h2>Exchange rates</h2>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>date</Th>\n            {assets?.map((a) => (\n              <Th>\n                {a.class} {a.subclass} {a.name} in {a.currency}\n              </Th>\n            ))}\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const exchangeRate = store?.data.exchangeRates.find(\n              (er) => er.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>{new Date(report.datetime).toISOString().substr(0, 10)}</Td>\n                {assets?.map((a) => {\n                  const rate = exchangeRate?.data?.[a.id];\n                  // const aas = exchangeRate.find(\n                  //   (aas) => aas.assetAccountId === aa.id\n                  // );\n                  return (\n                    <Td>\n                      <input\n                        style={{ width: 50 }}\n                        defaultValue={rate}\n                        onChange={(v) =>\n                          updateExchangeRate(v.target.value, a, report)\n                        }\n                      />\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\n// import { ResponsiveBump, BumpInputSerie } from '@nivo/bump';\nimport { ResponsiveLine, Serie } from '@nivo/line';\nimport { isWithinInterval, addYears } from 'date-fns';\nimport { addMonths } from 'date-fns/esm';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport _ from 'lodash';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4plugins_rangeSelector from \"@amcharts/amcharts4/plugins/rangeSelector\"; \n\nimport { StoreContext } from './App';\nimport { getTotalForReport } from './Home';\nimport { fintrack } from '../typings/fintrack';\n\nam4core.useTheme(am4themes_animated);\n\n\nconst configureTimelineChart = (chart: any, createValueAxis: boolean = true) => {\n  chart.paddingRight = 20;\n  // chart.dateFormatter.dateFormat = \"MMM yyyy\";\n\n  let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n  dateAxis.renderer.grid.template.location = 0;\n  // dateAxis.renderer.grid.template.location = 0.5;\n  dateAxis.renderer.minGridDistance = 50;\n\n  // NOTE: range selection plugin\n  // let selector = new am4plugins_rangeSelector.DateAxisRangeSelector();\n  // selector.container = document.getElementById(\"selectordiv\")!;\n  // selector.axis = dateAxis;\n\n  // NOTE: https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Formatting_date_and_time\n  dateAxis.dateFormats.setKey(\"day\", \"MMMM dt\");\n  dateAxis.dateFormats.setKey(\"month\", \"MMM yyyy\");\n  dateAxis.periodChangeDateFormats.setKey(\"month\", \"[bold]MMM yyyy\");\n\n  // NOTE: https://www.amcharts.com/docs/v4/tutorials/using-fill-rules-on-a-date-axis/\n  dateAxis.renderer.axisFills.template.disabled = false;\n  dateAxis.renderer.axisFills.template.fill = am4core.color(\"#1AB0F1\");\n  dateAxis.renderer.axisFills.template.fillOpacity = 0.1;\n\n  // dateAxis.startLocation = 0.5;\n  // dateAxis.endLocation = 0.5;\n  \n  // if createValueAxis) {}\n  let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n  // valueAxis.tooltip!.disabled = true;\n  valueAxis.renderer.minWidth = 35;\n\n  let cursor = new am4charts.XYCursor();\n  cursor.xAxis = dateAxis;\n  cursor.fullWidthLineX = true;\n  cursor.lineX.strokeWidth = 0;\n  cursor.lineX.fill = am4core.color(\"#8F3985\");\n  cursor.lineX.fillOpacity = 0.1;\n  chart.cursor = cursor;\n\n  let scrollbarX = new am4charts.XYChartScrollbar();\n  // scrollbarX.series.push(allSeries[0]);\n  // scrollbarX.series.push(allSeries[1]);\n  chart.scrollbarX = scrollbarX;\n\n  chart.legend = new am4charts.Legend();\n\n  // NOTE: zoom to last year by default.\n  // https://www.amcharts.com/docs/v4/tutorials/pre-zooming-an-axis/#Setting_up_pre_zoom\n  // chart.events.on(\"ready\", function () {\n  //   const toDate = new Date();\n  //   const fromDate = new Date();\n  //   fromDate.setFullYear(toDate.getFullYear() - 1);\n  //   dateAxis.zoomToDates(fromDate, toDate);\n  // });\n};\n\n\nconst TotalByCurrenciesChart: React.FC = () => {\n  const store = useContext(StoreContext);\n  const currencies: fintrack.Currency[] = ['USD', 'EUR', 'RUB'];\n  const reports = store?.data.reports\n\n  function create(dataPerCurrency: any) {\n    let chart = am4core.create(\"total_by_currencies_chart\", am4charts.XYChart);\n    configureTimelineChart(chart);\n    // data series\n    let allSeries = _.map(dataPerCurrency, (seriesData) => {\n      let series = chart.series.push(new am4charts.LineSeries());\n      series.data = seriesData.points;\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n      series.name = seriesData.currency;\n      series.strokeWidth = 3;\n      series.tooltipText = \"{valueY.value} ({valueY.change})\";\n      series.bullets.push(new am4charts.CircleBullet());\n      return series;\n    });\n    \n    return chart;\n  }\n\n  const dataPerCurrency = currencies.map((currency) => {\n    const totalsByCurrency = _.compact(\n      reports?.map((report) => {\n        return {\n          date: new Date(report.datetime),\n          value: parseFloat((\n            getTotalForReport(\n              store,\n              report,\n              currency,\n              (a) => a.name === currency\n            ) || 0\n          ).toFixed(0)),\n        }\n      })\n    );\n    return {\n      currency: currency,\n      points: totalsByCurrency || [],\n    };\n  });\n\n  useEffect(() => {\n    const chart = create(dataPerCurrency);\n    return () => {chart.dispose()};\n  });\n\n  return (\n    <div id=\"total_by_currencies_chart\" style={{ width: \"100%\", height: \"500px\", marginBottom: \"100px\" }}></div>\n    // <div id=\"selectordiv\" style={{ width: \"100%\", height: \"30px\", marginBottom: \"100px\" }} />\n  );\n}\n\n\nconst TotalInCurrenciesChart = (props: {stacked: boolean}) => {\n  const store = useContext(StoreContext);\n  const currencies: fintrack.Currency[] = ['USD', 'EUR', 'RUB'];\n  const reports = store?.data.reports\n\n  function create(dataPerCurrency: any) {\n    let chart = am4core.create(\"total_in_currencies_chart\", am4charts.XYChart);\n    configureTimelineChart(chart, !props.stacked);\n    let allSeries = _.map(dataPerCurrency, (seriesData, index: number) => {  \n      let series = chart.series.push(new am4charts.LineSeries());\n      series.data = seriesData.points;\n      series.dataFields.dateX = \"date\";\n      series.dataFields.valueY = \"value\";\n      series.name = seriesData.currency;\n      series.strokeWidth = 3;\n      series.tooltipText = \"{valueY.value} ({valueY.change})\";\n      series.bullets.push(new am4charts.CircleBullet());\n\n      if (props.stacked) {\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        series.yAxis = valueAxis;\n        valueAxis.renderer.line.strokeOpacity = 1;\n        valueAxis.renderer.line.stroke = series.stroke;\n        valueAxis.renderer.grid.template.stroke = series.stroke;\n        valueAxis.renderer.grid.template.strokeOpacity = 0.1;\n        valueAxis.renderer.labels.template.fill = series.stroke;\n        valueAxis.renderer.minGridDistance = 20;\n        valueAxis.align = \"right\";\n        if (index === 0) {\n          valueAxis.marginBottom = 20;\n        } else {\n          if (index === dataPerCurrency.length - 1) {\n            valueAxis.marginTop = 20;\n          } else {\n            valueAxis.marginTop = 10;\n            valueAxis.marginBottom = 10;\n          }\n        };\n      }\n      return series;\n    });\n\n    if (props.stacked) {\n      chart.leftAxesContainer.layout = \"vertical\";\n    };\n\n    return chart;\n  }\n\n  const dataPerCurrency = currencies.map((currency) => {\n    const totalsInCurrency = _.compact(\n      reports?.map((report) => {\n        return {\n          date: new Date(report.datetime),\n          value: parseFloat((\n            getTotalForReport(store, report, currency) || 0\n          ).toFixed(0)),\n        }\n      })\n    );\n    return {\n      currency: currency,\n      points: totalsInCurrency || [],\n    };\n  });\n\n  useEffect(() => {\n    const chart = create(dataPerCurrency);\n    return () => {chart.dispose()};\n  });\n\n  return (\n    <div id=\"total_in_currencies_chart\" style={{ width: \"100%\", height: \"500px\", marginBottom: \"100px\" }}></div>\n    // <div id=\"selectordiv\" style={{ width: \"100%\", height: \"30px\", marginBottom: \"100px\" }} />\n  );\n}\n\n\nconst TotalCashDistibutionByCurrencyChart: React.FC = () => {\n  const containerId = \"total_cash_distribution_by_currency_chart\";\n  const store = useContext(StoreContext);\n  const currencies: fintrack.Currency[] = ['USD', 'EUR', 'RUB'];\n  const reports = store?.data.reports\n\n  function create(data: {currency: string, totalInUSD: number}[]) {\n    let chart = am4core.create(containerId, am4charts.PieChart);\n    chart.data = data;\n\n    chart.innerRadius = am4core.percent(30);\n\n    let series = chart.series.push(new am4charts.PieSeries());    \n    series.dataFields.value = \"totalInUSD\";\n    series.dataFields.category = \"currency\";\n\n    series.ticks.template.disabled = true;\n\n    series.slices.template.strokeWidth = 2;\n    series.slices.template.stroke = am4core.color(\"#000\");\n    series.slices.template.tooltipText = \"{value.value.formatNumber('#,###.')} USD\";\n\n    series.alignLabels = false;\n    series.labels.template.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\n    series.labels.template.radius = am4core.percent(-35);\n    series.labels.template.fill = am4core.color(\"white\");    \n    return chart;\n  }\n\n  const lastReport = _.maxBy(store?.data.reports, (r) => r.datetime);\n\n  let data: {currency: string, totalInUSD: number}[] = [];\n  if (lastReport) {\n    data = currencies.map((currency) => {\n      return {\n        currency: currency,\n        totalInUSD: getTotalForReport(\n          store,\n          lastReport,\n          'USD',\n          (a: fintrack.Asset) => a.class === 'CURRENCY' && a.name === currency\n        ) || 0,\n      };\n    });\n  };\n  console.log(data);\n\n  useEffect(() => {\n    const chart = create(data);\n    return () => {chart.dispose()};\n  });\n\n  return (\n    <div id={containerId} style={{ width: \"100%\", height: \"500px\", marginBottom: \"100px\" }}></div>\n  );\n}\n\n\nexport const Charts: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  return (\n    <div style={{ height: 300 }}>\n      <h1>Charts</h1>\n      <div style={{ width: '100%', height: 300, display: 'flex' }}>\n        <div style={{ width: '50%', height: 300}}>\n          <h3>Total by currency</h3>\n          <TotalByCurrenciesChart />\n        </div>\n        <div style={{ width: '50%', height: 300}}>\n        <h3>Total in currency</h3>\n          <TotalInCurrenciesChart stacked={false} />\n        </div>\n      </div>\n      <div style={{ width: '100%', height: '300px', marginTop: '300px', marginBottom: '50px' }}>\n        <div style={{ width: '50%', height: '300px'}}>\n          <h3>Cash distribution by currency</h3>\n          <TotalCashDistibutionByCurrencyChart />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport ShowChartOutlinedIcon from '@material-ui/icons/ShowChartOutlined';\nimport TableChartOutlinedIcon from '@material-ui/icons/TableChartOutlined';\nimport ImportExportOutlinedIcon from '@material-ui/icons/ImportExportOutlined';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport React, { useEffect } from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport _ from 'lodash';\nimport { AppBar } from '@material-ui/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    text: {\n      padding: theme.spacing(2, 2, 0),\n    },\n    paper: {\n      paddingBottom: 50,\n    },\n    list: {\n      marginBottom: theme.spacing(2),\n    },\n    subheader: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n    // list: {\n    //   width: 250,\n    // },\n    fullList: {\n      width: 'auto',\n    },\n  })\n);\n\nconst locations = {\n  0: '/',\n  1: '/assets-and-reports',\n  2: '/import-export',\n} as const;\n\ntype Locations = keyof typeof locations;\nconst locs = _.values(locations);\n\nconst doesMatch = (l: string, pathname: string): boolean =>\n  l === '/' ? pathname === '/' : pathname.startsWith(l);\n\nexport const BottomAppBar: React.FC = () => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  const [value, setValue] = React.useState<Locations | undefined>(undefined);\n\n  useEffect(() => {\n    if (!locs.some((l) => doesMatch(l, location.pathname))) {\n      setValue(undefined);\n    }\n    const idx = locs.findIndex((l) => doesMatch(l, location.pathname));\n    if (idx !== -1) {\n      setValue(idx as Locations);\n    }\n  }, [location.pathname, value]);\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          console.log({ event, newValue });\n          setValue(newValue);\n        }}\n        // showLabels\n\n      >\n        <BottomNavigationAction\n          component={Link}\n          to=\".\"\n          label=\"Charts\"\n          icon={<ShowChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"assets-and-reports\"\n          label=\"Data\"\n          icon={<TableChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"import-export\"\n          label=\"Export/import\"\n          icon={<SettingsIcon />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n","import React, { useContext } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport { Sort } from '@material-ui/icons';\n\nimport * as styles from './Insitutions.treat';\nimport { StoreContext } from './App';\nimport { getAssetAccounts, getInstitutions } from './Home';\n\nexport const Insitutions: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  return (\n    <div className={styles.root}>\n      <Button\n        startIcon={<Sort />}\n        to=\"sort\"\n        component={Link}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"small\"\n      >\n        sort\n      </Button>\n\n      <Button\n        to=\"create\"\n        component={Link}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"small\"\n      >\n        add\n      </Button>\n\n      <Table stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell>type</TableCell>\n            <TableCell>name</TableCell>\n            <TableCell>used in</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {getInstitutions(store)?.map((inst) => {\n            const assetAccountsWithCurrentInstitution = getAssetAccounts(\n              store\n            )!.filter((aa) => aa.institutionId === inst.id);\n            return (\n              <TableRow hover key={inst.id} component={Link} to={inst.id}>\n                <TableCell>{inst.type}</TableCell>\n                <TableCell>{inst.name}</TableCell>\n                {/* <TableCell>{inst.sortIndex}</TableCell> */}\n                <TableCell>\n                  {assetAccountsWithCurrentInstitution.length}\n                </TableCell>\n                {/* <TableCell>\n                    {assetAccountsWithCurrentInstitution.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteInstitution(inst.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </TableCell> */}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n","export var root = '_2kclh';","import { Machine, assign, send } from 'xstate';\nimport { FormContextValues } from 'react-hook-form';\n\ninterface FormSchema {\n  states: {\n    idle: {};\n    validating: {};\n    submitting: {};\n    submitted: {};\n  };\n}\n\ntype FormEvent =\n  | {\n      type: 'SUBMIT';\n    }\n  | {\n      type: 'REINIT';\n    };\n\ninterface FormContext<T> {\n  form: FormContextValues<T>;\n}\n\nexport const formMachine = Machine<FormContext<any>, FormSchema, FormEvent>({\n  id: 'form',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        SUBMIT: 'submitting',\n      },\n    },\n    validating: {},\n    submitting: {\n      entry: assign((context, e) => {\n        console.log(\n          'e',\n          e,\n          '---context.form.getValues();',\n          context.form.getValues(),\n        );\n        // send('SAVE', {\n        //   to: 'store',\n        // });\n        console.log('======');\n        return {};\n      }),\n      on: {\n        '': 'submitted',\n      },\n      // onDone: {\n      //   target: 'submitted'\n      // }\n      // entry: send('SAVE', {\n      //   to: 'store',\n      // })\n    },\n    submitted: {\n      on: {\n        'REINIT': 'idle',\n      },\n    },\n  },\n});\n","\nimport React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { getAssetAccounts } from './Home';\nimport { TopAppBar } from './components/TopAppBar';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, any, any>;\n};\n\nconst fieldInstitutionId = 'institutionId';\nconst fieldAssetId = 'assetId';\nconst fieldName = 'name';\n\ntype FormValues = {\n  [fieldInstitutionId]: string;\n  [fieldAssetId]: string;\n  [fieldName]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const AssetAccounts: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assetAccounts',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAssetAccount = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assetAccounts',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Asset accounts {getAssetAccounts(store)?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={4}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>id</Th>\n              <Th>asset</Th>\n              <Th>institution</Th>\n              <Th>name</Th>\n              <Th>reports</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldAssetId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.assets.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.class} {v.subclass} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <select\n                  name={fieldInstitutionId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.institutions.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.type} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {getAssetAccounts(store)?.map((assetAccount) => {\n              // actually store is definitely not undefined here\n              // as `getAssetAccounts` has returned data\n              if (store === undefined) {\n                return null;\n              }\n              const assetAccountStatesWithThisAssetAccount = store?.data.assetAccountStates.filter(\n                (aas) => aas.assetAccountId === assetAccount.id\n              );\n              return (\n                <Tr key={assetAccount.id}>\n                  <Td>{assetAccount.id}</Td>\n                  <Td>\n                    {\n                      store.data.assets.find(\n                        (a) => a.id === assetAccount.assetId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>\n                    {\n                      store.data.institutions.find(\n                        (a) => a.id === assetAccount.institutionId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>{assetAccountStatesWithThisAssetAccount.length}</Td>\n                  <Td>\n                    {assetAccountStatesWithThisAssetAccount.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAssetAccount(assetAccount.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { ALL_ASSET_TYPES } from './constants';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreEvent } from './machines/store';\nimport { getAssetAccounts } from './Home';\nimport { TopAppBar } from './components/TopAppBar';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldClass = 'class';\nconst fieldSubclass = 'subclass';\nconst fieldName = 'name';\nconst fieldCurrency = 'currency';\n\ntype FormValues = {\n  [fieldClass]: string;\n  [fieldSubclass]: string;\n  [fieldName]: string;\n  [fieldCurrency]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const Assets: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assets',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAsset = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assets',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Assets {store?.data.assets?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={5}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>class</Th>\n              <Th>subclass</Th>\n              <Th>name</Th>\n              <Th>currency</Th>\n              <Th>asset accounts</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldClass}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_ASSET_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldSubclass}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.subclass?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldCurrency}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.currency?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store?.data.assets?.map((asset) => {\n              const assetAccountsWithCurrentAsset = getAssetAccounts(\n                store\n              )?.filter((aa) => aa.assetId === asset.id)!;\n              return (\n                <Tr key={asset.id}>\n                  <Td>{asset.id}</Td>\n                  <Td>{asset.class}</Td>\n                  <Td>{asset.subclass}</Td>\n                  <Td>{asset.name}</Td>\n                  <Td>{asset.currency}</Td>\n                  <Td>{assetAccountsWithCurrentAsset.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentAsset.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAsset(asset.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\n// function a11yProps(index: any) {\n//   return {\n//     id: `simple-tab-${index}`,\n//     'aria-controls': `simple-tabpanel-${index}`,\n//   };\n// }\n\nexport const TopAppBar: React.FC = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          variant=\"scrollable\"\n          scrollButtons=\"desktop\"\n        >\n          <Tab label=\"Reports\" component={Link} to=\".\" />\n          <Tab label=\"Assets\" component={Link} to=\"assets\" />\n          <Tab label=\"Institutions\" component={Link} to=\"institutions\" />\n          <Tab label=\"Asset accounts\" component={Link} to=\"asset-accounts\" />\n        </Tabs>\n      </AppBar>\n      {/* <TabPanel value={value} index={0}>\n        Item One\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        Item Two\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        Item Three\n      </TabPanel> */}\n    </>\n  );\n};\n","import _ from 'lodash';\nimport React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport {\n  useForm,\n  Controller,\n  // ValidationResolver,\n  // SchemaValidationResult,\n} from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport { IconButton, Button } from '@material-ui/core';\nimport {Restore as RestoreIcon, Save as SaveIcon} from '@material-ui/icons';\n\n// import { superstruct, Struct } from 'superstruct';\nimport * as yup from 'yup';\n\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { useNavigate } from 'react-router';\nimport { StoreEvent } from './machines/store';\nimport { Table, Tr, Td } from './components/Table';\nimport { getAssetAccounts, getInstitutions } from './Home';\nimport {formatMoney} from './utils'\n// import { superstructResolver } from './react-hook-form-resolvers/superstruct';\n// import { yupResolver } from './react-hook-form-resolvers/yup';\n\n// const struct = superstruct({\n//   types: {\n//     nonEmpty: (value) => value !== '',\n//   },\n// });\n\n// const struct = superstruct({\n//   types: {\n//     assetAccountState: value => value\n//   }\n//   // id: 'number',\n//   // title: 'string',\n//   // is_published: 'boolean?',\n//   // tags: ['string'],\n//   // author: {\n//   //   id: 'number',\n//   // },\n// })\n\n// const StructAssectAccountState = struct({\n//   assetAccountStates: [\n//     {\n//       balance: 'string & nonEmpty',\n//       // institutionId: 'string',\n//       // assetId: 'string',\n//       // balance: 'string',\n//       // comment: 'string?'\n//     },\n//   ],\n// });\n\nconst yupAssectAccountState = yup.object({\n  date: yup.date().required('дата!'),\n  assetAccountStates: yup.array().of(\n    yup.object({\n      balance: yup.string().required('заполняй, сука'),\n      assetAccountId: yup.string().required('заполняй, сука'),\n      // pricePerUnit: yup.string().required('заполняй, сука'),\n    })\n  ),\n});\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\ntype FormValues = {\n  date: string;\n  assetAccountStates: fintrack.AssetAccountState[];\n  // abc: string;\n};\n\n\nexport const AddEditReport: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const params = useParams();\n\n  const assetAccounts = getAssetAccounts(store);\n\n  let report: fintrack.Report | undefined;\n  let assetAccountStates: fintrack.AssetAccountState[] | undefined;\n  if (params.reportId !== undefined) {\n    report = store?.data.reports.find((r) => r.id === params.reportId);\n    const nonSortedAssetAccountStates = store?.data.assetAccountStates.filter(\n      (r) => r.reportId === report?.id\n    );\n    assetAccountStates = assetAccounts?.map((aa) => {\n      const foundAas = nonSortedAssetAccountStates?.find(\n        (aas) => aas.assetAccountId === aa.id\n      );\n      if (foundAas !== undefined) {\n        return foundAas;\n      }\n      return {\n        assetAccountId: aa.id,\n        reportId: report?.id!,\n        balance: '0',\n        comment: '',\n      };\n    });\n  }\n\n  const form = useForm<FormValues>({\n    // validationResolver: superstructResolver(StructAssectAccountState),\n    // validationResolver: yupResolver(yupAssectAccountState),\n    validationSchema: yupAssectAccountState,\n    defaultValues: {\n      date: report?.datetime\n        ? new Date(report.datetime).toISOString().substr(0, 10)\n        : new Date().toISOString().substr(0, 10),\n      assetAccountStates,\n    },\n    // validationContext: {\n    //   'x': 'asd'\n    // }\n  });\n\n  const navigate = useNavigate();\n\n  const nowTimestmap = new Date().getTime();\n  const prevReport = _.maxBy(\n    _.filter(\n      store?.data.reports,\n      (r) => r.datetime < (report ? report.datetime : nowTimestmap)\n    ),\n    (r) => r.datetime\n  );\n  const prevAssetAccountStates = store?.data.assetAccountStates.filter(\n    (aas) => aas.reportId === prevReport?.id\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('=====values', values.date, values);\n    if (report === undefined) {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'create',\n        entity: 'assetAccountStates',\n        data: values,\n      });\n    } else {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'update',\n        entity: 'assetAccountStates',\n        data: {\n          reportId: report.id,\n          ...values,\n        },\n      });\n    }\n    navigate('/assets-and-reports');\n  };\n\n  // const { fields, append, prepend, remove } = useFieldArray({\n  //   control: form.control,\n  //   name: 'items',\n  // });\n\n  // useEffect(() => {\n  //   append({ })\n  // }, [store?.assetAccounts])\n\n  // console.log('====form.errors', form.errors.assetAccountStates?.[0].balance);\n  // console.log('====', yupAssectAccountState.fields);\n  // console.log('==== err', form.getValues(), form.errors);\n\n  return (\n    <div>\n      <h1>Add report</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <input type=\"date\" name=\"date\" ref={form.register} />\n        {form.errors.date?.message}\n        <br />\n        <br />\n\n        <Table>\n          <tbody>\n            {assetAccounts?.map((assetAccount, index) => {\n              const renderInstitutionHeader =\n                index === 0 ||\n                assetAccounts[index].institutionId !==\n                  assetAccounts[index - 1].institutionId;\n              const rowWithHeader = !renderInstitutionHeader ? null : (\n                <Tr key={`header${assetAccount.id}`}>\n                  <Td colspan={2}>\n                    <h3>\n                      {\n                        getInstitutions(store)?.find(\n                          (i) => i.id === assetAccount.institutionId\n                        )?.name\n                      }\n                    </h3>\n                  </Td>\n                </Tr>\n              );\n\n              const prevAssetAccountBalance = prevAssetAccountStates?.find(\n                (laas) => laas.assetAccountId === assetAccount.id\n              )?.balance || 0\n              const rowWithData = (\n                <Tr key={`data${assetAccount.id}`}>\n                  <Td>\n                    <Controller\n                      as={TextField}\n                      label={assetAccount.name}\n                      InputLabelProps={{\n                        shrink: true,\n                        disableAnimation: true,\n                      }}\n                      name={`assetAccountStates[${index}].balance`}\n                      control={form.control}\n                      variant=\"outlined\"\n                      helperText={\n                        form.errors.assetAccountStates?.[index]?.balance\n                          ? (form.errors.assetAccountStates?.[index]\n                              ?.balance as any).message\n                          : `last balance: ${formatMoney(prevAssetAccountBalance)}`\n                      }\n                      error={Boolean(\n                        form.errors.assetAccountStates?.[index]?.balance\n                      )}\n                    />\n                    <input\n                      type=\"hidden\"\n                      name={`assetAccountStates[${index}].assetAccountId`}\n                      ref={form.register}\n                      value={assetAccount.id}\n                    />\n                  </Td>\n                  <Td>\n                    <IconButton\n                      aria-label=\"use last balance\"\n                      color=\"secondary\"\n                      size=\"small\"\n                      onClick={\n                        () => form.setValue(\n                          `assetAccountStates[${index}].balance`,\n                          prevAssetAccountBalance\n                        )\n                      }\n                    >\n                      <RestoreIcon />\n                    </IconButton>\n                  </Td>\n                </Tr>\n              );\n              return (\n                <React.Fragment key={assetAccount.id}>\n                  {rowWithHeader}\n                  {rowWithData}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </Table>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          startIcon={<SaveIcon />}\n          type=\"submit\"\n        >\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n};\n","import React, { useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { Interpreter } from 'xstate';\n\nimport { StoreEvent } from './machines/store';\nimport { FormContextValues, useForm } from 'react-hook-form';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { ALL_INSTITUTION_TYPES } from './constants';\nimport { getAssetAccounts } from './Home';\nimport { useMachine } from '@xstate/react';\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { fintrack } from '../typings/fintrack';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldType = 'type';\nconst fieldName = 'name';\nconst fieldSortIndex = 'sortIndex';\n\ntype FormValues = {\n  [fieldType]: string;\n  [fieldName]: string;\n  [fieldSortIndex]: number;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nconst yupInstitution = yup.object({\n  [fieldType]: yup.string().required('required'),\n  [fieldName]: yup.string().required('required'),\n  [fieldSortIndex]: yup\n    .number()\n    .integer()\n    .moreThan(-1, 'required posititve number')\n    .required('required'),\n});\n\nexport const AddEditInstitution: React.FC<OwnProps> = ({ storeService }) => {\n  const params = useParams();\n  const store = useContext(StoreContext);\n\n  let inst: fintrack.Institution | undefined;\n  if (params.institutionId !== undefined) {\n    inst = store?.data.institutions.find((i) => i.id === params.institutionId);\n  }\n\n  const form = useForm<FormValues>({\n    validationSchema: yupInstitution,\n    defaultValues: {\n      type: inst?.type,\n      name: inst?.name,\n      sortIndex: inst?.sortIndex,\n    },\n  });\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('________', values);\n    formMachineSend('SUBMIT');\n  };\n\n  const deleteInstitution = () => {\n    console.log('----delete', inst?.id)\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'institutions',\n      data: {\n        id: inst?.id,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      if (inst === undefined) {\n        storeService.send('UPDATE_DATA', {\n          actionType: 'create',\n          entity: 'institutions',\n          data: yupInstitution.validateSync(\n            formMachineState.context.form.getValues()\n          ),\n        });\n      } else {\n        storeService.send('UPDATE_DATA', {\n          actionType: 'update',\n          entity: 'institutions',\n          data: {\n            id: inst.id,\n            ...yupInstitution.validateSync(\n              formMachineState.context.form.getValues()\n            ),\n          },\n        });\n      }\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService, inst]);\n\n  const assetAccountsWithCurrentInstitution = getAssetAccounts(store)!.filter(\n    (aa) => aa.institutionId === inst?.id\n  );\n\n  return (\n    <div>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        Insitution {inst?.id}\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={3}></Th>\n              <Th>Used in # of</Th>\n              <Th></Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>type</Th>\n              <Th>name</Th>\n              <Th>sort index</Th>\n              <Th>asset accounts</Th>\n              <Th>action</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldType}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_INSTITUTION_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldSortIndex}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.sortIndex?.message}\n              </Td>\n              <Td>\n                used in # of asset accounts{' '}\n                {assetAccountsWithCurrentInstitution.length}\n                {assetAccountsWithCurrentInstitution.length === 0 && (\n                  <button type=\"button\" onClick={deleteInstitution}>Delete</button>\n                )}\n              </Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { Interpreter } from 'xstate';\nimport {\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n  SortEnd,\n} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\n\nimport { getInstitutions } from './Home';\nimport { StoreContext } from './App';\nimport { StoreEvent } from './machines/store';\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst SortableItem = SortableElement(({ value }: { value: any }) => (\n  <ListItem ContainerComponent=\"div\">\n    <ListItemText primary={value} />\n    <ListItemSecondaryAction>\n      <DragHandleIcon />\n    </ListItemSecondaryAction>\n  </ListItem>\n));\n\nconst SortableContainer1 = SortableContainer(\n  ({ children }: { children: any }) => {\n    return <List component=\"div\">{children}</List>;\n  }\n);\n\nexport const InstitutionsSort: React.FC<OwnProps> = (props) => {\n  const store = useContext(StoreContext);\n  const institutions = getInstitutions(store)!;\n\n  const [items, setItems] = useState(institutions);\n\n  const onSortEnd: SortEndHandler = (sort: SortEnd) => {\n    const newArr = arrayMove(items, sort.oldIndex, sort.newIndex);\n    setItems(newArr);\n    newArr.forEach((inst, idx) => {\n      props.storeService.send('UPDATE_DATA', {\n        actionType: 'update',\n        entity: 'institutions',\n        data: {\n          ...inst,\n          sortIndex: idx,\n        },\n      });\n    });\n  };\n\n  return (\n    <SortableContainer1 onSortEnd={onSortEnd}>\n      {items.map((value, index) => (\n        <SortableItem\n          key={`item-${value.id}`}\n          index={index}\n          value={value.name}\n        />\n      ))}\n    </SortableContainer1>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router';\nimport { Interpreter } from 'xstate';\n\nimport { Insitutions } from './Insitutions';\nimport { AssetAccounts } from './AssetAccounts';\nimport { Assets } from './Assets';\nimport { StoreEvent } from './machines/store';\nimport { TopAppBar } from './components/TopAppBar';\nimport { Home } from './Home';\nimport { AddEditReport } from './AddReport';\nimport { AddEditInstitution } from './AddEditInstitution';\nimport { InstitutionsSort } from './InstitutionsSort';\n\ntype Props = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nexport const AssetsAndReports: React.FC<Props> = ({ storeService }) => {\n  return (\n    <>\n      <TopAppBar />\n      <Routes>\n        <Route path=\"institutions\" element={<Insitutions />} />\n        <Route\n          path=\"institutions/:institutionId\"\n          element={<AddEditInstitution storeService={storeService} />}\n        />\n        <Route\n          path=\"institutions/sort\"\n          element={<InstitutionsSort storeService={storeService} />}\n        />\n        <Route path=\"assets\" element={<Assets storeService={storeService} />} />\n        <Route\n          path=\"asset-accounts\"\n          element={<AssetAccounts storeService={storeService} />}\n        />\n        <Route element={<Home storeService={storeService} />} />\n        <Route\n          path=\"add-edit-report/:reportId\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n        <Route\n          path=\"add-edit-report\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n      </Routes>\n    </>\n  );\n};\n","import React from 'react';\nimport { Interpreter } from 'xstate';\nimport { useNavigate } from 'react-router';\nimport Button from '@material-ui/core/Button';\n\nimport { StoreEvent, StoreContext } from './machines/store';\n\ntype Props = {\n  state: any;\n  send: any;\n  storeService: Interpreter<StoreContext, any, StoreEvent, any>;\n};\n\nexport const ImportExport: React.FC<Props> = ({\n  state: state1,\n  send,\n  storeService,\n}) => {\n  const navigate = useNavigate();\n\n  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    var reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files![0]);\n\n    function onReaderLoad(event: ProgressEvent<FileReader>) {\n      console.log(event.target!.result);\n      var obj = JSON.parse(event.target!.result as string);\n      // alert_data(obj.name, obj.family);\n      send('LOAD_FROM_INPUT', {\n        data: obj,\n      });\n\n      navigate('/');\n    }\n  };\n\n  return (\n    <div>\n      {/* <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          send('SAVE');\n        }}\n        disabled={state1.matches('saving')}\n      >\n        prepare data for export\n      </Button> */}\n\n      <br />\n      <br />\n      {/* {state1.matches('saving') && (\n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          color=\"secondary\"\n          size=\"large\"\n          onClick={() => {\n            send('SAVE');\n          }}\n        >\n          <a\n            href={state1.context.urlDataToSave}\n            download=\"fintrack.json\"\n            onClick={() => {\n              setTimeout(() => {\n                send('SAVED');\n              }, 500);\n            }}\n          >\n            download\n          </a>\n        </Button>\n      )} */}\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          function download(content: any) {\n            var file = new Blob([content], {\n              type: 'text/json;charset=UTF-8',\n            });\n            var reader = new FileReader();\n            reader.onload = function () {\n              // var popup = window.open();\n              var link = document.createElement('a');\n              link.setAttribute('href', reader.result as string);\n              link.setAttribute('download', 'fintrack.json');\n              // popup!.\n              document.body.appendChild(link);\n              link.click();\n            };\n            reader.readAsDataURL(file);\n          }\n\n          download(JSON.stringify(state1.context.db, null, 2));\n\n          // setTimeout(() => {\n          //   send('SAVED');\n          // }, 500);\n        }}\n      >\n        export\n      </Button>\n\n      <br />\n      <br />\n\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        import\n        <div style={{ display: 'none ' }}>\n          <input type=\"file\" onChange={handleFile} />\n        </div>\n      </Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { useMachine } from '@xstate/react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport * as styles from './App.treat';\n// import { fetchMachine } from './machines/fetch';\nimport { storeMachine } from './machines/store';\nimport { fintrack } from '../typings/fintrack';\nimport { Charts } from './Charts';\nimport { BottomAppBar } from './components/BottomAppBar';\nimport { AssetsAndReports } from './AssetsAndReports';\nimport { ImportExport } from './ImportExport';\n\nexport const StoreContext = React.createContext<fintrack.JSONShape | undefined>(\n  undefined\n);\n\nconst App: React.FC = () => {\n  const [state1, send, storeService] = useMachine(storeMachine, {\n    devTools: true,\n  });\n\n  return (\n    <StoreContext.Provider value={state1.context.db?.getState()}>\n      <BrowserRouter>\n        <React.Fragment>\n          <CssBaseline />\n          <div className={styles.root}>\n            <div className={styles.content}>\n              <Routes>\n                <Route element={<Charts />} />\n                <Route\n                  path=\"assets-and-reports/*\"\n                  element={<AssetsAndReports storeService={storeService} />}\n                />\n                <Route\n                  path=\"import-export\"\n                  element={\n                    <ImportExport\n                      state={state1}\n                      send={send}\n                      storeService={storeService}\n                    />\n                  }\n                />\n              </Routes>\n            </div>\n            <BottomAppBar />\n          </div>\n        </React.Fragment>\n      </BrowserRouter>\n    </StoreContext.Provider>\n  );\n};\n\nexport default App;\n","import \"!../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./App.treat.3I0oFzE.css\";\nexport var root = '_3QqL3';\nexport var nav = '_3m8Iv';\nexport var content = '_2KOUX';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}