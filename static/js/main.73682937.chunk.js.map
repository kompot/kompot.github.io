{"version":3,"sources":["machines/form.ts","constants.ts","components/Table.tsx","components/Table.treat.ts","Home.tsx","Insitutions.tsx","Insitutions.treat.ts","machines/fetch.ts","machines/store.ts","Assets.tsx","AssetAccounts.tsx","AddReport.tsx","Charts.tsx","BottomAppBar.tsx","App.tsx","App.treat.ts","serviceWorker.ts","index.tsx"],"names":["formMachine","Machine","id","initial","states","idle","on","SUBMIT","validating","submitting","entry","assign","context","e","console","log","form","getValues","submitted","ALL_ASSET_TYPES","ALL_INSTITUTION_TYPES","Table","children","className","Tr","Td","colspan","colSpan","Th","getTotalForReport","store","report","targetCurrency","assetFilterFunction","data","assetAccountStates","filter","aas","reportId","reduce","acc","currVal","assetAccount","assetAccounts","find","aa","assetAccountId","asset","assets","a","assetId","undefined","Math","round","erData","exchangeRates","er","assetPriceInBaseCurrency","isBaseAssetACurrency","class","currencyAsset","name","currency","erToBaseCurrency","currencyAssetToBase","parseFloat","getExchangeRate","balance","getInstitutions","_","sortBy","institutions","i","sortIndex","getAssetAccounts","flatMap","inst","institutionId","Home","props","useContext","StoreContext","sortedReports","reports","r","datetime","map","length","key","to","Date","toISOString","substr","onClick","storeService","send","actionType","entity","subclass","exchangeRate","rate","style","width","defaultValue","onChange","v","value","type","updateExchangeRate","target","yupInstitution","yup","required","integer","moreThan","Insitutions","useForm","validationSchema","useMachine","devTools","formMachineState","formMachineSend","useEffect","matches","validateSync","onSubmit","handleSubmit","values","ref","register","errors","message","assetAccountsWithCurrentInstitution","fetchMachine","url","error","retries","maxRetries","FETCH","loading","invoke","src","onDone","actions","sendParent","onError","success","REFETCH","failure","cond","RETRY","fatal","guards","canNotRetry","setData","event","notifyData","setError","notifyError","incrementRetries","services","fetch","then","response","json","nanoid","customAlphabet","localDateStringToUtcTimestamp","date","localDate","UTC","getFullYear","getMonth","getDate","storeMachine","db","urlDataToSave","fetchRef","spawn","withContext","LOAD","LOADED","LOAD_FROM_INPUT","loaded","ctx","window","URL","revokeObjectURL","low","Memory","setState","_state","SAVE","UPDATE_DATA","loaded_from_input","saving","getState","createObjectURL","Blob","JSON","stringify","SAVED","updating_data","get","push","write","forEach","allErs","ex","set","newEr","allReports","updatedAssetAccountStates","aasInner","includes","newAas","Error","remove","Assets","assetAccountsWithCurrentAsset","AssetAccounts","assetAccountStatesWithThisAssetAccount","yupAssectAccountState","of","AddEditReport","params","useParams","nonSortedAssetAccountStates","findIndex","defaultValues","navigate","useNavigate","latestReportId","maxBy","latestAssetAccountStates","index","rowWithHeader","rowWithData","laas","Fragment","Charts","useSearchParams","searchParams","currencies","fromSearchParam","pastYear","start","addMonths","addYears","parseInt","end","isWithinInterval","data1","allReportsInCurrency","compact","d","x","getUTCFullYear","padStart","String","getUTCMonth","getUTCDate","y","toFixed","data3","totalForCurrency","currencyIdx","animate","margin","top","right","bottom","left","xScale","format","xFormat","yScale","min","max","stacked","axisTop","axisRight","axisBottom","tickValues","legend","legendOffset","axisLeft","orient","tickSize","tickPadding","tickRotation","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","enableSlices","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","itemBackground","sliceTooltip","slice","background","padding","border","points","xFormatted","point","color","serieColor","serieId","yFormatted","height","display","legendPosition","useStyles","makeStyles","createStyles","text","spacing","paper","paddingBottom","list","marginBottom","subheader","backgroundColor","palette","appBar","grow","flexGrow","fabButton","position","zIndex","fullList","locs","0","1","2","3","BottomAppBar","classes","location","useLocation","React","useState","setValue","some","l","idx","pathname","startsWith","AppBar","BottomNavigation","newValue","showLabels","BottomNavigationAction","component","Link","label","icon","createContext","App","state1","Provider","CssBaseline","href","download","setTimeout","rel","reader","FileReader","onload","result","obj","parse","readAsText","files","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2XAwBaA,EAAcC,YAAiD,CAC1EC,GAAI,OACJC,QAAS,OACTC,OAAQ,CACNC,KAAM,CACJC,GAAI,CACFC,OAAQ,eAGZC,WAAY,GACZC,WAAY,CACVC,MAAOC,aAAO,SAACC,EAASC,GAWtB,OAVAC,QAAQC,IACN,IACAF,EACA,+BACAD,EAAQI,KAAKC,aAKfH,QAAQC,IAAI,UACL,MAETT,GAAI,CACF,GAAI,cASRY,UAAW,CACTZ,GAAI,CACF,OAAU,YC1DLa,EAAkB,CAC7B,WACA,kBACA,WACA,iBACA,kBAGWC,EAAwB,CACnC,OACA,SACA,SACA,oBACA,WACA,SCZWC,G,OAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChC,OACE,2BAAOC,UCLQ,UDMZD,MAKME,EAAe,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SAC7B,OACE,wBAAIC,UCZQ,UDaTD,KAKMG,EAAqC,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,SAAUI,EAAc,EAAdA,QAC7D,OACE,wBAAIH,UClBQ,QDkBcI,QAASD,GAChCJ,KAKMM,EAAqC,SAAC,GAA2B,IAAzBN,EAAwB,EAAxBA,SAAUI,EAAc,EAAdA,QAC7D,OACE,wBAAIH,UC3BQ,SD2BcI,QAASD,GAChCJ,K,iBE+BA,SAASO,EACdC,EACAC,EACAC,EACAC,GAEA,cAAOH,QAAP,IAAOA,OAAP,EAAOA,EAAOI,KAAKC,mBAChBC,QAAO,SAACC,GAAD,OAASA,EAAIC,WAAaP,EAAO7B,MACxCqC,QAAO,SAACC,EAAKC,GAAa,IAAD,EAClBC,EAAeZ,EAAMI,KAAKS,cAAcC,MAC5C,SAACC,GAAD,OAAQA,EAAG3C,KAAOuC,EAAQK,kBAEtBC,EAAQjB,EAAMI,KAAKc,OAAOJ,MAC9B,SAACK,GAAD,OAAOA,EAAE/C,KAAOwC,EAAaQ,WAE/B,QAA4BC,IAAxBlB,IAAsCA,EAAoBc,GAC5D,OAAOK,KAAKC,MAAMb,GAGpB,IAAMc,EAAM,UAAGxB,EAAMI,KAAKqB,cAAcX,MACtC,SAACY,GAAD,OAAQA,EAAGlB,WAAaP,EAAO7B,aADrB,aAAG,EAEZgC,KAQGuB,EA7EZ,SACE3B,EACAwB,EAEAP,EACAf,GAEA,QAAemB,IAAXG,EACF,OAAO,EAET,IAAMI,EAAuC,aAAhBX,EAAMY,MAO7BC,EAAgBF,EAClBX,EADsC,OAEtCjB,QAFsC,IAEtCA,OAFsC,EAEtCA,EAAOI,KAAKc,OAAOJ,MACjB,SAACK,GAAD,MAAmB,aAAZA,EAAEU,OAAwBV,EAAEY,OAASd,EAAMe,YAEpDC,EAAmB,EAEvB,GAAIH,EAAcE,WAAa9B,EAAgB,CAC7C,IAAMgC,EAAmB,OAAGlC,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKc,OAAOJ,MAC7C,SAACK,GAAD,MAAmB,aAAZA,EAAEU,OAAwBV,EAAEY,OAAS7B,KAE9C,QAA4BmB,IAAxBa,EAAmC,CACrC,IAAMR,EAAKF,EAAOU,EAAoB9D,IAGpC6D,EAFS,OAAPP,EAEiBS,WAAWT,GAEX,GAIzB,OAAyB,IAArBO,EACK,EAINE,WAAWX,EAAOM,EAAc1D,KAAO,KAAO6D,GAC9CL,EAAuB,EAAIO,WAAWX,EAAOP,EAAM7C,KAAO,MA2B/BgE,CACxBpC,EACAwB,EACAP,EACAf,GAIsBiC,WAAWxB,EAAQ0B,SAe3C,OAAOf,KAAKC,MAAMI,EAA2BjB,KAC5C,GAGA,SAAS4B,EACdtC,GAEA,OAAOuC,IAAEC,OAAF,OAASxC,QAAT,IAASA,OAAT,EAASA,EAAOI,KAAKqC,cAAc,SAACC,GAAD,OAAOA,EAAEC,WAAaD,EAAEX,QAG7D,SAASa,EACd5C,GACsC,IAAD,EACrC,iBAAOsC,EAAgBtC,UAAvB,aAAO,EAAwB6C,SAAQ,SAACC,GACtC,OAAOP,IAAEC,OAAF,OACLxC,QADK,IACLA,OADK,EACLA,EAAOI,KAAKS,cAAcP,QAAO,SAACS,GAAD,OAAQA,EAAGgC,gBAAkBD,EAAK1E,OAEnE,SAAC2C,GAAD,OAAQA,EAAGgB,WAKV,I,EAAMiB,EAA2B,SAACC,GAAW,IAAD,EAC3CjD,EAAQkD,qBAAWC,IAEnBtC,EAAgB+B,EAAiB5C,GACvC,QAAsBqB,IAAlBR,EACF,OAAO,KAET,IAAMuC,EAAgBb,IAAEC,OAAF,OAASxC,QAAT,IAASA,OAAT,EAASA,EAAOI,KAAKiD,SAAS,SAACC,GAAD,OAAQ,EAAIA,EAAEC,YAC5DrC,EAAM,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKc,OACRkC,EAAc,GA+BjC,OACE,6BACE,oDACA,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MADF,UAEGd,EAAgBtC,UAFnB,aAEG,EAAwBwD,KAAI,SAACV,GAC5B,OACE,kBAAC,EAAD,CACElD,QACEiB,EAAcP,QAAO,SAACS,GAAD,OAAQA,EAAGgC,gBAAkBD,EAAK1E,MACpDqF,QAGJX,EAAKf,UAKd,kBAAC,EAAD,KACE,kBAAC,EAAD,aACClB,EAAc2C,KAAI,SAACzC,GAAD,OACjB,kBAAC,EAAD,KAAKA,EAAGgB,SAEV,kBAAC,EAAD,qBACA,kBAAC,EAAD,qBACA,kBAAC,EAAD,uBAGJ,sCACGqB,QADH,IACGA,OADH,EACGA,EAAeI,KAAI,SAACvD,GACnB,IAAMI,EAAkB,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKC,mBAAmBC,QACxD,SAACC,GAAD,OAASA,EAAIC,WAAaP,EAAO7B,MAEnC,OACE,kBAAC,EAAD,CAAIsF,IAAKzD,EAAO7B,IACd,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMuF,GAAE,2BAAsB1D,EAAO7B,KAClC,IAAIwF,KAAK3D,EAAOsD,UAAUM,cAAcC,OAAO,EAAG,MAGtDjD,EAAc2C,KAAI,SAACzC,GAClB,IAAMR,EAAG,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAoBS,MAC9B,SAACP,GAAD,OAASA,EAAIS,iBAAmBD,EAAG3C,MAErC,OAAO,kBAAC,EAAD,YAAKmC,QAAL,IAAKA,OAAL,EAAKA,EAAK8B,aAEnB,kBAAC,EAAD,KAAKtC,EAAkBC,EAAOC,EAAQ,QACtC,kBAAC,EAAD,KAAKF,EAAkBC,EAAOC,EAAQ,QACtC,kBAAC,EAAD,KAAKF,EAAkBC,EAAOC,EAAQ,QACtC,kBAAC,EAAD,KACE,4BACE8D,QAAS,WAlFN,IAACvD,IAmFWP,EAAO7B,GAlFtC6E,EAAMe,aAAaC,KAAK,cAAe,CACrCC,WAAY,SACZC,OAAQ,UACR/D,KAAM,CACJhC,GAAIoC,OA4EM,kBAaZ,8CACA,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,aADF,OAEGU,QAFH,IAEGA,OAFH,EAEGA,EAAQsC,KAAI,SAACrC,GAAD,OACX,kBAAC,EAAD,KACGA,EAAEU,MADL,IACaV,EAAEiD,SADf,IAC0BjD,EAAEY,KAD5B,OACsCZ,EAAEa,eAK9C,sCACGoB,QADH,IACGA,OADH,EACGA,EAAeI,KAAI,SAACvD,GACnB,IAAMoE,EAAY,OAAGrE,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKqB,cAAcX,MAC7C,SAACY,GAAD,OAAQA,EAAGlB,WAAaP,EAAO7B,MAEjC,OACE,kBAAC,EAAD,CAAIsF,IAAKzD,EAAO7B,IACd,kBAAC,EAAD,KAAK,IAAIwF,KAAK3D,EAAOsD,UAAUM,cAAcC,OAAO,EAAG,KADzD,OAEG5C,QAFH,IAEGA,OAFH,EAEGA,EAAQsC,KAAI,SAACrC,GAAO,IAAD,EACZmD,EAAI,OAAGD,QAAH,IAAGA,OAAH,YAAGA,EAAcjE,YAAjB,aAAG,EAAqBe,EAAE/C,IAIpC,OACE,kBAAC,EAAD,KACE,2BACEmG,MAAO,CAAEC,MAAO,IAChBC,aAAcH,EACdI,SAAU,SAACC,GAAD,OAlHL,SACzBC,EACA3D,EACAhB,GAEAjB,QAAQC,IAAI,iBAAkB2F,EAAO3D,EAAOhB,GAE5CgD,EAAMe,aAAaC,KAAK,CACtBY,KAAM,cACNX,WAAY,SACZC,OAAQ,gBACR/D,KAAM,CACJwE,QACA3D,QACAhB,YAqGkB6E,CAAmBH,EAAEI,OAAOH,MAAOzD,EAAGlB,mBC1O1D+E,EAAiBC,KAAA,mBAdL,OAeHA,MAAaC,SAAS,aADd,cAbL,OAeHD,MAAaC,SAAS,aAFd,cAZA,YAeHD,MAEfE,UACAC,UAAU,EAAG,6BACbF,SAAS,aAPS,IAUVG,EAAkC,SAAC,GAAsB,IAAD,QAAnBrB,EAAmB,EAAnBA,aAC1ChE,EAAQkD,qBAAWC,IACnBjE,EAAOoG,YAAoB,CAC/BC,iBAAkBP,IAH+C,EAKvBQ,qBAC1CtH,EACA,CACEuH,UAAU,EACV3G,QAAS,CACPI,UAV6D,mBAK5DwG,EAL4D,KAK1CC,EAL0C,KA4CnE,OAbAC,qBAAU,WACJF,EAAiBG,QAAQ,eAC3B7B,EAAaC,KAAK,cAAe,CAC/BC,WAAY,SACZC,OAAQ,eACR/D,KAAM4E,EAAec,aACnBJ,EAAiB5G,QAAQI,KAAKC,eAGlCwG,EAAgB,aAEjB,CAACD,EAAkBC,EAAiB3B,IAGrC,yBAAKvE,UCvFS,UDwFZ,mDAAkBO,QAAlB,IAAkBA,OAAlB,YAAkBA,EAAOI,KAAKqC,oBAA9B,aAAkB,EAA0BgB,QAC5C,0BAAMsC,SAAU7G,EAAK8G,cAhCR,SAACC,GAChBjH,QAAQC,IAAI,WAAYgH,GACxBN,EAAgB,cA+BZ,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAI/F,QAAS,IACb,kBAAC,EAAD,qBACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,WACA,kBAAC,EAAD,aACA,kBAAC,EAAD,aACA,kBAAC,EAAD,mBACA,kBAAC,EAAD,uBACA,kBAAC,EAAD,iBAGJ,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BACEmC,KA7FA,OA8FAmE,IAAKhH,EAAKiH,SAAS,CACjBjB,SAAU,cAOX5F,EAAsBkE,KAAI,SAACmB,GAAD,OACzB,4BAAQC,MAAOD,GAAIA,QAIzB,kBAAC,EAAD,KACE,2BACE5C,KA5GA,OA6GAmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAHnC,UAKGhG,EAAKkH,OAAOrE,YALf,aAKG,EAAkBsE,SAErB,kBAAC,EAAD,KACE,2BACEtE,KAlHK,YAmHLmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAHnC,UAKGhG,EAAKkH,OAAOzD,iBALf,aAKG,EAAuB0D,SAE1B,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BAAQxB,KAAK,UAAb,UAnCN,OAsCG7E,QAtCH,IAsCGA,OAtCH,YAsCGA,EAAOI,KAAKqC,oBAtCf,aAsCG,EAA0Be,KAAI,SAACV,GAC9B,IAAMwD,EAAsC1D,EAC1C5C,GACCM,QAAO,SAACS,GAAD,OAAQA,EAAGgC,gBAAkBD,EAAK1E,MAC5C,OACE,kBAAC,EAAD,CAAIsF,IAAKZ,EAAK1E,IACZ,kBAAC,EAAD,KAAK0E,EAAK1E,IACV,kBAAC,EAAD,KAAK0E,EAAK+B,MACV,kBAAC,EAAD,KAAK/B,EAAKf,MACV,kBAAC,EAAD,KAAKe,EAAKH,WACV,kBAAC,EAAD,KAAK2D,EAAoC7C,QACzC,kBAAC,EAAD,KACkD,IAA/C6C,EAAoC7C,QACnC,4BACEoB,KAAK,SACLd,QAAS,kBAjGJ3F,EAiG4B0E,EAAK1E,QAhG1D4F,EAAaC,KAAK,CAChBY,KAAM,cACNX,WAAY,SACZC,OAAQ,eACR/D,KAAM,CACJhC,QANoB,IAACA,IA+FP,qB,8DEvITmI,EAAepI,YAC1B,CACEC,GAAI,QACJC,QAAS,OACTS,QAAS,CACP0H,IAAK,GACLpG,KAAM,KACNqG,MAAO,KACPC,QAAS,EACTC,WAAY,GAEdrI,OAAQ,CACNC,KAAM,CACJC,GAAI,CACFoI,MAAO,YAGXC,QAAS,CACPC,OAAQ,CACNC,IAAK,QACLC,OAAQ,CACNjC,OAAQ,UACRkC,QAAS,CAAC,UAAW,aAAcC,YAAW,YAEhDC,QAAS,CACPpC,OAAQ,UACRkC,QAAS,CAAC,WAAY,kBAI5BG,QAAS,CACP5I,GAAI,CACF6I,QAAS,CACPtC,OAAQ,UACRkC,QAAS,kBAIfK,QAAS,CACP9I,GAAI,CACF,GAAI,CACFuG,OAAQ,QACRwC,KAAM,eAERC,MAAO,CACLzC,OAAQ,UACRkC,QAAS,sBAIfQ,MAAO,CACL5C,KAAM,WAIZ,CACE6C,OAAQ,CACNC,YAAa,qBAAGjB,UAAH,EAAYC,aAE3BM,QAAS,CACPW,QAAS/I,YAAO,CAAEuB,KAAM,SAACmC,EAAGsF,GAAJ,OAAeA,EAAczH,QACrD0H,WAAY,WACV9I,QAAQC,IAAI,oBAGd8I,SAAUlJ,YAAO,CAAE4H,MAAO,SAAClE,EAAGsF,GAAJ,OAAeA,EAAczH,QACvD4H,YAAa,aAEbC,iBAAkBpJ,YAAO,CAAE6H,QAAS,SAAA5H,GAAO,OAAIA,EAAQ4H,QAAU,MAGnEwB,SAAU,CACRC,MAAM,SAAD,oGAAC,EAAC,SAAArJ,GAAO,OACZqJ,MAAMrJ,EAAQ0H,KACX4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,WCxFlBC,EAASC,YADW,oCACuB,GAE3CC,EAAgC,SAACC,GACrC,IAAMC,EAAY,IAAI/E,KAAK8E,GAM3B,OALqB9E,KAAKgF,IACxBD,EAAUE,cACVF,EAAUG,WACVH,EAAUI,YA6FDC,EAAe7K,YAA+C,CACzEuF,IAAK,QACLrF,QAAS,OACTS,QAAS,CACPmK,GAAI,KAEJC,mBAAe7H,EAEf8H,SAAU,MAEZvK,MAAOC,YAAO,CACZsK,SAAU,kBACRC,YACE7C,EAAa8C,YAAY,CACvB7C,IAAK,aACLG,WAAY,EACZvG,KAAM,KACNqG,MAAO,KACPC,QAAS,IAEX,CACE3E,KAAM,aAKdzD,OAAQ,CACNC,KAAM,CACJC,GAAI,CACF8K,KAAM,CACJrC,QAAShD,YAAK,QAAS,CACrBN,GAAI,WAGR4F,OAAQ,SACRC,gBAAiB,sBAGrBC,OAAQ,CACN7K,MAAOC,aAAO,SAAC6K,EAAK3K,QACQsC,IAAtBqI,EAAIR,eACNS,OAAOC,IAAIC,gBAAgBH,EAAIR,eAEjC,IAAMD,EAAKa,IAAI,IAAIC,IAA2B,KAO9C,OANAd,EAAGe,SAASN,EAAIP,SAASc,OAAOnL,QAAQsB,MAMjC,CACL6I,KAEAC,mBAAe7H,MAGnB7C,GAAI,CACF0L,KAAM,SACNC,YAAa,kBAGjBC,kBAAmB,CACjBxL,MAAOC,aAAO,SAAC6K,EAAK3K,GAClBC,QAAQC,IAAI,6BAA8BF,GAI1C,IAAMkK,EAAKa,IAAI,IAAIC,IAA2B,KAO9C,OANAd,EAAGe,SAASjL,EAAEqB,MAMP,CACL6I,KAEAC,mBAAe7H,MAGnB7C,GAAI,CACF0L,KAAM,SACNC,YAAa,gBACbX,gBAAiB,sBAGrBa,OAAQ,CACNzL,MAAOC,aAAO,SAAC6K,EAAK3K,GAAO,IAAD,IAExB,OADAC,QAAQC,IAAI,iBAAZ,UAA8ByK,EAAIT,UAAlC,aAA8B,EAAQqB,YAC/B,CACLpB,cAAeS,OAAOC,IAAIW,gBACxB,IAAIC,KAAK,CAACC,KAAKC,UAAL,UAAehB,EAAIT,UAAnB,aAAe,EAAQqB,WAAY,KAAM,IAAK,CACtDzF,KAAM,oBAKdrG,GAAI,CACFmM,MAAO,WAQXC,cAAe,CACbhM,MAAOC,aAAO,SAAC6K,EAAK3K,GAClB,GAAqB,WAAjBA,EAAEmF,WACJ,GAAiB,uBAAbnF,EAAEoF,OAAiC,CAAC,IAAD,EAC/B3D,EAAW+H,IACjB,UAAAmB,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,WACJC,KAAK,CACJ1M,GAAIoC,EACJ+C,SAAUkF,EAA8B1J,EAAEqB,KAAKsI,QAEhDqC,QACHhM,EAAEqB,KAAKC,mBAAmB2K,SAAQ,SAACzK,GAAS,IAAD,EACzC,UAAAmJ,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,sBACJC,KAHH,2BAIOvK,GAJP,IAKIC,cAEDuK,eAEA,CAAC,IAAD,IACL,UAAArB,EAAIT,UAAJ,mBACI4B,IAAI,eADR,SAEIA,IAAI9L,EAAEoF,QACP2G,KAHH,aAII1M,GAAImK,KACDxJ,EAAEqB,OAEN2K,aAEA,GAAqB,WAAjBhM,EAAEmF,WAAyB,CACpC,GAAiB,kBAAbnF,EAAEoF,OAA4B,CAAC,IAAD,EAC1B8G,EAAM,UAAGvB,EAAIT,UAAP,aAAG,EAAQ4B,IAAI,QAAQA,IAAI,iBACjCnJ,EAAE,OAAGuJ,QAAH,IAAGA,OAAH,EAAGA,EAAQnK,MAAK,SAACoK,GAAD,OAAQA,EAAG1K,WAAazB,EAAEqB,KAAKH,OAAO7B,MAC9D,QAAoBiD,KAAd,OAAFK,QAAE,IAAFA,OAAA,EAAAA,EAAIkD,SACNlD,EAAGmJ,IAAI,QAAQM,IAAIpM,EAAEqB,KAAKa,MAAM7C,GAAIW,EAAEqB,KAAKwE,OAAOmG,YAC7C,CACL,IAAMK,EAA+B,CACnChN,GAAImK,IACJ/H,SAAUzB,EAAEqB,KAAKH,OAAO7B,GACxBgC,KAAK,eACFrB,EAAEqB,KAAKa,MAAM7C,GAAKW,EAAEqB,KAAKwE,QAGxB,OAANqG,QAAM,IAANA,KAAQH,KAAKM,GAAOL,SAGxB,GAAiB,uBAAbhM,EAAEoF,OAAiC,CAAC,IAAD,IAC/BkH,EAAU,UAAG3B,EAAIT,UAAP,aAAG,EAAQ4B,IAAI,QAAQA,IAAI,WACrC5K,EAAM,OAAGoL,QAAH,IAAGA,OAAH,EAAGA,EAAYvK,MAAK,SAACwC,GAAD,OAAOA,EAAElF,KAAOW,EAAEqB,KAAKI,YACjD,OAANP,QAAM,IAANA,KACIkL,IAAI,WAAY1C,EAA8B1J,EAAEqB,KAAKsI,OACtDqC,QAEH,IAAIO,EAA2C,GAE/C,UAAA5B,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,sBACJG,SAAQ,SAACzK,GAC+B,IAAD,EAAlCA,EAAIC,WAAazB,EAAEqB,KAAKI,WAC1BD,EAAI8B,QAAJ,UAActD,EAAEqB,KAAKC,mBAAmBS,MACtC,SAACyK,GAAD,OAAcA,EAASvK,iBAAmBT,EAAIS,yBADhD,aAAc,EAEXqB,QACHiJ,EAA0BR,KAAKvK,EAAIS,oBAGtC+J,QAEHhM,EAAEqB,KAAKC,mBACJC,QACC,SAACC,GAAD,OAAU+K,EAA0BE,SAASjL,EAAIS,mBAElDgK,SAAQ,SAACS,GAAY,IAAD,EACnB,UAAA/B,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,sBACJC,KAHH,2BAIOW,GAJP,IAKIjL,SAAUzB,EAAEqB,KAAKI,YAElBuK,gBAGJ,IAAqB,WAAjBhM,EAAEmF,WAwCX,MAAM,IAAIwH,MAAM,4BAvCkB,IAAD,EAON,EAOO,EAON,MArBX,iBAAb3M,EAAEoF,SACJ,UAAAuF,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,gBACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAEtE,KAAOW,EAAEqB,KAAKhC,MAC9B2M,SAEY,WAAbhM,EAAEoF,SACJ,UAAAuF,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,UACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAEtE,KAAOW,EAAEqB,KAAKhC,MAC9B2M,SAEY,kBAAbhM,EAAEoF,SACJ,UAAAuF,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,iBACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAEtE,KAAOW,EAAEqB,KAAKhC,MAC9B2M,SAEY,YAAbhM,EAAEoF,SACJ,UAAAuF,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,WACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAEtE,KAAOW,EAAEqB,KAAKhC,MAC9B2M,QACH,UAAArB,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,sBACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAElC,WAAazB,EAAEqB,KAAKhC,MACpC2M,QACH,UAAArB,EAAIT,UAAJ,SACI4B,IAAI,QACLA,IAAI,iBACJc,QAAO,SAACjJ,GAAD,OAAOA,EAAElC,WAAazB,EAAEqB,KAAKhC,MACpC2M,SAgBP,MAAO,MAETvM,GAAI,CACF,GAAI,cCtUCoN,EAA6B,SAAC,GAAsB,IAAD,UAAnB5H,EAAmB,EAAnBA,aACrChE,EAAQkD,qBAAWC,IACnBjE,EAAOoG,cAFiD,EAGlBE,qBAC1CtH,EACA,CACEuH,UAAU,EACV3G,QAAS,CACPI,UARwD,mBAGvDwG,EAHuD,KAGrCC,EAHqC,KAkB9DC,qBAAU,WACJF,EAAiBG,QAAQ,eAC3B7B,EAAaC,KAAK,cAAe,CAC/BC,WAAY,SACZC,OAAQ,SACR/D,KAAMsF,EAAiB5G,QAAQI,KAAKC,cAEtCwG,EAAgB,aAEjB,CAACD,EAAkBC,EAAiB3B,IAavC,OACE,6BACE,6CAAYhE,QAAZ,IAAYA,OAAZ,YAAYA,EAAOI,KAAKc,cAAxB,aAAY,EAAoBuC,QAChC,0BAAMsC,SAAU7G,EAAK8G,cA9BR,SAACC,GAEhBN,EAAgB,cA6BZ,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAI/F,QAAS,IACb,kBAAC,EAAD,sBAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,WACA,kBAAC,EAAD,cACA,kBAAC,EAAD,iBACA,kBAAC,EAAD,aACA,kBAAC,EAAD,iBACA,kBAAC,EAAD,yBAGJ,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BACEmC,KAhFC,QAiFDmE,IAAKhH,EAAKiH,SAAS,CACjBjB,SAAU,cAOX7F,EAAgBmE,KAAI,SAACmB,GAAD,OACnB,4BAAQC,MAAOD,GAAIA,QAIzB,kBAAC,EAAD,KACE,2BACE5C,KA/FI,WAgGJmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAHnC,UAKGhG,EAAKkH,OAAOhC,gBALf,aAKG,EAAsBiC,SAEzB,kBAAC,EAAD,KACE,2BACEtE,KArGA,OAsGAmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAEjC,6BALF,UAMGhG,EAAKkH,OAAOrE,YANf,aAMG,EAAkBsE,SAErB,kBAAC,EAAD,KACE,2BACEtE,KA5GI,WA6GJmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAEjC,6BALF,UAMGhG,EAAKkH,OAAOpE,gBANf,aAMG,EAAsBqE,SAEzB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BAAQxB,KAAK,UAAb,UA5CN,OA+CG7E,QA/CH,IA+CGA,OA/CH,YA+CGA,EAAOI,KAAKc,cA/Cf,aA+CG,EAAoBsC,KAAI,SAACvC,GAAW,IAAD,EAC5B4K,EAA6B,UAAGjJ,EACpC5C,UADiC,aAAG,EAEnCM,QAAO,SAACS,GAAD,OAAQA,EAAGK,UAAYH,EAAM7C,MACvC,OACE,kBAAC,EAAD,CAAIsF,IAAKzC,EAAM7C,IACb,kBAAC,EAAD,KAAK6C,EAAM7C,IACX,kBAAC,EAAD,KAAK6C,EAAMY,OACX,kBAAC,EAAD,KAAKZ,EAAMmD,UACX,kBAAC,EAAD,KAAKnD,EAAMc,MACX,kBAAC,EAAD,KAAKd,EAAMe,UACX,kBAAC,EAAD,KAAK6J,EAA8BpI,QACnC,kBAAC,EAAD,KAC4C,IAAzCoI,EAA8BpI,QAC7B,4BACEoB,KAAK,SACLd,QAAS,kBA7FV3F,EA6F4B6C,EAAM7C,QA5FrD4F,EAAaC,KAAK,CAChBY,KAAM,cACNX,WAAY,SACZC,OAAQ,SACR/D,KAAM,CACJhC,QANc,IAACA,IA2FD,oBC5HT0N,EAAoC,SAAC,GAAsB,IAAD,MAAnB9H,EAAmB,EAAnBA,aAC5ChE,EAAQkD,qBAAWC,IACnBjE,EAAOoG,cAFwD,EAGzBE,qBAC1CtH,EACA,CACEuH,UAAU,EACV3G,QAAS,CACPI,UAR+D,mBAG9DwG,EAH8D,KAG5CC,EAH4C,KAkBrEC,qBAAU,WACJF,EAAiBG,QAAQ,eAC3B7B,EAAaC,KAAK,cAAe,CAC/BC,WAAY,SACZC,OAAQ,gBACR/D,KAAMsF,EAAiB5G,QAAQI,KAAKC,cAEtCwG,EAAgB,aAEjB,CAACD,EAAkBC,EAAiB3B,IAavC,OACE,6BACE,wDAAoBpB,EAAiB5C,UAArC,aAAoB,EAAyByD,QAC7C,0BAAMsC,SAAU7G,EAAK8G,cA9BR,SAACC,GAEhBN,EAAgB,cA6BZ,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAI/F,QAAS,IACb,kBAAC,EAAD,sBAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,WACA,kBAAC,EAAD,cACA,kBAAC,EAAD,oBACA,kBAAC,EAAD,aACA,kBAAC,EAAD,kBAGJ,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BACEmC,KA5EG,UA6EHmE,IAAKhH,EAAKiH,SAAS,CACjBjB,SAAU,cAHd,OAUGlF,QAVH,IAUGA,OAVH,EAUGA,EAAOI,KAAKc,OAAOsC,KAAI,SAACmB,GAAD,OACtB,4BAAQjB,IAAKiB,EAAEvG,GAAIwG,MAAOD,EAAEvG,IACzBuG,EAAE9C,MADL,IACa8C,EAAEP,SADf,IAC0BO,EAAE5C,WAKlC,kBAAC,EAAD,KACE,4BACEA,KA/FS,gBAgGTmE,IAAKhH,EAAKiH,SAAS,CACjBjB,SAAU,cAHd,OAUGlF,QAVH,IAUGA,OAVH,EAUGA,EAAOI,KAAKqC,aAAae,KAAI,SAACmB,GAAD,OAC5B,4BAAQjB,IAAKiB,EAAEvG,GAAIwG,MAAOD,EAAEvG,IACzBuG,EAAEE,KADL,IACYF,EAAE5C,WAKpB,kBAAC,EAAD,KACE,2BACEA,KA/GA,OAgHAmE,IAAKhH,EAAKiH,SAAS,CAAEjB,SAAU,eAEjC,6BALF,UAMGhG,EAAKkH,OAAOrE,YANf,aAMG,EAAkBsE,SAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,4BAAQxB,KAAK,UAAb,UAjDN,UAoDGjC,EAAiB5C,UApDpB,aAoDG,EAAyBwD,KAAI,SAAC5C,GAAkB,IAAD,IAG9C,QAAcS,IAAVrB,EACF,OAAO,KAET,IAAM+L,EAAsC,OAAG/L,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKC,mBAAmBC,QAC5E,SAACC,GAAD,OAASA,EAAIS,iBAAmBJ,EAAaxC,MAE/C,OACE,kBAAC,EAAD,CAAIsF,IAAK9C,EAAaxC,IACpB,kBAAC,EAAD,KAAKwC,EAAaxC,IAClB,kBAAC,EAAD,eAEI4B,EAAMI,KAAKc,OAAOJ,MAChB,SAACK,GAAD,OAAOA,EAAE/C,KAAOwC,EAAaQ,kBAHnC,aAEI,EAEGW,MAGP,kBAAC,EAAD,eAEI/B,EAAMI,KAAKqC,aAAa3B,MACtB,SAACK,GAAD,OAAOA,EAAE/C,KAAOwC,EAAamC,wBAHnC,aAEI,EAEGhB,MAGP,kBAAC,EAAD,KAAKnB,EAAamB,MAClB,kBAAC,EAAD,KAAKgK,EAAuCtI,QAC5C,kBAAC,EAAD,KACqD,IAAlDsI,EAAuCtI,QACtC,4BACEoB,KAAK,SACLd,QAAS,kBAjHH3F,EAiH4BwC,EAAaxC,QAhHnE4F,EAAaC,KAAK,CAChBY,KAAM,cACNX,WAAY,SACZC,OAAQ,gBACR/D,KAAM,CACJhC,QANqB,IAACA,IA+GR,qBCnHhB4N,EAAwB/G,IAAW,CACvCyD,KAAMzD,MAAWC,SAAS,6BAC1B7E,mBAAoB4E,MAAYgH,GAC9BhH,IAAW,CACT5C,QAAS4C,MAAaC,SAAS,8EAC/BlE,eAAgBiE,MAAaC,SAAS,mFAgB/BgH,EAAoC,SAAC,GAAsB,IAAD,MAMjEjM,EACAI,EAP8C2D,EAAmB,EAAnBA,aAC5ChE,EAAQkD,qBAAWC,IACnBgJ,EAASC,cAETvL,EAAgB+B,EAAiB5C,GAIvC,QAAwBqB,IAApB8K,EAAO3L,SAAwB,CACjCP,EAAM,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKiD,QAAQvC,MAAK,SAACwC,GAAD,OAAOA,EAAElF,KAAO+N,EAAO3L,YACzD,IAAM6L,EAA2B,OAAGrM,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKC,mBAAmBC,QACjE,SAACgD,GAAD,aAAOA,EAAE9C,YAAF,UAAeP,SAAf,aAAe,EAAQ7B,OAEhCiC,EAAqBkC,IAAEC,OAAO6J,GAA6B,SAAC9L,GAC1D,cAAOM,QAAP,IAAOA,OAAP,EAAOA,EAAeyL,WAAU,SAACvL,GAAD,OAAQA,EAAG3C,KAAOmC,EAAIS,qBAI1D,IAAM9B,EAAOoG,YAAoB,CAG/BC,iBAAkByG,EAClBO,cAAe,CACb7D,MAAY,QAAN,EAAAzI,SAAA,eAAQsD,UACV,IAAIK,KAAK3D,EAAOsD,UAAUM,cAAcC,OAAO,EAAG,KAClD,IAAIF,MAAOC,cAAcC,OAAO,EAAG,IACvCzD,wBAOEmM,EAAWC,cAEXC,EAAc,UAAGnK,IAAEoK,MAAF,OAAQ3M,QAAR,IAAQA,OAAR,EAAQA,EAAOI,KAAKiD,SAAS,SAACC,GAAD,OAAOA,EAAEC,mBAAzC,aAAG,EAAiDnF,GAClEwO,EAAwB,OAAG5M,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKC,mBAAmBC,QAC9D,SAACC,GAAD,OAASA,EAAIC,WAAakM,KAuC5B,OACE,6BACE,0CACA,0BAAM3G,SAAU7G,EAAK8G,cAvCR,SAACC,GAChBjH,QAAQC,IAAI,cAAegH,EAAOyC,KAAMzC,QACzB5E,IAAXpB,EACF+D,EAAaC,KAAK,CAChBY,KAAM,cACNX,WAAY,SACZC,OAAQ,qBACR/D,KAAM6F,IAGRjC,EAAaC,KAAK,CAChBY,KAAM,cACNX,WAAY,SACZC,OAAQ,qBACR/D,KAAK,aACHI,SAAUP,EAAO7B,IACd6H,KAITuG,EAAS,SAoBL,2BAAO3H,KAAK,OAAO9C,KAAK,OAAOmE,IAAKhH,EAAKiH,WAD3C,UAEGjH,EAAKkH,OAAOsC,YAFf,aAEG,EAAkBrC,QACnB,6BACA,6BAEA,kBAAC,EAAD,KACE,+BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,oBACA,kBAAC,EAAD,uBAGJ,sCACGxF,QADH,IACGA,OADH,EACGA,EAAe2C,KAAI,SAAC5C,EAAciM,GAAW,IAAD,cAKrCC,EAHM,IAAVD,GACAhM,EAAcgM,GAAO9J,gBACnBlC,EAAcgM,EAAQ,GAAG9J,cAE3B,kBAAC,EAAD,CAAIW,IAAG,gBAAW9C,EAAaxC,KAC7B,kBAAC,EAAD,CAAIwB,QAAS,GACX,sCAEI0C,EAAgBtC,UAFpB,uBAEI,EAAwBc,MACtB,SAAC4B,GAAD,OAAOA,EAAEtE,KAAOwC,EAAamC,wBAHnC,aAEI,EAEGhB,QAPoC,KAa3CgL,EACJ,kBAAC,EAAD,CAAIrJ,IAAG,cAAS9C,EAAaxC,KAC3B,kBAAC,EAAD,KAAKwC,EAAamB,MAClB,kBAAC,EAAD,KACE,2BACEA,KAAI,6BAAwB8K,EAAxB,aACJ3G,IAAKhH,EAAKiH,WAEZ,2BACEtB,KAAK,SACL9C,KAAI,6BAAwB8K,EAAxB,oBACJ3G,IAAKhH,EAAKiH,SACVvB,MAAOhE,EAAaxC,MAErB,UAAAc,EAAKkH,OAAO/F,0BAAZ,yBAAiCwM,UAAjC,eAAyCxK,WACxC,UAACnD,EAAKkH,OAAO/F,0BAAb,uBAAC,EAAiCwM,UAAlC,aAAC,EAAyCxK,SACvCgE,SAEP,kBAAC,EAAD,YAEIuG,QAFJ,IAEIA,OAFJ,YAEIA,EAA0B9L,MACxB,SAACkM,GAAD,OAAUA,EAAKhM,iBAAmBJ,EAAaxC,aAHrD,aAEI,EAEGiE,UAKX,OACE,kBAAC,IAAM4K,SAAP,KACGH,EACAC,QAMX,4BAAQlI,KAAK,UAAb,a,oCCjNKqI,EAAmB,WAC9B,IAAMlN,EAAQkD,qBAAWC,IADW,EAEIgK,cAFJ,mBAE7BC,EAF6B,KAI9BC,GAJ8B,KAII,CAAC,MAAO,MAAO,QAEjDC,EAAkBF,EAAavC,IAAI,aACnC0C,EAAqB,CAEzBC,MAAOC,YACLC,YAAS,IAAI9J,MAAS,EAAI+J,SAAQ,OAACL,QAAD,IAACA,IAAmB,IAAK,MAC1D,GAEHM,IAAK,IAAIhK,MAGLP,EAAO,OAAGrD,QAAH,IAAGA,OAAH,EAAGA,EAAOI,KAAKiD,QAAQ/C,QAAO,SAACgD,GAAD,OACrB,OAApBgK,GAA2BO,YAAiBvK,EAAEC,SAAUgK,MAGpDO,EAAiBT,EAAW7J,KAAI,SAACxB,GACrC,IAAM+L,EAAuBxL,IAAEyL,QAAF,OAC3B3K,QAD2B,IAC3BA,OAD2B,EAC3BA,EAASG,KAAI,SAACvD,GACZ,IAAMgO,EAAI,IAAIrK,KAAK3D,EAAOsD,UACpB2K,EACJD,EAAEE,iBACF,IACA5L,IAAE6L,SAASC,OAAOJ,EAAEK,cAAgB,GAAI,EAAG,KAC3C,IACAL,EAAEM,aAWJ,OAVAvP,QAAQC,IACN,6BACoB,IAApBgP,EAAEK,cACFvO,EAAkBC,EAAOC,EAAQ+B,GACjCkM,GAMK,CAELA,IAEAM,GACEzO,EACEC,EACAC,EACA+B,GACA,SAACb,GAAD,OAAOA,EAAEY,OAASC,MACf,GACLyM,QAAQ,QAKhB,OADAzP,QAAQC,IAAI,2BAA4B8O,GACjC,CACL3P,GAAI4D,EACJ5B,KAAM2N,GAAwB,OAI5BW,EAAiBrB,EAAW7J,KAAI,SAACxB,GACrC,IAAM+L,EAAuBxL,IAAEyL,QAAF,OAC3B3K,QAD2B,IAC3BA,OAD2B,EAC3BA,EAASG,KAAI,SAACvD,GACZ,IAAMgO,EAAI,IAAIrK,KAAK3D,EAAOsD,UACpB2K,EACJD,EAAEE,iBACF,IACA5L,IAAE6L,SAASC,OAAOJ,EAAEK,cAAgB,GAAI,EAAG,KAC3C,IACAL,EAAEM,aAWJ,OAVAvP,QAAQC,IACN,6BACoB,IAApBgP,EAAEK,cACFvO,EAAkBC,EAAOC,EAAQ+B,GACjCkM,GAMK,CAELA,IAEAM,GAM2D,KALxDzO,EACCC,EACAC,EACA+B,GACA,SAACb,GAAD,OAAOA,EAAEY,OAASC,KACfjC,EAAkBC,EAAOC,EAAQ+B,IAAc,IACpDyM,QAAQ,QAKhB,OADAzP,QAAQC,IAAI,2BAA4B8O,GACjC,CACL3P,GAAI4D,EACJ5B,KAAM2N,GAAwB,OAIlC/O,QAAQC,IAAI,CAAE6O,UAEd,IAAMa,EAAmB,SAACC,GACxB,OACE,kBAAC,IAAD,CACEC,SAAS,EACTzO,KAAM,CAAC0N,EAAMc,IACbE,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDC,OAAQ,CACNtK,KAAM,OACNuK,OAAQ,YAIVC,QAAQ,gBACRC,OAAQ,CAGNzK,KAAM,SACN0K,IAAK,OACLC,IAAK,OACLC,SAAS,GAGXC,QAAS,KACTC,UAAW,KACXC,WAAY,CACVR,OAAQ,QACRS,WAAY,iBACZC,OAAQ,iCACRC,cAAe,IAEjBC,SAAU,CACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,GAGhBC,UAAW,EACXC,WAAY,CAAEC,MAAO,cACrBC,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,WAAW,IACXC,mBAAoB,GACpBC,aAAa,IACbC,SAAS,EACTC,QAAS,CACP,CACEC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACErT,GAAI,QACJ+F,MAAO,CACLuN,eAAgB,qBAChBL,YAAa,OAMvBM,aAAc,YAAgB,IAAbC,EAAY,EAAZA,MAEf,OADAhT,QAAQC,IAAI,cAAe+S,GAEzB,yBACEzN,MAAO,CACL0N,WAAY,QACZC,QAAS,WACTC,OAAQ,mBAGV,6BAAMH,EAAMI,OAAO,GAAGhS,KAAKiS,YAC1BL,EAAMI,OAAO5O,KAAI,SAAC8O,GAAD,OAChB,yBACE5O,IAAK4O,EAAMlU,GACXmG,MAAO,CACLgO,MAAOD,EAAME,WACbN,QAAS,UAGX,gCAASI,EAAMG,SAPjB,IAOoCH,EAAMlS,KAAKsS,oBAU7D,OACE,yBAAKnO,MAAO,CAAEoO,OAAQ,MACpB,sCACA,4BACE,kBAAC,IAAD,CAAMhP,GAAG,gBAAT,UADF,KAC0C,IACxC,kBAAC,IAAD,CAAMA,GAAG,gBAAT,UAFF,MAE0C,kBAAC,IAAD,CAAMA,GAAG,KAAT,QAE1C,yBAAKY,MAAO,CAAEC,MAAO,OAAQmO,OAAQ,IAAKC,QAAS,SACjD,yBAAKrO,MAAO,CAAEC,MAAO,MAAOmO,OAAQ,MAAQhE,EAAiB,IAC7D,yBAAKpK,MAAO,CAAEC,MAAO,MAAOmO,OAAQ,MAAQhE,EAAiB,IAC7D,yBAAKpK,MAAO,CAAEC,MAAO,MAAOmO,OAAQ,MAAQhE,EAAiB,KAG/D,kBAAC,IAAD,CACEE,SAAS,EACTzO,KAAMsO,EACNI,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDC,OAAQ,CACNtK,KAAM,OACNuK,OAAQ,YAIVC,QAAQ,gBACRC,OAAQ,CAGNzK,KAAM,SACN0K,IAAK,OACLC,IAAK,QAIPE,QAAS,KACTC,UAAW,KACXC,WAAY,CACVR,OAAQ,QACRS,WAAY,iBACZC,OAAQ,iCACRC,cAAe,IAWjBC,SAAU,CACRC,OAAQ,OACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdN,OAAQ,IACRC,cAAe,GACf8C,eAAgB,UAGlBxC,UAAW,EACXC,WAAY,CAAEC,MAAO,cACrBC,iBAAkB,EAClBC,iBAAkB,CAAEC,KAAM,cAC1BC,WAAW,IACXC,mBAAoB,GACpBC,aAAa,IACbC,SAAS,EACTC,QAAS,CACP,CACEC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,cAAe,gBACfC,UAAW,GACXC,WAAY,GACZC,YAAa,IACbC,WAAY,GACZC,YAAa,SACbC,kBAAmB,oBACnBC,QAAS,CACP,CACErT,GAAI,QACJ+F,MAAO,CACLuN,eAAgB,qBAChBL,YAAa,OAMvBM,aAAc,YAAgB,IAAbC,EAAY,EAAZA,MAEf,OADAhT,QAAQC,IAAI,cAAe+S,GAEzB,yBACEzN,MAAO,CACL0N,WAAY,QACZC,QAAS,WACTC,OAAQ,mBAGV,6BAAMH,EAAMI,OAAO,GAAGhS,KAAKiS,YAC1BL,EAAMI,OAAO5O,KAAI,SAAC8O,GAAD,OAChB,yBACE5O,IAAK4O,EAAMlU,GACXmG,MAAO,CACLgO,MAAOD,EAAME,WACbN,QAAS,UAGX,gCAASI,EAAMG,SAPjB,IAOoCH,EAAMlS,KAAKsS,WAP/C,e,qICzTVI,GAAYC,cAAW,SAACxC,GAAD,OAC3ByC,aAAa,CACXC,KAAM,CACJf,QAAS3B,EAAM2C,QAAQ,EAAG,EAAG,IAE/BC,MAAO,CACLC,cAAe,IAEjBC,KAAM,CACJC,aAAc/C,EAAM2C,QAAQ,IAE9BK,UAAW,CACTC,gBAAiBjD,EAAMkD,QAAQxB,WAAWkB,OAE5CO,OAAQ,CACN3E,IAAK,OACLE,OAAQ,GAEV0E,KAAM,CACJC,SAAU,GAEZC,UAAW,CACTC,SAAU,WACVC,OAAQ,EACRhF,KAAM,GACNG,KAAM,EACNF,MAAO,EACPF,OAAQ,UAKVkF,SAAU,CACRxP,MAAO,aAaPyP,GAAO1R,IAAE0D,OARG,CAChBiO,EAAG,SACHC,EAAG,iBACHC,EAAG,SACHC,EAAG,iBAMQC,GAAyB,WACpC,IAAMC,EAAUzB,KACV0B,EAAWC,cAFyB,EAIhBC,IAAMC,cAAgCtT,GAJtB,mBAInCuD,EAJmC,KAI5BgQ,EAJ4B,KAiB1C,OAXAhP,qBAAU,WACHqO,GAAKY,MAAK,SAACC,EAAGC,GAAJ,OAAYP,EAASQ,SAASC,WAAW,IAAMH,OAC5DF,OAASvT,GAEX,IAAM0T,EAAMd,GAAK3H,WAAU,SAAAwI,GAAC,OAAIN,EAASQ,SAASC,WAAW,IAAMH,OACtD,IAATC,GACFH,EAASG,KAGV,CAACP,EAASQ,SAAUpQ,IAGrB,kBAACsQ,GAAA,EAAD,CAAQpB,SAAS,QAAQvB,MAAM,UAAU9S,UAAW8U,EAAQb,QAC1D,kBAACyB,EAAA,EAAD,CACEvQ,MAAOA,EACPF,SAAU,SAACmD,EAAOuN,GAChBpW,QAAQC,IAAI,CAAE4I,QAAOuN,aACrBR,EAASQ,IAEXC,YAAU,GAEV,kBAACC,GAAA,EAAD,CACEC,UAAWC,IACX7R,GAAG,SACH8R,MAAM,SACNC,KAAM,kBAAC,KAAD,QAER,kBAACJ,GAAA,EAAD,CACEC,UAAWC,IACX7R,GAAG,iBACH8R,MAAM,iBACNC,KAAM,kBAAC,KAAD,QAER,kBAACJ,GAAA,EAAD,CACEC,UAAWC,IACX7R,GAAG,SACH8R,MAAM,SACNC,KAAM,kBAAC,KAAD,QAER,kBAACJ,GAAA,EAAD,CACEC,UAAWC,IACX7R,GAAG,eACH8R,MAAM,eACNC,KAAM,kBAAC,KAAD,WC5FHvS,GAAeuR,IAAMiB,mBAChCtU,GA2IauU,GAxIO,WAAO,IAAD,MACWpQ,qBAAWwD,EAAc,CAC5DvD,UAAU,IAFc,mBACnBoQ,EADmB,KACX5R,EADW,KACLD,EADK,KAqB1BhF,QAAQC,IAAI,UAAW4W,EAAOjR,MAA9B,UAAqCiR,EAAO/W,QAAQmK,UAApD,aAAqC,EAAmBqB,YA6BxD,OACE,kBAACnH,GAAa2S,SAAd,CAAuBlR,MAAK,UAAEiR,EAAO/W,QAAQmK,UAAjB,aAAE,EAAmBqB,YAC/C,kBAAC,IAAD,KACE,kBAAC,IAAM2C,SAAP,KACE,kBAAC8I,EAAA,EAAD,MAEA,yBAAKtW,UC5EG,UD6EN,yBAAKA,UC5EA,UD6EH,4BACE,4BACE,kBAAC,IAAD,CAAMkE,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,mBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,mBAAT,gBAGJ,4BACEI,QAAS,WACPE,EAAK,UAFT,gBAOC4R,EAAOhQ,QAAQ,WACd,uBACEmQ,KAAMH,EAAO/W,QAAQoK,cACrB+M,SAAS,gBACTlS,QAAS,WACPmS,YAAW,WACTjS,EAAK,WACJ,MAELc,OAAO,SACPoR,IAAI,uBATN,YAcF,2BAAOtR,KAAK,OAAOH,SA7EZ,SAAC3F,GAKlB,IAAIqX,EAAS,IAAIC,WACjBD,EAAOE,OAGP,SAAsBzO,GACpB7I,QAAQC,IAAI4I,EAAM9C,OAAQwR,QAC1B,IAAIC,EAAM/L,KAAKgM,MAAM5O,EAAM9C,OAAQwR,QAEnCtS,EAAK,kBAAmB,CACtB7D,KAAMoW,KAPVJ,EAAOM,WAAW3X,EAAEgG,OAAO4R,MAAO,QAwE1B,yBAAKlX,UCxHI,UDyHP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmX,KAAK,SAASC,QAAS,kBAAC,EAAD,QAC9B,kBAAC,IAAD,CACED,KAAK,eACLC,QAAS,kBAAC,EAAD,CAAa7S,aAAcA,MAEtC,kBAAC,IAAD,CACE4S,KAAK,SACLC,QAAS,kBAAC,EAAD,CAAQ7S,aAAcA,MAEjC,kBAAC,IAAD,CACE4S,KAAK,iBACLC,QAAS,kBAAC,EAAD,CAAe7S,aAAcA,MAExC,kBAAC,IAAD,CACE4S,KAAK,4BACLC,QAAS,kBAAC,EAAD,CAAe7S,aAAcA,MAExC,kBAAC,IAAD,CACE4S,KAAK,kBACLC,QAAS,kBAAC,EAAD,CAAe7S,aAAcA,MAExC,kBAAC,IAAD,CAAO6S,QAAS,kBAAC,EAAD,CAAM7S,aAAcA,SAI1C,kBAAC,GAAD,UE1IU8S,QACW,cAA7BnN,OAAO6K,SAASuC,UAEe,UAA7BpN,OAAO6K,SAASuC,UAEhBpN,OAAO6K,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnP,MAAK,SAAAoP,GACjCA,EAAaC,kB","file":"static/js/main.73682937.chunk.js","sourcesContent":["import { Machine, assign, send } from 'xstate';\nimport { FormContextValues } from 'react-hook-form';\n\ninterface FormSchema {\n  states: {\n    idle: {};\n    validating: {};\n    submitting: {};\n    submitted: {};\n  };\n}\n\ntype FormEvent =\n  | {\n      type: 'SUBMIT';\n    }\n  | {\n      type: 'REINIT';\n    };\n\ninterface FormContext<T> {\n  form: FormContextValues<T>;\n}\n\nexport const formMachine = Machine<FormContext<any>, FormSchema, FormEvent>({\n  id: 'form',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        SUBMIT: 'submitting',\n      },\n    },\n    validating: {},\n    submitting: {\n      entry: assign((context, e) => {\n        console.log(\n          'e',\n          e,\n          '---context.form.getValues();',\n          context.form.getValues(),\n        );\n        // send('SAVE', {\n        //   to: 'store',\n        // });\n        console.log('======');\n        return {};\n      }),\n      on: {\n        '': 'submitted',\n      },\n      // onDone: {\n      //   target: 'submitted'\n      // }\n      // entry: send('SAVE', {\n      //   to: 'store',\n      // })\n    },\n    submitted: {\n      on: {\n        'REINIT': 'idle',\n      },\n    },\n  },\n});\n","export const BASE_CURRENCY = 'USD' as const;\n\nexport const ALL_ASSET_TYPES = [\n  'CURRENCY',\n  'CRYPTO_CURRENCY',\n  'SECURITY',\n  'VALUABLE_ASSET',\n  'PRECIOUS_METAL',\n] as const;\n\nexport const ALL_INSTITUTION_TYPES = [\n  'BANK',\n  'BROKER',\n  'PERSON',\n  'PHYSICAL_LOCATION',\n  'E-WALLET',\n  'OTHER',\n] as const;\n","import React from 'react';\n\nimport * as styles from './Table.treat';\n\nexport const Table: React.FC = ({ children }) => {\n  return (\n    <table className={styles.table}>\n      {children}\n    </table>\n  )\n}\n\nexport const Tr: React.FC = ({ children }) => {\n  return (\n    <tr className={styles.tr}>\n      {children}\n    </tr>\n  )\n}\n\nexport const Td: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <td className={styles.td} colSpan={colspan}>\n      {children}\n    </td>\n  )\n}\n\nexport const Th: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <th className={styles.th} colSpan={colspan}>\n      {children}\n    </th>\n  )\n}\n","import \"!../../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./Table.treat.6VVywW1.css\";\nexport var table = '_3-1r7';\nexport var tr = '_3Mjlo';\nexport var th = '_1rfFa';\nexport var td = 'zX0YF';","import React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport _ from 'lodash';\n\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { StoreEvent } from './machines/store';\nimport { Link } from 'react-router-dom';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nfunction getExchangeRate(\n  store: fintrack.JSONShape | undefined,\n  erData: fintrack.ExchangeRateData | undefined,\n  // report: fintrack.Report,\n  asset: fintrack.Asset,\n  targetCurrency: fintrack.Currency\n): number {\n  if (erData === undefined) {\n    return 0;\n  }\n  const isBaseAssetACurrency = asset.class === 'CURRENCY';\n  // if (asset.currency === targetCurrency) {\n  //   return 1;\n  // }\n\n  // then find such asset where class is currency, name is asset.currency\n  // and check whether currency of such asset is `fintrack.BaseCurrency` (USD)\n  const currencyAsset = isBaseAssetACurrency\n    ? asset\n    : store?.data.assets.find(\n        (a) => a.class === 'CURRENCY' && a.name === asset.currency\n      )!;\n  let erToBaseCurrency = 1;\n\n  if (currencyAsset.currency !== targetCurrency) {\n    const currencyAssetToBase = store?.data.assets.find(\n      (a) => a.class === 'CURRENCY' && a.name === targetCurrency\n    );\n    if (currencyAssetToBase !== undefined) {\n      const er = erData[currencyAssetToBase.id];\n      if (er !== null) {\n        // console.log({ er })\n        erToBaseCurrency = parseFloat(er!);\n      } else {\n        erToBaseCurrency = 0;\n      }\n    }\n  }\n  if (erToBaseCurrency === 0) {\n    return 0;\n  }\n  // console.log({ targetCurrency, asset, currencyAsset, erToBaseCurrency });\n  return (\n    (parseFloat(erData[currencyAsset.id] || '0') / erToBaseCurrency) *\n    (isBaseAssetACurrency ? 1 : parseFloat(erData[asset.id] || '0'))\n  );\n}\n\nexport function getTotalForReport(\n  store: fintrack.JSONShape | undefined,\n  report: fintrack.Report,\n  targetCurrency: fintrack.Currency,\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean\n): number | undefined {\n  return store?.data.assetAccountStates\n    .filter((aas) => aas.reportId === report.id)\n    .reduce((acc, currVal) => {\n      const assetAccount = store.data.assetAccounts.find(\n        (aa) => aa.id === currVal.assetAccountId\n      )!;\n      const asset = store.data.assets.find(\n        (a) => a.id === assetAccount.assetId\n      )!;\n      if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n        return Math.round(acc);\n      }\n      // asset.currency\n      const erData = store.data.exchangeRates.find(\n        (er) => er.reportId === report.id\n      )?.data;\n      // const erToAssetCurrency = erData[asset.id] ?? '0';\n      let erFromAssetToTarget = getExchangeRate(\n        store,\n        erData,\n        asset,\n        targetCurrency\n      );\n      const assetPriceInBaseCurrency =\n        // parseFloat(erToAssetCurrency) *\n        erFromAssetToTarget * parseFloat(currVal.balance);\n      // if (asset.currency !== baseCurrency) {\n      // }\n      // if (report.id === 'UJ1XJQ') {\n      //   console.log(\n      //     'targetCurrency',\n      //     targetCurrency,\n      //     'asset',\n      //     asset,\n      //     'erFromAssetToBase',\n      //     erFromAssetToBase,\n      //     't',\n      //     assetPriceInBaseCurrency\n      //   );\n      // }\n      return Math.round(assetPriceInBaseCurrency + acc);\n    }, 0);\n}\n\nexport function getInstitutions(\n  store: fintrack.JSONShape | undefined\n): fintrack.Institution[] | undefined {\n  return _.sortBy(store?.data.institutions, (i) => i.sortIndex || i.name);\n}\n\nexport function getAssetAccounts(\n  store: fintrack.JSONShape | undefined\n): fintrack.AssetAccount[] | undefined {\n  return getInstitutions(store)?.flatMap((inst) => {\n    return _.sortBy(\n      store?.data.assetAccounts.filter((aa) => aa.institutionId === inst.id),\n      // TODO replace name with sort order\n      (aa) => aa.name\n    );\n  });\n}\n\nexport const Home: React.FC<OwnProps> = (props) => {\n  const store = useContext(StoreContext);\n\n  const assetAccounts = getAssetAccounts(store);\n  if (assetAccounts === undefined) {\n    return null;\n  }\n  const sortedReports = _.sortBy(store?.data.reports, (r) => -1 * r.datetime);\n  const assets = store?.data.assets;\n  const lastReport = sortedReports[0]!;\n\n  const deleteReport = (reportId: string) => {\n    props.storeService.send('UPDATE_DATA', {\n      actionType: 'delete',\n      entity: 'reports',\n      data: {\n        id: reportId,\n      },\n    });\n  };\n\n  const updateExchangeRate = (\n    value: string,\n    asset: fintrack.Asset,\n    report: fintrack.Report\n  ) => {\n    console.log('_________value', value, asset, report);\n\n    props.storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'update',\n      entity: 'exchangeRates',\n      data: {\n        value,\n        asset,\n        report,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Your net worth is...</h1>\n      <Table>\n        <thead>\n          <Tr>\n            <Th></Th>\n            {getInstitutions(store)?.map((inst) => {\n              return (\n                <Th\n                  colspan={\n                    assetAccounts.filter((aa) => aa.institutionId === inst.id)\n                      .length\n                  }\n                >\n                  {inst.name}\n                </Th>\n              );\n            })}\n          </Tr>\n          <Tr>\n            <Th>date</Th>\n            {assetAccounts.map((aa) => (\n              <Th>{aa.name}</Th>\n            ))}\n            <Th>Total in RUB</Th>\n            <Th>Total in USD</Th>\n            <Th>Total in EUR</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const assetAccountStates = store?.data.assetAccountStates.filter(\n              (aas) => aas.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>\n                  <Link to={`/add-edit-report/${report.id}`}>\n                    {new Date(report.datetime).toISOString().substr(0, 10)}\n                  </Link>\n                </Td>\n                {assetAccounts.map((aa) => {\n                  const aas = assetAccountStates?.find(\n                    (aas) => aas.assetAccountId === aa.id\n                  );\n                  return <Td>{aas?.balance}</Td>;\n                })}\n                <Td>{getTotalForReport(store, report, 'RUB')}</Td>\n                <Td>{getTotalForReport(store, report, 'USD')}</Td>\n                <Td>{getTotalForReport(store, report, 'EUR')}</Td>\n                <Td>\n                  <button\n                    onClick={() => {\n                      deleteReport(report.id);\n                    }}\n                  >\n                    delete\n                  </button>\n                </Td>\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <h2>Exchange rates</h2>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>date</Th>\n            {assets?.map((a) => (\n              <Th>\n                {a.class} {a.subclass} {a.name} in {a.currency}\n              </Th>\n            ))}\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map((report) => {\n            const exchangeRate = store?.data.exchangeRates.find(\n              (er) => er.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>{new Date(report.datetime).toISOString().substr(0, 10)}</Td>\n                {assets?.map((a) => {\n                  const rate = exchangeRate?.data?.[a.id];\n                  // const aas = exchangeRate.find(\n                  //   (aas) => aas.assetAccountId === aa.id\n                  // );\n                  return (\n                    <Td>\n                      <input\n                        style={{ width: 50 }}\n                        defaultValue={rate}\n                        onChange={(v) =>\n                          updateExchangeRate(v.target.value, a, report)\n                        }\n                      />\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\nimport * as yup from 'yup';\n\nimport * as styles from './Insitutions.treat';\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { ALL_INSTITUTION_TYPES } from './constants';\nimport { Th, Table, Tr, Td } from './components/Table';\nimport { StoreEvent } from './machines/store';\nimport { getAssetAccounts } from './Home';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldType = 'type';\nconst fieldName = 'name';\nconst fieldSortIndex = 'sortIndex';\n\ntype FormValues = {\n  [fieldType]: string;\n  [fieldName]: string;\n  [fieldSortIndex]: number;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nconst yupInstitution = yup.object({\n  [fieldType]: yup.string().required('required'),\n  [fieldName]: yup.string().required('required'),\n  [fieldSortIndex]: yup\n    .number()\n    .integer()\n    .moreThan(-1, 'required posititve number')\n    .required('required'),\n});\n\nexport const Insitutions: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>({\n    validationSchema: yupInstitution,\n  });\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('________', values);\n    formMachineSend('SUBMIT');\n  };\n\n  const deleteInstitution = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'institutions',\n      data: {\n        id,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'institutions',\n        data: yupInstitution.validateSync(\n          formMachineState.context.form.getValues()\n        ),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  return (\n    <div className={styles.root}>\n      <h1>Institutions {store?.data.institutions?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={3}></Th>\n              <Th>Used in # of</Th>\n              <Th></Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>type</Th>\n              <Th>name</Th>\n              <Th>sort index</Th>\n              <Th>asset accounts</Th>\n              <Th>action</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldType}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_INSTITUTION_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldSortIndex}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.sortIndex?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store?.data.institutions?.map((inst) => {\n              const assetAccountsWithCurrentInstitution = getAssetAccounts(\n                store\n              )!.filter((aa) => aa.institutionId === inst.id);\n              return (\n                <Tr key={inst.id}>\n                  <Td>{inst.id}</Td>\n                  <Td>{inst.type}</Td>\n                  <Td>{inst.name}</Td>\n                  <Td>{inst.sortIndex}</Td>\n                  <Td>{assetAccountsWithCurrentInstitution.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentInstitution.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteInstitution(inst.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","export var root = '_2kclh';","import { Machine, assign, sendParent } from 'xstate';\n\ninterface FetchSchema {\n  states: {\n    idle: {};\n    loading: {};\n    success: {};\n    failure: {};\n    fatal: {};\n  };\n}\n\ninterface FetchContext {\n  url: string;\n  data: any;\n  error: any;\n  retries: number;\n  maxRetries: number;\n}\n\ntype FetchEvent = { type: 'FETCH' } | { type: 'REFETCH' } | { type: 'RETRY' };\n\nexport const fetchMachine = Machine<FetchContext, FetchSchema, FetchEvent>(\n  {\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      url: '',\n      data: null,\n      error: null,\n      retries: 0,\n      maxRetries: 3,\n    },\n    states: {\n      idle: {\n        on: {\n          FETCH: 'loading',\n        },\n      },\n      loading: {\n        invoke: {\n          src: 'fetch',\n          onDone: {\n            target: 'success',\n            actions: ['setData', 'notifyData', sendParent('LOADED')],\n          },\n          onError: {\n            target: 'failure',\n            actions: ['setError', 'notifyError'],\n          },\n        },\n      },\n      success: {\n        on: {\n          REFETCH: {\n            target: 'loading',\n            actions: 'resetRetries',\n          },\n        },\n      },\n      failure: {\n        on: {\n          '': {\n            target: 'fatal',\n            cond: 'canNotRetry',\n          },\n          RETRY: {\n            target: 'loading',\n            actions: 'incrementRetries',\n          },\n        },\n      },\n      fatal: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      canNotRetry: ({ retries, maxRetries }) => retries === maxRetries,\n    },\n    actions: {\n      setData: assign({ data: (_, event) => (event as any).data }),\n      notifyData: () => {\n        console.log('-----notifydata')\n      },\n\n      setError: assign({ error: (_, event) => (event as any).data }),\n      notifyError: () => {},\n\n      incrementRetries: assign({ retries: context => context.retries + 1 }),\n      // resetRetries: assign({ retries: 0 }),\n    },\n    services: {\n      fetch: context =>\n        fetch(context.url)\n          .then(response => response.json())\n          .then(json => json),\n    },\n  }\n);\n","import { Machine, assign, spawn, send } from 'xstate';\nimport { customAlphabet } from 'nanoid';\nimport low, { LowdbSync } from 'lowdb';\nimport Memory from 'lowdb/adapters/Memory';\n\nimport { fetchMachine } from './fetch';\nimport { fintrack } from '../../typings/fintrack';\n\nconst nonAmbiquousChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ123456789';\nconst nanoid = customAlphabet(nonAmbiquousChars, 6);\n\nconst localDateStringToUtcTimestamp = (date: string): number => {\n  const localDate = new Date(date);\n  const utcTimestamp = Date.UTC(\n    localDate.getFullYear(),\n    localDate.getMonth(),\n    localDate.getDate()\n  );\n  return utcTimestamp;\n};\n\ninterface StoreSchema {\n  states: {\n    idle: {};\n    loaded: {};\n    loaded_from_input: {};\n    saving: {};\n    updating_data: {};\n    // saved: {};\n  };\n}\n\ninterface StoreContext {\n  db: LowdbSync<fintrack.JSONShape> | null;\n  // data: fintrack.JSONShape | null;\n  // fetchMachine: StateMachine<FetchContext, FetchSchema, FetchEvent, any> | null;\n  fetchRef: any;\n  urlDataToSave: string | undefined;\n}\n\ntype EventUpdateDataBase = {\n  type: 'UPDATE_DATA';\n  actionType: 'delete' | 'create' | 'update';\n};\n\ntype EventUpdateDataCreateCommon = {\n  entity: 'institutions' | 'assets' | 'assetAccounts' | 'reports';\n  data: any;\n};\n\ntype EventUpdateDataCreateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'create';\n  data: {\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'update';\n  data: {\n    reportId: fintrack.ID;\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateDataUpdateExchangeRate = {\n  entity: 'exchangeRates';\n  actionType: 'update';\n  data: {\n    asset: fintrack.Asset;\n    report: fintrack.Report;\n    value: string;\n    // date: Date;\n    // assetAccountStates: fintrack.AssetAccountState[];\n  };\n};\n\ntype EventUpdateData =\n  | (EventUpdateDataBase & EventUpdateDataCreateCommon)\n  | (EventUpdateDataBase & EventUpdateDataCreateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateExchangeRate);\n\ntype LoadFromInput = {\n  type: 'LOAD_FROM_INPUT';\n  data: fintrack.JSONShape;\n};\n\nexport type StoreEvent =\n  | { type: 'LOAD'; data: fintrack.JSONShape }\n  | LoadFromInput\n  | {\n      type: 'LOADED';\n    }\n  | { type: 'SAVE' }\n  | { type: 'SAVED' }\n  | EventUpdateData;\n\n// {\n//   context: {\n//     url: shouldFetchFail ? 'https://non-existent-url' : '/data.json',\n//     maxRetries: 4,\n//   },\n// }\n\nexport const storeMachine = Machine<StoreContext, StoreSchema, StoreEvent>({\n  key: 'store',\n  initial: 'idle',\n  context: {\n    db: null,\n    // data: null,\n    urlDataToSave: undefined,\n    // fetchMachine: null,\n    fetchRef: null,\n  },\n  entry: assign({\n    fetchRef: () =>\n      spawn(\n        fetchMachine.withContext({\n          url: '/data.json',\n          maxRetries: 4,\n          data: null,\n          error: null,\n          retries: 0,\n        }),\n        {\n          name: 'fetch',\n        }\n      ),\n    // TODO any\n  }) as any,\n  states: {\n    idle: {\n      on: {\n        LOAD: {\n          actions: send('FETCH', {\n            to: 'fetch',\n          }),\n        },\n        LOADED: 'loaded',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    loaded: {\n      entry: assign((ctx, e) => {\n        if (ctx.urlDataToSave !== undefined) {\n          window.URL.revokeObjectURL(ctx.urlDataToSave);\n        }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(ctx.fetchRef._state.context.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n      },\n    },\n    loaded_from_input: {\n      entry: assign((ctx, e: LoadFromInput) => {\n        console.log('=========loaded_from_input', e);\n        // if (ctx.urlDataToSave !== undefined) {\n        //   window.URL.revokeObjectURL(ctx.urlDataToSave);\n        // }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(e.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    saving: {\n      entry: assign((ctx, e) => {\n        console.log('-=====ctx.data', ctx.db?.getState());\n        return {\n          urlDataToSave: window.URL.createObjectURL(\n            new Blob([JSON.stringify(ctx.db?.getState(), null, 2)], {\n              type: 'text/plain',\n            })\n          ),\n        };\n      }),\n      on: {\n        SAVED: 'loaded',\n      },\n      // invoke: {\n      //   src: 'saver',\n      //   onDone: 'saved',\n      //   onError: 'saved',\n      // }\n    },\n    updating_data: {\n      entry: assign((ctx, e: EventUpdateData) => {\n        if (e.actionType === 'create') {\n          if (e.entity === 'assetAccountStates') {\n            const reportId = nanoid();\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .push({\n                id: reportId,\n                datetime: localDateStringToUtcTimestamp(e.data.date),\n              })\n              .write();\n            e.data.assetAccountStates.forEach((aas) => {\n              ctx.db\n                ?.get('data')\n                .get('assetAccountStates')\n                .push({\n                  ...aas,\n                  reportId,\n                })\n                .write();\n            });\n          } else {\n            ctx.db\n              ?.get('data')\n              ?.get(e.entity)\n              .push({\n                id: nanoid(),\n                ...e.data,\n              })\n              .write();\n          }\n        } else if (e.actionType === 'update') {\n          if (e.entity === 'exchangeRates') {\n            const allErs = ctx.db?.get('data').get('exchangeRates');\n            const er = allErs?.find((ex) => ex.reportId === e.data.report.id);\n            if (er?.value() !== undefined) {\n              er.get('data').set(e.data.asset.id, e.data.value).write();\n            } else {\n              const newEr: fintrack.ExchangeRate = {\n                id: nanoid(),\n                reportId: e.data.report.id,\n                data: {\n                  [e.data.asset.id]: e.data.value,\n                },\n              };\n              allErs?.push(newEr).write();\n            }\n          }\n          if (e.entity === 'assetAccountStates') {\n            const allReports = ctx.db?.get('data').get('reports');\n            const report = allReports?.find((r) => r.id === e.data.reportId);\n            report\n              ?.set('datetime', localDateStringToUtcTimestamp(e.data.date))\n              .write();\n\n            let updatedAssetAccountStates: fintrack.ID[] = [];\n\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .forEach((aas) => {\n                if (aas.reportId === e.data.reportId) {\n                  aas.balance = e.data.assetAccountStates.find(\n                    (aasInner) => aasInner.assetAccountId === aas.assetAccountId\n                  )?.balance!;\n                  updatedAssetAccountStates.push(aas.assetAccountId);\n                }\n              })\n              .write();\n\n            e.data.assetAccountStates\n              .filter(\n                (aas) => !updatedAssetAccountStates.includes(aas.assetAccountId)\n              )\n              .forEach((newAas) => {\n                ctx.db\n                  ?.get('data')\n                  .get('assetAccountStates')\n                  .push({\n                    ...newAas,\n                    reportId: e.data.reportId,\n                  })\n                  .write();\n              });\n          }\n        } else if (e.actionType === 'delete') {\n          if (e.entity === 'institutions') {\n            ctx.db\n              ?.get('data')\n              .get('institutions')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assets') {\n            ctx.db\n              ?.get('data')\n              .get('assets')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assetAccounts') {\n            ctx.db\n              ?.get('data')\n              .get('assetAccounts')\n              .remove((i) => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'reports') {\n            ctx.db\n              ?.get('data')\n              .get('reports')\n              .remove((i) => i.id === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('assetAccountStates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n            ctx.db\n              ?.get('data')\n              .get('exchangeRates')\n              .remove((i) => i.reportId === e.data.id)\n              .write();\n          }\n        } else {\n          throw new Error('How did you end up here?');\n        }\n        // ctx.data?.institutions.push({\n        //   id: nanoid(),\n        //   ...e.data,\n        // });\n        // console.log(\n        //   '!!!!!!updating_data',\n        //   e.actionType,\n        //   e.type,\n        //   e.data,\n        //   ctx.db?.getState()\n        // );\n        return {};\n      }),\n      on: {\n        '': 'loaded',\n      },\n    },\n  },\n  // {\n  //   services: {\n  //     saver: context => {\n  //       var data = new Blob(['asd'], {type: 'text/plain'});\n  //       // If we are replacing a previously generated file we need to\n  //       // manually revoke the object URL to avoid memory leaks.\n  //       // if (textFile !== null) {\n  //       //   window.URL.revokeObjectURL(textFile);\n  //       // }\n  //       // textFile = window.URL.createObjectURL(data);\n\n  //       // returns a URL you can use as a href\n  //       return window.URL.createObjectURL(data);\n  //     }\n  //   }\n  // }\n});\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { ALL_ASSET_TYPES } from './constants';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { StoreEvent } from './machines/store';\nimport { getAssetAccounts } from './Home';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldClass = 'class';\nconst fieldSubclass = 'subclass';\nconst fieldName = 'name';\nconst fieldCurrency = 'currency';\n\ntype FormValues = {\n  [fieldClass]: string;\n  [fieldSubclass]: string;\n  [fieldName]: string;\n  [fieldCurrency]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const Assets: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assets',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAsset = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assets',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Assets {store?.data.assets?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={5}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>class</Th>\n              <Th>subclass</Th>\n              <Th>name</Th>\n              <Th>currency</Th>\n              <Th>asset accounts</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldClass}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_ASSET_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldSubclass}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.subclass?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldCurrency}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.currency?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store?.data.assets?.map((asset) => {\n              const assetAccountsWithCurrentAsset = getAssetAccounts(\n                store\n              )?.filter((aa) => aa.assetId === asset.id)!;\n              return (\n                <Tr key={asset.id}>\n                  <Td>{asset.id}</Td>\n                  <Td>{asset.class}</Td>\n                  <Td>{asset.subclass}</Td>\n                  <Td>{asset.name}</Td>\n                  <Td>{asset.currency}</Td>\n                  <Td>{assetAccountsWithCurrentAsset.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentAsset.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAsset(asset.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from './App';\nimport { formMachine } from './machines/form';\nimport { Table, Tr, Th, Td } from './components/Table';\nimport { getAssetAccounts } from './Home';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, any, any>;\n};\n\nconst fieldInstitutionId = 'institutionId';\nconst fieldAssetId = 'assetId';\nconst fieldName = 'name';\n\ntype FormValues = {\n  [fieldInstitutionId]: string;\n  [fieldAssetId]: string;\n  [fieldName]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const AssetAccounts: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assetAccounts',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAssetAccount = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assetAccounts',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Asset accounts {getAssetAccounts(store)?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={4}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>id</Th>\n              <Th>asset</Th>\n              <Th>institution</Th>\n              <Th>name</Th>\n              <Th>reports</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldAssetId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.assets.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.class} {v.subclass} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <select\n                  name={fieldInstitutionId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store?.data.institutions.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.type} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {getAssetAccounts(store)?.map((assetAccount) => {\n              // actually store is definitely not undefined here\n              // as `getAssetAccounts` has returned data\n              if (store === undefined) {\n                return null;\n              }\n              const assetAccountStatesWithThisAssetAccount = store?.data.assetAccountStates.filter(\n                (aas) => aas.assetAccountId === assetAccount.id\n              );\n              return (\n                <Tr key={assetAccount.id}>\n                  <Td>{assetAccount.id}</Td>\n                  <Td>\n                    {\n                      store.data.assets.find(\n                        (a) => a.id === assetAccount.assetId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>\n                    {\n                      store.data.institutions.find(\n                        (a) => a.id === assetAccount.institutionId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>{assetAccountStatesWithThisAssetAccount.length}</Td>\n                  <Td>\n                    {assetAccountStatesWithThisAssetAccount.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAssetAccount(assetAccount.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import _ from 'lodash';\nimport React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport {\n  useForm,\n  // ValidationResolver,\n  // SchemaValidationResult,\n} from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\n\n// import { superstruct, Struct } from 'superstruct';\nimport * as yup from 'yup';\n\nimport { StoreContext } from './App';\nimport { fintrack } from '../typings/fintrack';\nimport { useNavigate } from 'react-router';\nimport { StoreEvent } from './machines/store';\nimport { Table, Tr, Td } from './components/Table';\nimport { getAssetAccounts, getInstitutions } from './Home';\n// import { superstructResolver } from './react-hook-form-resolvers/superstruct';\n// import { yupResolver } from './react-hook-form-resolvers/yup';\n\n// const struct = superstruct({\n//   types: {\n//     nonEmpty: (value) => value !== '',\n//   },\n// });\n\n// const struct = superstruct({\n//   types: {\n//     assetAccountState: value => value\n//   }\n//   // id: 'number',\n//   // title: 'string',\n//   // is_published: 'boolean?',\n//   // tags: ['string'],\n//   // author: {\n//   //   id: 'number',\n//   // },\n// })\n\n// const StructAssectAccountState = struct({\n//   assetAccountStates: [\n//     {\n//       balance: 'string & nonEmpty',\n//       // institutionId: 'string',\n//       // assetId: 'string',\n//       // balance: 'string',\n//       // comment: 'string?'\n//     },\n//   ],\n// });\n\nconst yupAssectAccountState = yup.object({\n  date: yup.date().required('дата!'),\n  assetAccountStates: yup.array().of(\n    yup.object({\n      balance: yup.string().required('заполняй, сука'),\n      assetAccountId: yup.string().required('заполняй, сука'),\n      // pricePerUnit: yup.string().required('заполняй, сука'),\n    })\n  ),\n});\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\ntype FormValues = {\n  date: string;\n  assetAccountStates: fintrack.AssetAccountState[];\n  // abc: string;\n};\n\nexport const AddEditReport: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const params = useParams();\n\n  const assetAccounts = getAssetAccounts(store);\n\n  let report: fintrack.Report | undefined;\n  let assetAccountStates: fintrack.AssetAccountState[] | undefined;\n  if (params.reportId !== undefined) {\n    report = store?.data.reports.find((r) => r.id === params.reportId);\n    const nonSortedAssetAccountStates = store?.data.assetAccountStates.filter(\n      (r) => r.reportId === report?.id\n    );\n    assetAccountStates = _.sortBy(nonSortedAssetAccountStates, (aas) => {\n      return assetAccounts?.findIndex((aa) => aa.id === aas.assetAccountId);\n    });\n  }\n\n  const form = useForm<FormValues>({\n    // validationResolver: superstructResolver(StructAssectAccountState),\n    // validationResolver: yupResolver(yupAssectAccountState),\n    validationSchema: yupAssectAccountState,\n    defaultValues: {\n      date: report?.datetime\n        ? new Date(report.datetime).toISOString().substr(0, 10)\n        : new Date().toISOString().substr(0, 10),\n      assetAccountStates,\n    },\n    // validationContext: {\n    //   'x': 'asd'\n    // }\n  });\n\n  const navigate = useNavigate();\n\n  const latestReportId = _.maxBy(store?.data.reports, (r) => r.datetime)?.id;\n  const latestAssetAccountStates = store?.data.assetAccountStates.filter(\n    (aas) => aas.reportId === latestReportId\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('=====values', values.date, values);\n    if (report === undefined) {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'create',\n        entity: 'assetAccountStates',\n        data: values,\n      });\n    } else {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'update',\n        entity: 'assetAccountStates',\n        data: {\n          reportId: report.id,\n          ...values,\n        },\n      });\n    }\n    navigate('/');\n  };\n\n  // const { fields, append, prepend, remove } = useFieldArray({\n  //   control: form.control,\n  //   name: 'items',\n  // });\n\n  // useEffect(() => {\n  //   append({ })\n  // }, [store?.assetAccounts])\n\n  // console.log('====form.errors', form.errors.assetAccountStates?.[0].balance);\n  // console.log('====', yupAssectAccountState.fields);\n  // console.log('==== err', form.getValues(), form.errors);\n\n  return (\n    <div>\n      <h1>Add report</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <input type=\"date\" name=\"date\" ref={form.register} />\n        {form.errors.date?.message}\n        <br />\n        <br />\n\n        <Table>\n          <thead>\n            <Tr>\n              <Td></Td>\n              <Td>New balance</Td>\n              <Td>Prev balance</Td>\n            </Tr>\n          </thead>\n          <tbody>\n            {assetAccounts?.map((assetAccount, index) => {\n              const renderInstitutionHeader =\n                index === 0 ||\n                assetAccounts[index].institutionId !==\n                  assetAccounts[index - 1].institutionId;\n              const rowWithHeader = !renderInstitutionHeader ? null : (\n                <Tr key={`header${assetAccount.id}`}>\n                  <Td colspan={3}>\n                    <h3>\n                      {\n                        getInstitutions(store)?.find(\n                          (i) => i.id === assetAccount.institutionId\n                        )?.name\n                      }\n                    </h3>\n                  </Td>\n                </Tr>\n              );\n              const rowWithData = (\n                <Tr key={`data${assetAccount.id}`}>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>\n                    <input\n                      name={`assetAccountStates[${index}].balance`}\n                      ref={form.register}\n                    />\n                    <input\n                      type=\"hidden\"\n                      name={`assetAccountStates[${index}].assetAccountId`}\n                      ref={form.register}\n                      value={assetAccount.id}\n                    />\n                    {form.errors.assetAccountStates?.[index]?.balance &&\n                      (form.errors.assetAccountStates?.[index]?.balance as any)\n                        .message}\n                  </Td>\n                  <Td>\n                    {\n                      latestAssetAccountStates?.find(\n                        (laas) => laas.assetAccountId === assetAccount.id\n                      )?.balance\n                    }\n                  </Td>\n                </Tr>\n              );\n              return (\n                <React.Fragment>\n                  {rowWithHeader}\n                  {rowWithData}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </Table>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\n// import { ResponsiveBump, BumpInputSerie } from '@nivo/bump';\nimport { ResponsiveLine, Serie } from '@nivo/line';\nimport { ResponsiveStream } from '@nivo/stream';\nimport { isWithinInterval, addYears } from 'date-fns';\nimport { addMonths } from 'date-fns/esm';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport _ from 'lodash';\n\nimport { StoreContext } from './App';\nimport { getTotalForReport } from './Home';\nimport { fintrack } from '../typings/fintrack';\n\nexport const Charts: React.FC = () => {\n  const store = useContext(StoreContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const currencies: fintrack.Currency[] = ['USD', 'EUR', 'RUB'];\n\n  const fromSearchParam = searchParams.get('yearsBack');\n  const pastYear: Interval = {\n    // should be last report date and not now\n    start: addMonths(\n      addYears(new Date(), -1 * parseInt(fromSearchParam ?? '0', 10)),\n      -2\n    ),\n    end: new Date(),\n  };\n\n  const reports = store?.data.reports.filter((r) =>\n    fromSearchParam !== null ? isWithinInterval(r.datetime, pastYear) : true\n  );\n\n  const data1: Serie[] = currencies.map((currency) => {\n    const allReportsInCurrency = _.compact(\n      reports?.map((report) => {\n        const d = new Date(report.datetime);\n        const x =\n          d.getUTCFullYear() +\n          '-' +\n          _.padStart(String(d.getUTCMonth() + 1), 2, '0') +\n          '-' +\n          d.getUTCDate();\n        console.log(\n          '=====d.getUTCMonth() === 1',\n          d.getUTCMonth() === 1,\n          getTotalForReport(store, report, currency),\n          x\n        );\n\n        // if (d.getUTCMonth() !== 1 && d.getUTCMonth() !== 7) {\n        //   return;\n        // }\n        return {\n          // x: report.datetime,\n          x,\n          // x: '2018-01',\n          y: (\n            getTotalForReport(\n              store,\n              report,\n              currency,\n              (a) => a.name === currency\n            ) || 0\n          ).toFixed(0),\n        };\n      })\n    );\n    console.log('====allReportsInCurrency', allReportsInCurrency);\n    return {\n      id: currency,\n      data: allReportsInCurrency || [],\n    };\n  });\n\n  const data3: Serie[] = currencies.map((currency) => {\n    const allReportsInCurrency = _.compact(\n      reports?.map((report) => {\n        const d = new Date(report.datetime);\n        const x =\n          d.getUTCFullYear() +\n          '-' +\n          _.padStart(String(d.getUTCMonth() + 1), 2, '0') +\n          '-' +\n          d.getUTCDate();\n        console.log(\n          '=====d.getUTCMonth() === 1',\n          d.getUTCMonth() === 1,\n          getTotalForReport(store, report, currency),\n          x\n        );\n\n        // if (d.getUTCMonth() !== 1 && d.getUTCMonth() !== 7) {\n        //   return;\n        // }\n        return {\n          // x: report.datetime,\n          x,\n          // x: '2018-01',\n          y: (\n            (getTotalForReport(\n              store,\n              report,\n              currency,\n              (a) => a.name === currency\n            )! / getTotalForReport(store, report, currency)! || 0) * 100\n          ).toFixed(0),\n        };\n      })\n    );\n    console.log('====allReportsInCurrency', allReportsInCurrency);\n    return {\n      id: currency,\n      data: allReportsInCurrency || [],\n    };\n  });\n\n  console.log({ data1 });\n\n  const totalForCurrency = (currencyIdx: any) => {\n    return (\n      <ResponsiveLine\n        animate={false}\n        data={[data1[currencyIdx]]}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          // precision: 'month',\n          // useUTC: true,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          // type: 'log',\n          // base: 8,\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          stacked: true,\n          // reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          format: '%Y %m',\n          tickValues: 'every 4 months',\n          legend: 'время',\n          legendOffset: -12,\n        }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n        }}\n        // colors={{ scheme: 'nivo' }}\n        pointSize={0}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        enableSlices=\"x\"\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n        sliceTooltip={({ slice }) => {\n          console.log('------slice', slice);\n          return (\n            <div\n              style={{\n                background: 'white',\n                padding: '9px 12px',\n                border: '1px solid #ccc',\n              }}\n            >\n              <div>{slice.points[0].data.xFormatted}</div>\n              {slice.points.map((point) => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: '3px 0',\n                  }}\n                >\n                  <strong>{point.serieId}</strong> {point.data.yFormatted}\n                </div>\n              ))}\n            </div>\n          );\n        }}\n      />\n    );\n  };\n\n  return (\n    <div style={{ height: 300 }}>\n      <h1>Charts</h1>\n      <h6>\n        <Link to=\"?yearsBack=1\">1 year</Link> |{' '}\n        <Link to=\"?yearsBack=2\">2 year</Link> | <Link to=\".\">all</Link>\n      </h6>\n      <div style={{ width: '100%', height: 300, display: 'flex' }}>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(0)}</div>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(1)}</div>\n        <div style={{ width: '33%', height: 300 }}>{totalForCurrency(2)}</div>\n      </div>\n\n      <ResponsiveLine\n        animate={false}\n        data={data3}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n          type: 'time',\n          format: '%Y-%m-%d',\n          // precision: 'month',\n          // useUTC: true,\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n          // type: 'log',\n          // base: 8,\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          // stacked: true,\n          // reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          format: '%Y %m',\n          tickValues: 'every 4 months',\n          legend: 'время',\n          legendOffset: -12,\n        }}\n        // axisBottom={{\n        //   orient: 'bottom',\n        //   tickSize: 5,\n        //   tickPadding: 5,\n        //   tickRotation: 0,\n        //   legend: 'date',\n        //   legendOffset: 36,\n        //   legendPosition: 'middle',\n        // }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: '%',\n          legendOffset: -50,\n          legendPosition: 'middle',\n        }}\n        // colors={{ scheme: 'nivo' }}\n        pointSize={4}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        enableSlices=\"x\"\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n        sliceTooltip={({ slice }) => {\n          console.log('------slice', slice);\n          return (\n            <div\n              style={{\n                background: 'white',\n                padding: '9px 12px',\n                border: '1px solid #ccc',\n              }}\n            >\n              <div>{slice.points[0].data.xFormatted}</div>\n              {slice.points.map((point) => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: '3px 0',\n                  }}\n                >\n                  <strong>{point.serieId}</strong> {point.data.yFormatted}%\n                </div>\n              ))}\n            </div>\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React, { useEffect } from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport _ from 'lodash';\nimport { AppBar } from '@material-ui/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    text: {\n      padding: theme.spacing(2, 2, 0),\n    },\n    paper: {\n      paddingBottom: 50,\n    },\n    list: {\n      marginBottom: theme.spacing(2),\n    },\n    subheader: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n    // list: {\n    //   width: 250,\n    // },\n    fullList: {\n      width: 'auto',\n    },\n  })\n);\n\nconst locations = {\n  0: 'assets',\n  1: 'asset-accounts',\n  2: 'charts',\n  3: 'institutions',\n} as const;\n\ntype Locations = keyof typeof locations;\nconst locs = _.values(locations);\n\nexport const BottomAppBar: React.FC = () => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  const [value, setValue] = React.useState<Locations | undefined>(undefined);\n\n  useEffect(() => {\n    if (!locs.some((l, idx) => location.pathname.startsWith('/' + l))) {\n      setValue(undefined);\n    }\n    const idx = locs.findIndex(l => location.pathname.startsWith('/' + l));\n    if (idx !== -1) {\n      setValue(idx as Locations);\n    }\n\n  }, [location.pathname, value]);\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          console.log({ event, newValue });\n          setValue(newValue);\n        }}\n        showLabels\n      >\n        <BottomNavigationAction\n          component={Link}\n          to=\"assets\"\n          label=\"Assets\"\n          icon={<MenuIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"asset-accounts\"\n          label=\"Asset accounts\"\n          icon={<RestoreIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"charts\"\n          label=\"Charts\"\n          icon={<FavoriteIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"institutions\"\n          label=\"Institutions\"\n          icon={<LocationOnIcon />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport { useMachine } from '@xstate/react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport * as styles from './App.treat';\nimport { Insitutions } from './Insitutions';\n// import { fetchMachine } from './machines/fetch';\nimport { storeMachine } from './machines/store';\nimport { fintrack } from '../typings/fintrack';\nimport { Assets } from './Assets';\nimport { AssetAccounts } from './AssetAccounts';\nimport { AddEditReport } from './AddReport';\nimport { Home } from './Home';\nimport { Charts } from './Charts';\nimport { BottomAppBar } from './BottomAppBar';\n\nexport const StoreContext = React.createContext<fintrack.JSONShape | undefined>(\n  undefined\n);\n\nconst App: React.FC = () => {\n  const [state1, send, storeService] = useMachine(storeMachine, {\n    devTools: true,\n  });\n  // const [state, send] = useMachine(fetchMachine, {\n  //   context: {\n  //     url: shouldFetchFail ? 'https://non-existent-url' : '/data.json',\n  //     maxRetries: 4,\n  //   },\n  // });\n\n  // useEffect(() => {\n  //   send('LOAD');\n  // }, [send]);\n\n  // useEffect(() => {\n  //   if (state.matches('failure')) {\n  //     send('RETRY');\n  //   }\n  // }, [state, send]);\n\n  console.log('-----!!', state1.value, state1.context.db?.getState());\n\n  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // console.log(\n    //   '-----e.target.files[0]',\n\n    // );\n    var reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files![0]);\n\n    function onReaderLoad(event: ProgressEvent<FileReader>) {\n      console.log(event.target!.result);\n      var obj = JSON.parse(event.target!.result as string);\n      // alert_data(obj.name, obj.family);\n      send('LOAD_FROM_INPUT', {\n        data: obj,\n      });\n    }\n\n    // e.target.files![0].text().then((v) => {\n    //   console.log('------v', v);\n    //   send('LOAD_FROM_INPUT', {\n    //     data: JSON.parse(v),\n    //   });\n    // });\n    // this.setState({ ...this.state, [e.target.name]: e.target.files[0] });\n  };\n\n  return (\n    <StoreContext.Provider value={state1.context.db?.getState()}>\n      <BrowserRouter>\n        <React.Fragment>\n          <CssBaseline />\n\n          <div className={styles.root}>\n            <div className={styles.nav}>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"charts\">Charts</Link>\n                </li>\n                <li>\n                  <Link to=\"institutions\">Institutions</Link>\n                </li>\n                <li>\n                  <Link to=\"assets\">Assets</Link>\n                </li>\n                <li>\n                  <Link to=\"asset-accounts\">Asset accounts</Link>\n                </li>\n                <li>\n                  <Link to=\"add-edit-report\">Add report</Link>\n                </li>\n              </ul>\n              <button\n                onClick={() => {\n                  send('SAVE');\n                }}\n              >\n                prepare data\n              </button>\n              {state1.matches('saving') && (\n                <a\n                  href={state1.context.urlDataToSave}\n                  download=\"fintrack.json\"\n                  onClick={() => {\n                    setTimeout(() => {\n                      send('SAVED');\n                    }, 100);\n                  }}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  download\n                </a>\n              )}\n              <input type=\"file\" onChange={handleFile} />\n            </div>\n            <div className={styles.content}>\n              <Routes>\n                <Route path=\"charts\" element={<Charts />} />\n                <Route\n                  path=\"institutions\"\n                  element={<Insitutions storeService={storeService} />}\n                />\n                <Route\n                  path=\"assets\"\n                  element={<Assets storeService={storeService} />}\n                />\n                <Route\n                  path=\"asset-accounts\"\n                  element={<AssetAccounts storeService={storeService} />}\n                />\n                <Route\n                  path=\"add-edit-report/:reportId\"\n                  element={<AddEditReport storeService={storeService} />}\n                />\n                <Route\n                  path=\"add-edit-report\"\n                  element={<AddEditReport storeService={storeService} />}\n                />\n                <Route element={<Home storeService={storeService} />} />\n              </Routes>\n            </div>\n          </div>\n          <BottomAppBar />\n        </React.Fragment>\n      </BrowserRouter>\n    </StoreContext.Provider>\n  );\n};\n\nexport default App;\n","import \"!../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./App.treat.ZdV9c64.css\";\nexport var root = '_3QqL3';\nexport var nav = '_3m8Iv';\nexport var content = '_2KOUX';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}