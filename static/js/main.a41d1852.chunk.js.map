{"version":3,"sources":["machines/fetch.ts","machines/store.ts","components/Table.tsx","components/Table.treat.ts","constants.ts","utils.ts","Home.tsx","components/charts/utils.tsx","components/charts/NWValuationInCurrenciesTimelineChart.tsx","components/charts/NWValuationDiffInCurrenciesTimelineChart.tsx","components/charts/NWValuationAllocationChart.tsx","components/charts/AssetClassValuationAllocationPieCharts.tsx","components/charts/AllocationTimelineCharts.tsx","components/charts/Charts.tsx","components/BottomAppBar.tsx","components/ContentContainer.tsx","Insitutions.tsx","machines/form.ts","AssetAccounts.tsx","Assets.tsx","components/TopAppBar.tsx","components/forms/SubmitButton.tsx","AddReport.tsx","components/forms/DeleteButton.tsx","AddEditInstitution.tsx","InstitutionsSort.tsx","AssetsAndReports.tsx","ImportExport.tsx","ThemeProvider.tsx","App.tsx","App.treat.ts","serviceWorker.ts","index.tsx"],"names":["fetchMachine","Machine","id","initial","context","url","data","error","retries","maxRetries","states","idle","on","FETCH","loading","invoke","src","onDone","target","actions","sendParent","onError","success","REFETCH","failure","cond","RETRY","fatal","type","guards","canNotRetry","setData","assign","_","event","notifyData","console","log","setError","notifyError","incrementRetries","services","fetch","then","response","json","nanoid","customAlphabet","initDbState","settings","alphaVantageToken","institutions","assets","assetAccounts","assetAccountStates","reports","exchangeRates","localDateStringToUtcTimestamp","date","localDate","Date","UTC","getFullYear","getMonth","getDate","initDb","low","Memory","setState","storeMachine","key","db","urlDataToSave","undefined","fetchRef","entry","spawn","withContext","name","init","ctx","e","ssDbState","sessionStorage","getItem","dbData","JSON","parse","LOAD","send","to","LOADED","UPDATE_DATA","LOAD_FROM_INPUT","loaded","window","URL","revokeObjectURL","_state","SAVE","loaded_from_input","setItem","stringify","saving","createObjectURL","Blob","getState","SAVED","updating_data","actionType","entity","reportId","get","push","datetime","write","forEach","aas","allReports","report","find","r","set","updatedAssetAccountStates","balance","aasInner","assetAccountId","filter","includes","newAas","er","allInsts","inst","i","Error","remove","Table","children","className","Tr","Td","colspan","colSpan","Th","ALL_ASSET_TYPES","ALL_INSTITUTION_TYPES","ACCOUNTING_MONEY_FORMAT","formatMoney","amount","symbol","format","accounting","getNonZeroAssetClasses","store","assetFilterFunction","mode","classes","accState","parseFloat","balanceMatches","account","aa","asset","a","assetId","class","uniq","getTotalForReport","targetCurrency","accountStateFilterFunction","reduce","acc","currAccountState","erData","Big","isBaseAssetACurrency","currencyAsset","currency","erToBaseCurrency","currencyAssetToBase","eq","div","mul","getExchangeRate","plus","getInstitutions","sortBy","sortIndex","getAssetAccounts","flatMap","institutionId","Home","props","useContext","StoreContext","userConfig","UserConfigContext","sortedReports","Fab","color","aria-label","component","Link","style","margin","top","right","bottom","left","position","Add","map","length","reportCurrencies","reportCurrency","Button","variant","size","toISOString","substr","Fragment","toFixed","IconButton","onClick","storeService","Delete","configureTimelineChart","chart","createValueAxis","paddingRight","dateAxis","xAxes","am4charts","renderer","minGridDistance","axisFills","template","disabled","fill","am4core","fillOpacity","dateFormats","setKey","periodChangeDateFormats","valueAxis","yAxes","minWidth","cursor","xAxis","fullWidthLineX","lineX","strokeWidth","scrollbarX","legend","NWInCurrenciesTimelineChart","stacked","containerId","currencies","ReportCurrencyContext","dataPerCurrency","totalsInCurrency","compact","value","category","points","useEffect","dataPerCategory","chartTitle","titles","text","fontSize","seriesData","index","series","dataFields","dateX","valueY","tooltipText","bullets","tensionX","yAxis","line","strokeOpacity","stroke","grid","labels","align","marginBottom","marginTop","leftAxesContainer","layout","createValuePerCategoryTimelineChart","dispose","width","height","NWDiffInCurrenciesTimelineChart","valueYShow","bullet","range","createSeriesRange","endValue","contents","createChart","NWValuationAllocationChart","lastReport","maxBy","assetClasses","klass","valuationAssets","valueOf","valuationLiabilities","hasLiabilities","sum","el","title","categoryAxis","inversed","location","cellStartLocation","cellEndLocation","createSeries","field","valueX","categoryY","columns","column","cornerRadiusBottomRight","cornerRadiusTopRight","cornerRadiusBottomLeft","cornerRadiusTopLeft","valueLabel","label","horizontalCenter","dx","hideOversized","truncate","ticks","extraMax","extraMin","numberFormatter","numberFormat","interfaceColors","positiveColor","getFor","negativeColor","AssetClassValuationAllocationPieCharts","assetClass","AssetClassValuationAllocationChart","names","getNonZeroAssetClassNames","assetName","totalInBaseCurrency","baseCurrency","innerRadius","slices","createData","valueProcessingFunction","totalsPerAssetClass","totalInAssetClass","result","t","createStackedChart","calculateTotals","seriesNames","keys","k","NWHistory","d","hasAnyNegativeNW","nw","hasAnyPositiveNW","seriesName","NWValuationAllocationStackedTimelineChart","AssetsValuationAllocationStackedTimelineChart","LiabilitiesValuationAllocationStackedTimelineChart","Math","abs","am4themes_animated","am4themes_material","ChartsRoot","defaultReportCurreny","useState","setReportCurrency","onChange","cur","Provider","Charts","assetClassesNum","assetsNum","liabilitiesNum","nwValuationAllocationTimelineBlock","display","assetsOrLiabilitiesAllocationTimelineBlockStyle","assetsAllocationTimelineBlock","liabilitiesAllocationTimelineBlock","useStyles","makeStyles","theme","createStyles","padding","spacing","paper","paddingBottom","list","subheader","backgroundColor","palette","background","appBar","grow","flexGrow","fabButton","zIndex","fullList","locs","values","0","1","2","doesMatch","l","pathname","startsWith","BottomAppBar","useLocation","React","setValue","some","idx","findIndex","AppBar","BottomNavigation","newValue","BottomNavigationAction","icon","root","breakpoints","down","up","ContentContainer","Insitutions","Grid","container","item","startIcon","Sort","stickyHeader","TableHead","TableRow","TableCell","TableBody","assetAccountsWithCurrentInstitution","hover","formMachine","SUBMIT","validating","submitting","form","getValues","submitted","AssetAccounts","useForm","useMachine","devTools","formMachineState","formMachineSend","matches","onSubmit","handleSubmit","ref","register","required","v","subclass","errors","message","assetAccount","assetAccountStatesWithThisAssetAccount","Assets","assetAccountsWithCurrentAsset","TopAppBar","Tabs","scrollButtons","Tab","SubmitButton","Save","AddEditReport","params","useParams","nonSortedAssetAccountStates","foundAas","comment","assetIdsSchema","yup","yupAssectAccountState","of","validationSchema","defaultValues","navigate","useNavigate","nowTimestmap","getTime","prevReport","prevAssetAccountStates","prevExRates","exr","rowWithHeader","prevAssetAccountBalance","laas","prevAssetExRate","exchangeRateForThisAssetWasAbove","slice","watchExchangeRate","watch","rowWithData","as","TextField","InputLabelProps","shrink","disableAnimation","InputProps","endAdornment","Restore","control","helperText","Boolean","DeleteButton","DeleteForever","yupInstitution","AddEditInstitution","validateSync","direction","Typography","Select","MenuItem","placeholder","SortableItem","SortableElement","ListItem","ContainerComponent","ListItemText","primary","ListItemSecondaryAction","SortableContainer1","SortableContainer","List","InstitutionsSort","items","setItems","onSortEnd","sort","newArr","arrayMove","oldIndex","newIndex","AssetsAndReports","path","element","ImportExport","state1","state","content","file","reader","FileReader","onload","link","document","createElement","setAttribute","body","appendChild","click","readAsDataURL","download","obj","readAsText","files","ThemeProvider","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","xs","sm","md","lg","xl","typography","h1","h2","h3","main","blue","secondary","deepOrange","CssBaseline","createContext","App","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a41d1852.chunk.js","sourcesContent":["import { Machine, assign, sendParent } from 'xstate';\n\ninterface FetchSchema {\n  states: {\n    idle: {};\n    loading: {};\n    success: {};\n    failure: {};\n    fatal: {};\n  };\n}\n\ninterface FetchContext {\n  url: string;\n  data: any;\n  error: any;\n  retries: number;\n  maxRetries: number;\n}\n\ntype FetchEvent = { type: 'FETCH' } | { type: 'REFETCH' } | { type: 'RETRY' };\n\nexport const fetchMachine = Machine<FetchContext, FetchSchema, FetchEvent>(\n  {\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      url: '',\n      data: null,\n      error: null,\n      retries: 0,\n      maxRetries: 3,\n    },\n    states: {\n      idle: {\n        on: {\n          FETCH: 'loading',\n        },\n      },\n      loading: {\n        invoke: {\n          src: 'fetch',\n          onDone: {\n            target: 'success',\n            actions: ['setData', 'notifyData', sendParent('LOADED')],\n          },\n          onError: {\n            target: 'failure',\n            actions: ['setError', 'notifyError'],\n          },\n        },\n      },\n      success: {\n        on: {\n          REFETCH: {\n            target: 'loading',\n            actions: 'resetRetries',\n          },\n        },\n      },\n      failure: {\n        on: {\n          '': {\n            target: 'fatal',\n            cond: 'canNotRetry',\n          },\n          RETRY: {\n            target: 'loading',\n            actions: 'incrementRetries',\n          },\n        },\n      },\n      fatal: {\n        type: 'final',\n      },\n    },\n  },\n  {\n    guards: {\n      canNotRetry: ({ retries, maxRetries }) => retries === maxRetries,\n    },\n    actions: {\n      setData: assign({ data: (_, event) => (event as any).data }),\n      notifyData: () => {\n        console.log('-----notifydata')\n      },\n\n      setError: assign({ error: (_, event) => (event as any).data }),\n      notifyError: () => {},\n\n      incrementRetries: assign({ retries: context => context.retries + 1 }),\n      // resetRetries: assign({ retries: 0 }),\n    },\n    services: {\n      fetch: context =>\n        fetch(context.url)\n          .then(response => response.json())\n          .then(json => json),\n    },\n  }\n);\n","import { Machine, assign, spawn, send } from 'xstate';\nimport { customAlphabet } from 'nanoid';\nimport low, { LowdbSync } from 'lowdb';\nimport Memory from 'lowdb/adapters/Memory';\n\nimport { fetchMachine } from 'src/machines/fetch';\nimport { fintrack } from 'typings/fintrack';\n\nconst nonAmbiquousChars = 'ABCDEFGHJKLMNPQRSTUVWXYZ123456789';\nconst nanoid = customAlphabet(nonAmbiquousChars, 6);\n\n// TODO should not be exported from here and leak state\nexport const initDbState: fintrack.JSONShape = {\n  settings: {\n    alphaVantageToken: '',\n  },\n  data: {\n    institutions: [],\n    assets: [],\n    assetAccounts: [],\n    assetAccountStates: [],\n    reports: [],\n    exchangeRates: [],\n  },\n};\n\nconst sessionStorageVarName = 'fintrack_db';\n\nconst localDateStringToUtcTimestamp = (date: string): number => {\n  const localDate = new Date(date);\n  const utcTimestamp = Date.UTC(\n    localDate.getFullYear(),\n    localDate.getMonth(),\n    localDate.getDate()\n  );\n  return utcTimestamp;\n};\n\ninterface StoreSchema {\n  states: {\n    init: {};\n    idle: {};\n    loaded: {};\n    loaded_from_input: {};\n    saving: {};\n    updating_data: {};\n    // saved: {};\n  };\n}\n\nexport interface StoreContext {\n  db: LowdbSync<fintrack.JSONShape>;\n  // data: fintrack.JSONShape | null;\n  // fetchMachine: StateMachine<FetchContext, FetchSchema, FetchEvent, any> | null;\n  fetchRef: any;\n  urlDataToSave: string | undefined;\n}\n\ntype EventUpdateDataBase = {\n  type: 'UPDATE_DATA';\n  actionType: 'delete' | 'create' | 'update';\n};\n\ntype EventUpdateDataCreateCommon = {\n  entity: 'institutions' | 'assets' | 'assetAccounts' | 'reports';\n  data: any;\n};\n\ntype EventUpdateDataCreateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'create';\n  data: {\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n    exchangeRates: fintrack.ExchangeRateData;\n  };\n};\n\ntype EventUpdateDataUpdateAssetAccountStates = {\n  entity: 'assetAccountStates';\n  actionType: 'update';\n  data: {\n    reportId: fintrack.ID;\n    date: string;\n    assetAccountStates: fintrack.AssetAccountState[];\n    exchangeRates: fintrack.ExchangeRateData;\n  };\n};\n\n// type EventUpdateDataUpdateExchangeRate = {\n//   entity: 'exchangeRates';\n//   actionType: 'update';\n//   data: {\n//     asset: fintrack.Asset;\n//     report: fintrack.Report;\n//     value: string;\n//     // date: Date;\n//     // assetAccountStates: fintrack.AssetAccountState[];\n//   };\n// };\n\ntype EventUpdateData =\n  | (EventUpdateDataBase & EventUpdateDataCreateCommon)\n  | (EventUpdateDataBase & EventUpdateDataCreateAssetAccountStates)\n  | (EventUpdateDataBase & EventUpdateDataUpdateAssetAccountStates);\n// | (EventUpdateDataBase & EventUpdateDataUpdateExchangeRate);\n\ntype LoadFromInput = {\n  type: 'LOAD_FROM_INPUT';\n  data: fintrack.JSONShape;\n};\n\nexport type StoreEvent =\n  | { type: 'LOAD'; data: fintrack.JSONShape }\n  | LoadFromInput\n  | {\n      type: 'LOADED';\n    }\n  | { type: 'SAVE' }\n  | { type: 'SAVED' }\n  | EventUpdateData;\n\n// {\n//   context: {\n//     url: shouldFetchFail ? 'https://non-existent-url' : '/data.json',\n//     maxRetries: 4,\n//   },\n// }\n\nconst initDb = low(new Memory<fintrack.JSONShape>(''));\ninitDb.setState(initDbState);\n\nexport const storeMachine = Machine<StoreContext, StoreSchema, StoreEvent>({\n  key: 'store',\n  initial: 'init',\n  context: {\n    db: initDb,\n    // data: null,\n    urlDataToSave: undefined,\n    // fetchMachine: null,\n    fetchRef: null,\n  },\n  entry: assign({\n    fetchRef: () =>\n      spawn(\n        fetchMachine.withContext({\n          url: '/data.json',\n          maxRetries: 4,\n          data: null,\n          error: null,\n          retries: 0,\n        }),\n        {\n          name: 'fetch',\n        }\n      ),\n    // TODO any\n  }) as any,\n  states: {\n    init: {\n      entry: assign((ctx, e) => {\n        const ssDbState = sessionStorage.getItem(sessionStorageVarName);\n        if (ssDbState === null) {\n          return {};\n        }\n        const dbData: fintrack.JSONShape = JSON.parse(ssDbState);\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(dbData);\n        return {\n          db,\n        };\n      }),\n      on: {\n        '': 'idle',\n      },\n    },\n    idle: {\n      on: {\n        LOAD: {\n          actions: send('FETCH', {\n            to: 'fetch',\n          }),\n        },\n        LOADED: 'loaded',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    loaded: {\n      entry: assign((ctx, e) => {\n        if (ctx.urlDataToSave !== undefined) {\n          window.URL.revokeObjectURL(ctx.urlDataToSave);\n        }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(ctx.fetchRef._state.context.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n      },\n    },\n    loaded_from_input: {\n      entry: assign((ctx, e: LoadFromInput) => {\n        console.log('=========loaded_from_input', e);\n        // if (ctx.urlDataToSave !== undefined) {\n        //   window.URL.revokeObjectURL(ctx.urlDataToSave);\n        // }\n        const db = low(new Memory<fintrack.JSONShape>(''));\n        db.setState(e.data);\n        // console.log(\n        //   '=====ctx.fetchRef._state.context.data',\n        //   ctx.fetchRef._state.context.data,\n        //   db.getState()\n        // );\n        sessionStorage.setItem(sessionStorageVarName, JSON.stringify(e.data));\n        return {\n          db,\n          // data: ctx.fetchRef._state.context.data,\n          urlDataToSave: undefined,\n        };\n      }),\n      on: {\n        SAVE: 'saving',\n        UPDATE_DATA: 'updating_data',\n        LOAD_FROM_INPUT: 'loaded_from_input',\n      },\n    },\n    saving: {\n      entry: assign((ctx, e) => {\n        return {\n          urlDataToSave: window.URL.createObjectURL(\n            new Blob([JSON.stringify(ctx.db.getState(), null, 2)], {\n              type: 'text/plain',\n            })\n          ),\n        };\n      }),\n      on: {\n        SAVED: 'loaded',\n      },\n      // invoke: {\n      //   src: 'saver',\n      //   onDone: 'saved',\n      //   onError: 'saved',\n      // }\n    },\n    updating_data: {\n      entry: assign((ctx, e: EventUpdateData) => {\n        if (e.actionType === 'create') {\n          if (e.entity === 'assetAccountStates') {\n            const reportId = nanoid();\n            ctx.db\n              .get('data')\n              .get('reports')\n              .push({\n                id: reportId,\n                datetime: localDateStringToUtcTimestamp(e.data.date),\n              })\n              .write();\n            e.data.assetAccountStates.forEach(aas => {\n              ctx.db\n                .get('data')\n                .get('assetAccountStates')\n                .push({\n                  ...aas,\n                  reportId,\n                })\n                .write();\n            });\n            ctx.db\n              .get('data')\n              .get('exchangeRates')\n              .push({\n                id: nanoid(),\n                reportId,\n                data: e.data.exchangeRates,\n              })\n              .write();\n          } else {\n            ctx.db\n              .get('data')\n              ?.get(e.entity)\n              .push({\n                id: nanoid(),\n                ...e.data,\n              })\n              .write();\n          }\n        } else if (e.actionType === 'update') {\n          // if (e.entity === 'exchangeRates') {\n          // const allErs = ctx.db.get('data').get('exchangeRates');\n          // const er = allErs?.find(ex => ex.reportId === e.data.report.id);\n          // if (er?.value() !== undefined) {\n          //   er.get('data').set(e.data.asset.id, e.data.value).write();\n          // } else {\n          //   const newEr: fintrack.ExchangeRate = {\n          //     id: nanoid(),\n          //     reportId: e.data.report.id,\n          //     data: {\n          //       [e.data.asset.id]: e.data.value,\n          //     },\n          //   };\n          //   allErs?.push(newEr).write();\n          // }\n          // }\n          if (e.entity === 'assetAccountStates') {\n            const allReports = ctx.db.get('data').get('reports');\n            const report = allReports?.find(r => r.id === e.data.reportId);\n            report\n              ?.set('datetime', localDateStringToUtcTimestamp(e.data.date))\n              .write();\n\n            let updatedAssetAccountStates: fintrack.ID[] = [];\n\n            ctx.db\n              .get('data')\n              .get('assetAccountStates')\n              .forEach(aas => {\n                if (aas.reportId === e.data.reportId) {\n                  aas.balance = e.data.assetAccountStates.find(\n                    aasInner => aasInner.assetAccountId === aas.assetAccountId\n                  )?.balance!;\n                  updatedAssetAccountStates.push(aas.assetAccountId);\n                }\n              })\n              .write();\n\n            e.data.assetAccountStates\n              .filter(\n                aas => !updatedAssetAccountStates.includes(aas.assetAccountId)\n              )\n              .forEach(newAas => {\n                ctx.db\n                  .get('data')\n                  .get('assetAccountStates')\n                  .push({\n                    ...newAas,\n                    reportId: e.data.reportId,\n                  })\n                  .write();\n              });\n\n            ctx.db\n              .get('data')\n              .get('exchangeRates')\n              .find(er => er.reportId === e.data.reportId)\n              .set('data', e.data.exchangeRates)\n              .write();\n\n            // e.data.exchangesRates;\n          }\n          if (e.entity === 'institutions') {\n            const allInsts = ctx.db.get('data').get('institutions');\n            const inst = allInsts?.find(i => i.id === e.data.id);\n            inst?.assign(e.data).write();\n          }\n        } else if (e.actionType === 'delete') {\n          if (e.entity === 'institutions') {\n            ctx.db\n              .get('data')\n              .get('institutions')\n              .remove(i => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assets') {\n            ctx.db\n              .get('data')\n              .get('assets')\n              .remove(i => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'assetAccounts') {\n            ctx.db\n              .get('data')\n              .get('assetAccounts')\n              .remove(i => i.id === e.data.id)\n              .write();\n          }\n          if (e.entity === 'reports') {\n            ctx.db\n              .get('data')\n              .get('reports')\n              .remove(i => i.id === e.data.id)\n              .write();\n            ctx.db\n              .get('data')\n              .get('assetAccountStates')\n              .remove(i => i.reportId === e.data.id)\n              .write();\n            ctx.db\n              .get('data')\n              .get('exchangeRates')\n              .remove(i => i.reportId === e.data.id)\n              .write();\n          }\n        } else {\n          throw new Error('How did you end up here?');\n        }\n        sessionStorage.setItem(\n          sessionStorageVarName,\n          JSON.stringify(ctx.db.getState())\n        );\n        // ctx.data?.institutions.push({\n        //   id: nanoid(),\n        //   ...e.data,\n        // });\n        // console.log(\n        //   '!!!!!!updating_data',\n        //   e.actionType,\n        //   e.type,\n        //   e.data,\n        //   ctx.db.getState()\n        // );\n        return {};\n      }),\n      on: {\n        '': 'idle',\n      },\n    },\n  },\n  // {\n  //   services: {\n  //     saver: context => {\n  //       var data = new Blob(['asd'], {type: 'text/plain'});\n  //       // If we are replacing a previously generated file we need to\n  //       // manually revoke the object URL to avoid memory leaks.\n  //       // if (textFile !== null) {\n  //       //   window.URL.revokeObjectURL(textFile);\n  //       // }\n  //       // textFile = window.URL.createObjectURL(data);\n\n  //       // returns a URL you can use as a href\n  //       return window.URL.createObjectURL(data);\n  //     }\n  //   }\n  // }\n});\n","import React from 'react';\n\nimport * as styles from './Table.treat';\n\nexport const Table: React.FC = ({ children }) => {\n  return (\n    <table className={styles.table}>\n      {children}\n    </table>\n  )\n}\n\nexport const Tr: React.FC = ({ children }) => {\n  return (\n    <tr className={styles.tr}>\n      {children}\n    </tr>\n  )\n}\n\nexport const Td: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <td className={styles.td} colSpan={colspan}>\n      {children}\n    </td>\n  )\n}\n\nexport const Th: React.FC<{ colspan?: number }> = ({ children, colspan }) => {\n  return (\n    <th className={styles.th} colSpan={colspan}>\n      {children}\n    </th>\n  )\n}\n","import \"!../../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./Table.treat.6VVywW1.css\";\nexport var table = '_3-1r7';\nexport var tr = '_3Mjlo';\nexport var th = '_1rfFa';\nexport var td = 'zX0YF';","import {fintrack} from 'typings/fintrack'\n\nexport const BASE_CURRENCY = 'USD' as const;\n\nexport const ALL_ASSET_TYPES = [\n  'CURRENCY',\n  'CRYPTO_CURRENCY',\n  'SECURITY',\n  'VALUABLE_ASSET',\n  'PRECIOUS_METAL',\n] as const;\n\nexport const ALL_INSTITUTION_TYPES = [\n  'BANK',\n  'BROKER',\n  'PERSON',\n  'PHYSICAL_LOCATION',\n  'E-WALLET',\n  'OTHER',\n] as const;\n\nexport const ACCOUNTING_MONEY_FORMAT: fintrack.AccountingMoneyFormat = [2, \",\", \".\"]\n\n","import { fintrack } from 'typings/fintrack';\nimport { ACCOUNTING_MONEY_FORMAT } from 'src/constants';\nimport accounting from 'accounting';\n\nexport function formatMoney(\n  amount: string,\n  symbol: string = '',\n  format: fintrack.AccountingMoneyFormat = ACCOUNTING_MONEY_FORMAT\n) {\n  return accounting.formatMoney(amount, symbol, ...format);\n}\n","import React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport Fab from '@material-ui/core/Fab';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@material-ui/icons';\nimport { IconButton, Button } from '@material-ui/core';\nimport { Big } from 'big.js';\n\nimport { Table, Tr, Th, Td } from 'src/components/Table';\nimport { StoreContext, UserConfigContext } from 'src/App';\nimport { fintrack } from 'typings/fintrack';\nimport { StoreEvent } from 'src/machines/store';\nimport { formatMoney } from 'src/utils';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nfunction getExchangeRate(\n  store: fintrack.JSONShape,\n  erData: fintrack.ExchangeRateData | undefined,\n  // report: fintrack.Report,\n  asset: fintrack.Asset,\n  targetCurrency: fintrack.Currency\n): Big {\n  if (erData === undefined) {\n    return new Big(0);\n  }\n  const isBaseAssetACurrency = asset.class === 'CURRENCY';\n  // if (asset.currency === targetCurrency) {\n  //   return 1;\n  // }\n\n  // then find such asset where class is currency, name is asset.currency\n  // and check whether currency of such asset is `fintrack.BaseCurrency` (USD)\n  const currencyAsset = isBaseAssetACurrency\n    ? asset\n    : store.data.assets.find(\n        a => a.class === 'CURRENCY' && a.name === asset.currency\n      )!;\n  let erToBaseCurrency: Big = new Big(1);\n\n  if (currencyAsset.currency !== targetCurrency) {\n    const currencyAssetToBase = store.data.assets.find(\n      a => a.class === 'CURRENCY' && a.name === targetCurrency\n    );\n    if (currencyAssetToBase !== undefined) {\n      const er = erData[currencyAssetToBase.id];\n      if (er !== null) {\n        erToBaseCurrency = new Big(er!);\n      } else {\n        erToBaseCurrency = new Big(0);\n      }\n    }\n  }\n  if (erToBaseCurrency.eq(0)) {\n    return new Big(0);\n  }\n  return new Big(erData[currencyAsset.id] || 0)\n    .div(erToBaseCurrency)\n    .mul(isBaseAssetACurrency ? new Big(1) : new Big(erData[asset.id] || 0));\n}\n\nexport function getNonZeroAssetClasses({\n  store,\n  report,\n  assetFilterFunction,\n  mode,\n}: {\n  store: fintrack.JSONShape;\n  report?: fintrack.Report;\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean;\n  mode?: 'assets' | 'liabilities';\n}): fintrack.ASSET_TYPE[] {\n  let classes: fintrack.ASSET_TYPE[] = [];\n\n  let states = store.data.assetAccountStates;\n  if (report !== undefined) {\n    states = states.filter(aas => aas.reportId === report.id);\n  }\n  states.forEach(accState => {\n    const balance = parseFloat(accState.balance);\n    let balanceMatches = false;\n    switch (mode) {\n      case undefined:\n        balanceMatches = balance !== 0;\n        break;\n      case 'assets':\n        balanceMatches = balance > 0;\n        break;\n      case 'liabilities':\n        balanceMatches = balance < 0;\n        break;\n    }\n    if (balanceMatches) {\n      const account = store.data.assetAccounts.find(\n        aa => aa.id === accState.assetAccountId\n      )!;\n      // find and maybe skip asset\n      const asset = store.data.assets.find(a => a.id === account.assetId)!;\n      if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n        // skip\n      } else {\n        classes.push(asset.class);\n      }\n    }\n  });\n  return _.uniq(classes);\n}\n\nexport function getNonZeroAssetClassNames({\n  store,\n  report,\n  assetClass,\n}: {\n  store: fintrack.JSONShape;\n  report: fintrack.Report;\n  assetClass: fintrack.ASSET_TYPE;\n}): string[] {\n  let names: string[] = [];\n\n  let states = store.data.assetAccountStates.filter(\n    aas => aas.reportId === report.id\n  );\n  states.forEach(accState => {\n    if (parseFloat(accState.balance) !== 0) {\n      const account = store.data.assetAccounts.find(\n        aa => aa.id === accState.assetAccountId\n      )!;\n      const asset = store.data.assets.find(a => a.id === account.assetId)!;\n      if (asset.class === assetClass) {\n        names.push(asset.name);\n      }\n    }\n  });\n  return _.uniq(names);\n}\n\n// TODO: compute once after store data update and use in all components?\nexport function hadLiabilities({\n  store,\n  assetFilterFunction,\n}: {\n  store: fintrack.JSONShape;\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean;\n}): boolean {\n  let hadLiabilities = false;\n  store.data.assetAccountStates.forEach(accState => {\n    const account = store.data.assetAccounts.find(\n      aa => aa.id === accState.assetAccountId\n    )!;\n    // find and maybe skip asset\n    const asset = store.data.assets.find(a => a.id === account.assetId)!;\n    if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n      // skip\n    } else {\n      if (!hadLiabilities) {\n        hadLiabilities = parseFloat(accState.balance) < 0;\n      }\n    }\n  });\n  return hadLiabilities;\n}\n\nexport function getTotalForReport(\n  store: fintrack.JSONShape,\n  report: fintrack.Report,\n  targetCurrency: fintrack.Currency,\n  assetFilterFunction?: (asset: fintrack.Asset) => boolean,\n  accountStateFilterFunction?: (account: fintrack.AssetAccountState) => boolean\n): Big {\n  return store.data.assetAccountStates\n    .filter(aas => aas.reportId === report.id)\n    .reduce((acc, currAccountState) => {\n      // maybe skip account state\n      if (\n        accountStateFilterFunction !== undefined &&\n        !accountStateFilterFunction(currAccountState)\n      ) {\n        return acc;\n      }\n\n      const account = store.data.assetAccounts.find(\n        aa => aa.id === currAccountState.assetAccountId\n      )!;\n\n      // find and maybe skip asset\n      const asset = store.data.assets.find(a => a.id === account.assetId)!;\n      if (assetFilterFunction !== undefined && !assetFilterFunction(asset)) {\n        return acc;\n      }\n\n      // asset.currency\n      const erData = store.data.exchangeRates.find(\n        er => er.reportId === report.id\n      )?.data;\n      // const erToAssetCurrency = erData[asset.id] ?? '0';\n      let erFromAssetToTarget = getExchangeRate(\n        store,\n        erData,\n        asset,\n        targetCurrency\n      );\n      const assetPriceInBaseCurrency =\n        // parseFloat(erToAssetCurrency) *\n        erFromAssetToTarget.mul(new Big(currAccountState.balance));\n      return assetPriceInBaseCurrency.plus(acc);\n    }, new Big(0));\n}\n\nexport function getInstitutions(\n  store: fintrack.JSONShape\n): fintrack.Institution[] | undefined {\n  return _.sortBy(store.data.institutions, i => i.sortIndex);\n}\n\nexport function getAssetAccounts(\n  store: fintrack.JSONShape\n): fintrack.AssetAccount[] | undefined {\n  return getInstitutions(store)?.flatMap(inst => {\n    return _.sortBy(\n      store.data.assetAccounts.filter(aa => aa.institutionId === inst.id),\n      // TODO replace name with sort order\n      aa => aa.name\n    );\n  });\n}\n\nexport const Home: React.FC<OwnProps> = props => {\n  const store = useContext(StoreContext);\n  const userConfig = useContext(UserConfigContext);\n\n  const assetAccounts = getAssetAccounts(store);\n  if (assetAccounts === undefined) {\n    return null;\n  }\n  const sortedReports = _.sortBy(store.data.reports, r => -1 * r.datetime);\n  // const assets = store.data.assets;\n\n  const deleteReport = (reportId: string) => {\n    props.storeService.send('UPDATE_DATA', {\n      actionType: 'delete',\n      entity: 'reports',\n      data: {\n        id: reportId,\n      },\n    });\n  };\n\n  // const updateExchangeRate = (\n  //   value: string,\n  //   asset: fintrack.Asset,\n  //   report: fintrack.Report\n  // ) => {\n  //   console.log('_________value', value, asset, report);\n\n  //   props.storeService.send({\n  //     type: 'UPDATE_DATA',\n  //     actionType: 'update',\n  //     entity: 'exchangeRates',\n  //     data: {\n  //       value,\n  //       asset,\n  //       report,\n  //     },\n  //   });\n  // };\n\n  return (\n    <div>\n      <h1>Your net worth is...</h1>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        component={Link}\n        to=\"add-edit-report\"\n        style={{\n          margin: 0,\n          top: 'auto',\n          right: 20,\n          bottom: 80,\n          left: 'auto',\n          position: 'fixed',\n        }}\n      >\n        <AddIcon />\n      </Fab>\n      <Table>\n        <thead>\n          <Tr>\n            <Th></Th>\n            {getInstitutions(store)?.map(inst => {\n              return (\n                <Th\n                  key={inst.id}\n                  colspan={\n                    assetAccounts.filter(aa => aa.institutionId === inst.id)\n                      .length\n                  }\n                >\n                  {inst.name}\n                </Th>\n              );\n            })}\n          </Tr>\n          <Tr>\n            <Th>date</Th>\n            {assetAccounts.map(aa => (\n              <Th>{aa.name}</Th>\n            ))}\n            {userConfig.reportCurrencies.map(reportCurrency => (\n              <Th>Total in {reportCurrency}</Th>\n            ))}\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map(report => {\n            const assetAccountStates = store.data.assetAccountStates.filter(\n              aas => aas.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    color=\"primary\"\n                    component={Link}\n                    to={`add-edit-report/${report.id}`}\n                  >\n                    {new Date(report.datetime).toISOString().substr(0, 10)}\n                  </Button>\n                </Td>\n                {assetAccounts.map(aa => {\n                  const aas = assetAccountStates?.find(\n                    aas => aas.assetAccountId === aa.id\n                  );\n                  return <Td>{formatMoney(aas?.balance || '0')}</Td>;\n                })}\n                <React.Fragment>\n                  {_.map(userConfig.reportCurrencies, reportCurrency => {\n                    return (\n                      <Td>\n                        {formatMoney(\n                          getTotalForReport(\n                            store,\n                            report,\n                            reportCurrency\n                          ).toFixed(0)\n                        )}\n                      </Td>\n                    );\n                  })}\n                </React.Fragment>\n                <Td>\n                  <IconButton\n                    color=\"secondary\"\n                    size=\"small\"\n                    onClick={() => deleteReport(report.id)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Td>\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      {/* <h2>Exchange rates</h2> */}\n      {/* <Table>\n        <thead>\n          <Tr>\n            <Th>date</Th>\n            {assets?.map(a => (\n              <Th>\n                {a.class} {a.subclass} {a.name} in {a.currency}\n              </Th>\n            ))}\n          </Tr>\n        </thead>\n        <tbody>\n          {sortedReports?.map(report => {\n            const exchangeRate = store.data.exchangeRates.find(\n              er => er.reportId === report.id\n            );\n            return (\n              <Tr key={report.id}>\n                <Td>{new Date(report.datetime).toISOString().substr(0, 10)}</Td>\n                {assets?.map(a => {\n                  const rate = exchangeRate?.data?.[a.id];\n                  // const aas = exchangeRate.find(\n                  //   (aas) => aas.assetAccountId === aa.id\n                  // );\n                  return (\n                    <Td>\n                      <input\n                        style={{ width: 50 }}\n                        defaultValue={rate}\n                        onChange={v =>\n                          updateExchangeRate(v.target.value, a, report)\n                        }\n                      />\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </tbody>\n      </Table> */}\n    </div>\n  );\n};\n","import * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport _ from 'lodash';\n\nimport { fintrack } from 'typings/fintrack';\n\nexport const NUMBER_FORMAT = '#,###.';\nexport const POSITIVE_NUMBER_FORMAT = '#,###.s';\nexport const PERCENT_FORMAT = '#.0';\nexport const POSITIVE_PERCENT_FORMAT = '#.0s';\n\nexport type ChartDataPointsPerCategory = {\n  category: fintrack.Currency | fintrack.ASSET_TYPE;\n  points: {\n    date: Date;\n    value: string;\n  }[];\n};\n\nexport const configureTimelineChart = (\n  chart: am4charts.XYChart,\n  createValueAxis: boolean = true\n) => {\n  chart.paddingRight = 20;\n\n  let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n\n  dateAxis.renderer.minGridDistance = 50;\n\n  // NOTE: https://www.amcharts.com/docs/v4/tutorials/using-fill-rules-on-a-date-axis/\n  dateAxis.renderer.axisFills.template.disabled = false;\n  dateAxis.renderer.axisFills.template.fill = am4core.color('#1AB0F1');\n  dateAxis.renderer.axisFills.template.fillOpacity = 0.1;\n\n  // NOTE: range selection plugin\n  // let selector = new am4plugins_rangeSelector.DateAxisRangeSelector();\n  // selector.container = document.getElementById(\"selectordiv\")!;\n  // selector.axis = dateAxis;\n\n  // NOTE: https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Formatting_date_and_time\n  dateAxis.dateFormats.setKey('day', 'MMMM dt');\n  dateAxis.dateFormats.setKey('month', 'MMM yyyy');\n\n  dateAxis.periodChangeDateFormats.setKey('month', '[bold]MMM yyyy');\n\n  if (createValueAxis) {\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.renderer.minWidth = 35;\n  }\n\n  let cursor = new am4charts.XYCursor();\n  cursor.xAxis = dateAxis;\n  cursor.fullWidthLineX = true;\n  cursor.lineX.strokeWidth = 0;\n  cursor.lineX.fill = am4core.color('#8F3985');\n  cursor.lineX.fillOpacity = 0.1;\n  chart.cursor = cursor;\n\n  let scrollbarX = new am4charts.XYChartScrollbar();\n  chart.scrollbarX = scrollbarX;\n\n  chart.legend = new am4charts.Legend();\n\n  // NOTE: zoom to last year by default.\n  // https://www.amcharts.com/docs/v4/tutorials/pre-zooming-an-axis/#Setting_up_pre_zoom\n  // chart.events.on(\"ready\", function () {\n  //   const toDate = new Date();\n  //   const fromDate = new Date();\n  //   fromDate.setFullYear(toDate.getFullYear() - 1);\n  //   dateAxis.zoomToDates(fromDate, toDate);\n  // });\n};\n\nexport function createValuePerCategoryTimelineChart(\n  name: string,\n  containerId: string,\n  dataPerCategory: ChartDataPointsPerCategory[],\n  stacked: boolean\n) {\n  let chart = am4core.create(containerId, am4charts.XYChart);\n\n  // Title\n  let chartTitle = chart.titles.push(new am4core.Label());\n  chartTitle.text = name;\n  chartTitle.fontSize = 25;\n\n  configureTimelineChart(chart, !stacked);\n  _.map(dataPerCategory, (seriesData, index) => {\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.data = seriesData.points;\n    series.dataFields.dateX = 'date';\n    series.dataFields.valueY = 'value';\n    series.name = seriesData.category;\n    series.strokeWidth = 3;\n    series.tooltipText = '{name}: [bold]{valueY.value}[/]';\n    series.bullets.push(new am4charts.CircleBullet());\n    series.tensionX = 0.8;\n\n    if (stacked) {\n      const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n      series.yAxis = valueAxis;\n      valueAxis.renderer.line.strokeOpacity = 1;\n      valueAxis.renderer.line.stroke = series.stroke;\n      valueAxis.renderer.grid.template.stroke = series.stroke;\n      valueAxis.renderer.grid.template.strokeOpacity = 0.1;\n      valueAxis.renderer.labels.template.fill = series.stroke;\n      valueAxis.renderer.minGridDistance = 20;\n      valueAxis.align = 'right';\n      if (index === 0) {\n        valueAxis.marginBottom = 20;\n      } else {\n        if (index === dataPerCategory.length - 1) {\n          valueAxis.marginTop = 20;\n        } else {\n          valueAxis.marginTop = 10;\n          valueAxis.marginBottom = 10;\n        }\n      }\n    }\n    return series;\n  });\n\n  if (stacked) {\n    chart.leftAxesContainer.layout = 'vertical';\n  }\n\n  return chart;\n}\n","import React, { useContext, useEffect } from 'react';\nimport _ from 'lodash';\n\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { getTotalForReport } from 'src/Home';\nimport {\n  ChartDataPointsPerCategory,\n  createValuePerCategoryTimelineChart,\n} from './utils';\n\nexport const NWInCurrenciesTimelineChart: React.FC<{ stacked: boolean }> = ({\n  stacked,\n}) => {\n  const containerId = 'nw_in_currencies_timeline_chart';\n  const store = useContext(StoreContext);\n  const currencies = [useContext(ReportCurrencyContext)];\n  // const userConfig = useContext(UserConfigContext);\n  // const currencies = userConfig.reportCurrencies;\n  const reports = store.data.reports;\n\n  const dataPerCurrency: ChartDataPointsPerCategory[] = currencies.map(\n    currency => {\n      const totalsInCurrency = _.compact(\n        reports?.map(report => {\n          return {\n            date: new Date(report.datetime),\n            value: getTotalForReport(store, report, currency).toFixed(0),\n          };\n        })\n      );\n      return {\n        category: currency,\n        points: totalsInCurrency || [],\n      };\n    }\n  );\n\n  useEffect(() => {\n    const chart = createValuePerCategoryTimelineChart(\n      'Net worth valuation in currency history',\n      containerId,\n      dataPerCurrency,\n      stacked\n    );\n    return () => {\n      chart.dispose();\n    };\n  }, [dataPerCurrency, containerId, stacked]);\n\n  return (\n    <div\n      id={containerId}\n      style={{ width: '100%', height: '500px', marginBottom: '100px' }}\n    ></div>\n    // <div id=\"selectordiv\" style={{ width: \"100%\", height: \"30px\", marginBottom: \"100px\" }} />\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport _ from 'lodash';\n\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { getTotalForReport } from 'src/Home';\nimport { ChartDataPointsPerCategory, configureTimelineChart } from './utils';\n\nfunction createChart(\n  name: string,\n  containerId: string,\n  dataPerCategory: ChartDataPointsPerCategory[],\n  stacked: boolean\n) {\n  let chart = am4core.create(containerId, am4charts.XYChart);\n\n  // Title\n  let chartTitle = chart.titles.push(new am4core.Label());\n  chartTitle.text = name;\n  chartTitle.fontSize = 25;\n\n  configureTimelineChart(chart, !stacked);\n  _.map(dataPerCategory, (seriesData, index) => {\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.data = seriesData.points;\n    series.dataFields.dateX = 'date';\n    series.dataFields.valueY = 'value';\n    series.dataFields.valueYShow = 'previousChange';\n    series.name = seriesData.category;\n    series.strokeWidth = 3;\n    series.tensionX = 0.8;\n    series.tooltipText = '{valueY.previousChange}';\n\n    const bullet = new am4charts.CircleBullet();\n    series.bullets.push(bullet);\n\n    if (stacked) {\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n      let range = valueAxis.createSeriesRange(series);\n      range.value = 0;\n      range.endValue = -100000000;\n      range.contents.stroke = am4core.color('#f00');\n      range.contents.fill = am4core.color('#f00');\n      range.contents.fillOpacity = 0.2;\n\n      series.yAxis = valueAxis;\n      valueAxis.renderer.line.strokeOpacity = 1;\n      valueAxis.renderer.line.stroke = series.stroke;\n      valueAxis.renderer.grid.template.stroke = series.stroke;\n      valueAxis.renderer.grid.template.strokeOpacity = 0.1;\n      valueAxis.renderer.labels.template.fill = series.stroke;\n      valueAxis.renderer.minGridDistance = 20;\n      valueAxis.align = 'right';\n      if (index === 0) {\n        valueAxis.marginBottom = 20;\n      } else {\n        if (index === dataPerCategory.length - 1) {\n          valueAxis.marginTop = 20;\n        } else {\n          valueAxis.marginTop = 10;\n          valueAxis.marginBottom = 10;\n        }\n      }\n    }\n    // else {\n    //   _.forEach(chart.yAxes.values, (axes) => {\n    //     const axesY = axes as unknown as am4charts.ValueAxis<am4charts.AxisRenderer>;\n    //     let range = axesY.createSeriesRange(series);\n    //     range.value = 0;\n    //     range.endValue = -100000000;\n    //     range.contents.stroke = am4core.color(\"#f00\");\n    //     range.contents.fill = am4core.color(\"#f00\");\n    //     range.contents.fillOpacity = 0.2;\n    //   });\n    return series;\n  });\n\n  if (stacked) {\n    chart.leftAxesContainer.layout = 'vertical';\n  }\n\n  return chart;\n}\n\nexport const NWDiffInCurrenciesTimelineChart: React.FC<{\n  stacked: boolean;\n}> = ({ stacked }) => {\n  const containerId = 'nw_diff_in_currencies_timeline_chart';\n  const store = useContext(StoreContext);\n  const currencies = [useContext(ReportCurrencyContext)];\n  // const userConfig = useContext(UserConfigContext);\n  // const currencies = userConfig.reportCurrencies;\n  const reports = store.data.reports;\n\n  const dataPerCurrency: ChartDataPointsPerCategory[] = currencies.map(\n    currency => {\n      const totalsInCurrency = _.compact(\n        reports?.map(report => {\n          return {\n            date: new Date(report.datetime),\n            value: getTotalForReport(store, report, currency).toFixed(0),\n          };\n        })\n      );\n      return {\n        category: currency,\n        points: totalsInCurrency || [],\n      };\n    }\n  );\n\n  useEffect(() => {\n    const chart = createChart(\n      'Net worth valuation in currency diff',\n      containerId,\n      dataPerCurrency,\n      stacked\n    );\n    return () => {\n      chart.dispose();\n    };\n  }, [dataPerCurrency, containerId, stacked]);\n\n  return (\n    <div\n      id={containerId}\n      style={{ width: '100%', height: '500px', marginBottom: '100px' }}\n    ></div>\n    // <div id=\"selectordiv\" style={{ width: \"100%\", height: \"30px\", marginBottom: \"100px\" }} />\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport _ from 'lodash';\nimport { Big } from 'big.js';\n\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { getTotalForReport, getNonZeroAssetClasses } from 'src/Home';\nimport { POSITIVE_NUMBER_FORMAT, PERCENT_FORMAT } from './utils';\nimport { fintrack } from 'typings/fintrack';\n\ntype ValuationsInBaseCurrencyPerClass = {\n  class: fintrack.ASSET_TYPE;\n  valuationAssets: number;\n  valuationLiabilities?: number;\n  // valuationTotal: number;\n};\n\n// function createChart(\n//   containerId: string,\n//   baseCurrency: fintrack.Currency,\n//   data: ValuationInBaseCurrencyPerClass[]\n// ) {\n//   let chart = am4core.create(containerId, am4charts.XYChart);\n//   chart.data = data;\n\n//   const valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n\n//   const categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n//   categoryAxis.renderer.grid.template.location = 0;\n//   categoryAxis.dataFields.category = 'class';\n//   categoryAxis.renderer.minGridDistance = 1;\n//   categoryAxis.renderer.inversed = false;\n//   categoryAxis.renderer.grid.template.disabled = true;\n\n//   var series = chart.series.push(new am4charts.ColumnSeries());\n//   series.dataFields.categoryY = 'class';\n//   series.dataFields.valueX = 'valuation';\n//   series.name = 'Assets';\n//   series.tooltipText = '{valueX.value}';\n//   series.columns.template.strokeOpacity = 0;\n//   // series.columns.template.column.cornerRadiusBottomRight = 5;\n//   // series.columns.template.column.cornerRadiusTopRight = 5;\n//   // As by default columns of the same series are of the same color,\n//   // we add adapter which takes colors from chart.colors color set.\n//   series.columns.template.adapter.add('fill', (fill, target) => {\n//     return chart.colors.getIndex(target.dataItem!.index);\n//   });\n\n//   categoryAxis.sortBySeries = series;\n\n//   const labelBullet = series.bullets.push(new am4charts.LabelBullet());\n//   labelBullet.label.horizontalCenter = 'left';\n//   labelBullet.label.dx = 10;\n//   labelBullet.label.text = `{values.valueX.workingValue.formatNumber('${POSITIVE_NUMBER_FORMAT}')}`;\n//   labelBullet.locationX = 1;\n\n//   // var valueLabel = series.bullets.push(new am4charts.LabelBullet());\n//   // valueLabel.label.text = \"{valueX}\";\n//   // valueLabel.label.horizontalCenter = \"left\";\n//   // valueLabel.label.dx = 10;\n//   // valueLabel.label.hideOversized = true;\n//   // valueLabel.label.truncate = false;\n\n//   // var categoryLabel = series.bullets.push(new am4charts.LabelBullet());\n//   // categoryLabel.label.text = \"{class}\";\n//   // categoryLabel.label.horizontalCenter = \"right\";\n//   // categoryLabel.label.dx = -10;\n//   // categoryLabel.label.fill = am4core.color(\"#fff\");\n//   // categoryLabel.label.hideOversized = true;\n//   // categoryLabel.label.truncate = false;\n\n//   // chart.legend = new am4charts.Legend();\n//   // chart.legend.position = 'right';\n\n//   return chart;\n// }\n\nfunction createChart(\n  containerId: string,\n  currency: fintrack.Currency,\n  data: ValuationsInBaseCurrencyPerClass[]\n) {\n  let chart = am4core.create(containerId, am4charts.XYChart);\n  chart.data = data;\n\n  const hasLiabilities = _.sum(_.map(data, el => el.valuationLiabilities || 0));\n\n  // Title\n  let title = chart.titles.push(new am4core.Label());\n  title.text = 'Current net worth valuation allocation';\n  title.fontSize = 25;\n  title.marginBottom = 15;\n\n  // Create axes\n  let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n  categoryAxis.dataFields.category = 'class';\n\n  categoryAxis.renderer.inversed = true;\n  categoryAxis.renderer.minGridDistance = 20;\n  categoryAxis.renderer.grid.template.location = 0;\n  categoryAxis.renderer.axisFills.template.disabled = false;\n  categoryAxis.renderer.axisFills.template.fillOpacity = 0.05;\n\n  categoryAxis.renderer.cellStartLocation = 0.05;\n  categoryAxis.renderer.cellEndLocation = 0.95;\n\n  let valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n  valueAxis.renderer.minGridDistance = 50;\n  valueAxis.renderer.ticks.template.length = 5;\n  valueAxis.renderer.ticks.template.disabled = false;\n  valueAxis.renderer.ticks.template.strokeOpacity = 0.4;\n  valueAxis.extraMax = 0.1;\n  if (hasLiabilities) {\n    valueAxis.extraMin = 0.1;\n  }\n\n  // Use positive X-axis values for liabilities\n  chart.numberFormatter.numberFormat = '#.#s';\n\n  // Create series\n  function createSeries(field: string, name: string, color: any) {\n    let series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueX = field;\n    series.dataFields.categoryY = 'class';\n    series.name = name;\n    series.stroke = color;\n    series.fill = color;\n    if (field !== 'valuationTotal') {\n      series.stacked = true;\n    }\n    if (field === 'valuationAssets') {\n      series.columns.template.column.cornerRadiusBottomRight = 5;\n      series.columns.template.column.cornerRadiusTopRight = 5;\n    } else {\n      series.columns.template.column.cornerRadiusBottomLeft = 5;\n      series.columns.template.column.cornerRadiusTopLeft = 5;\n    }\n\n    series.columns.template.tooltipText = `{name}: [bold]{valueX.value.formatNumber('${POSITIVE_NUMBER_FORMAT}')} ${currency}[/]`;\n\n    const valueLabel = series.bullets.push(new am4charts.LabelBullet());\n    valueLabel.label.text = `{name}: [bold]{valueX.value.formatNumber('${POSITIVE_NUMBER_FORMAT}')} ${currency}[/]`;\n    if (field === 'valuationAssets') {\n      valueLabel.label.horizontalCenter = 'right';\n      valueLabel.label.dx = -10;\n    } else {\n      valueLabel.label.horizontalCenter = 'left';\n      valueLabel.label.dx = 10;\n    }\n    valueLabel.label.hideOversized = true;\n    valueLabel.label.truncate = false;\n\n    // Hide labels with 0 value\n    // valueLabel.label.adapter.add('textOutput', (text, target) => {\n    //   if (target.dataItem && target.dataItem.values.valueX.value == 0) {\n    //     return '';\n    //   }\n    //   return text;\n    // });\n\n    // const categoryLabel = series.bullets.push(new am4charts.LabelBullet());\n    // categoryLabel.label.text = \"{name}\";\n    // categoryLabel.label.horizontalCenter = \"right\";\n    // categoryLabel.label.dx = -10;\n    // // categoryLabel.label.fill = am4core.color(\"#fff\");\n    // categoryLabel.label.hideOversized = true;\n    // categoryLabel.label.truncate = false;\n  }\n\n  let interfaceColors = new am4core.InterfaceColorSet();\n  let positiveColor = interfaceColors.getFor('positive');\n  let negativeColor = interfaceColors.getFor('negative');\n\n  createSeries('valuationAssets', 'Assets', positiveColor);\n  if (hasLiabilities) {\n    createSeries('valuationLiabilities', 'Liabilities', negativeColor);\n    // No reason to show legend if there are only one series in chart (assets).\n    chart.legend = new am4charts.Legend();\n    chart.legend.position = 'bottom';\n  }\n\n  chart.paddingRight = 100;\n  return chart;\n}\n\nexport const NWValuationAllocationChart: React.FC = () => {\n  const containerId = 'nw_valuation_allocation_chart';\n  const store = useContext(StoreContext);\n  // const userConfig = useContext(UserConfigContext);\n  const reportCurrency = useContext(ReportCurrencyContext);\n\n  const lastReport = _.maxBy(store.data.reports, r => r.datetime);\n\n  let data: ValuationsInBaseCurrencyPerClass[] = [];\n  if (lastReport) {\n    // const nonEmptyAccounts = _.filter(store.data.assetAccounts, acc => true);\n    // const assetIds = _.map(nonEmptyAccounts, acc => acc.assetId);\n    // const uniqueClasses = _.uniq(\n    //   _.map(assetIds, assetId => {\n    //     return store.data.assets.find(a => a.id === assetId)!.class;\n    //   })\n    // );\n    const assetClasses = getNonZeroAssetClasses({\n      store: store,\n      report: lastReport,\n    });\n    data = _.map(assetClasses, klass => {\n      let r = {\n        class: klass,\n        valuationAssets: parseFloat(\n          getTotalForReport(\n            store,\n            lastReport,\n            reportCurrency,\n            a => a.class === klass,\n            accState => parseFloat(accState.balance) >= 0\n          ).valueOf()\n        ),\n        valuationLiabilities: parseFloat(\n          getTotalForReport(\n            store,\n            lastReport,\n            reportCurrency,\n            a => a.class === klass,\n            accState => parseFloat(accState.balance) < 0\n          ).valueOf()\n        ),\n        // valuationTotal: parseFloat(\n        //   getTotalForReport(\n        //     store,\n        //     lastReport,\n        //     baseCurrency,\n        //     a => a.class === klass\n        //   ).valueOf()\n        // ),\n      };\n      // delete column from chart completely.\n      if (r.valuationLiabilities == 0) {\n        delete r.valuationLiabilities;\n      }\n      return r;\n    });\n  }\n\n  useEffect(() => {\n    const chart = createChart(containerId, reportCurrency, data);\n    return () => {\n      chart.dispose();\n    };\n  }, [containerId, reportCurrency, data]);\n\n  return <div id={containerId} style={{ height: '400px' }} />;\n};\n","import React, { useContext, useEffect } from 'react';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport _ from 'lodash';\n\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { fintrack } from 'typings/fintrack';\nimport {\n  getTotalForReport,\n  getNonZeroAssetClasses,\n  getNonZeroAssetClassNames,\n} from 'src/Home';\nimport { NUMBER_FORMAT, PERCENT_FORMAT } from './utils';\nimport { last } from '@amcharts/amcharts4/.internal/core/utils/Array';\n\nexport type TotalInBaseCurrencyPerAssetName = {\n  assetClass: fintrack.ASSET_TYPE;\n  assetName: string;\n  totalInBaseCurrency: string;\n};\n\nfunction createChart(\n  title: string,\n  containerId: string,\n  baseCurrency: fintrack.Currency,\n  data: TotalInBaseCurrencyPerAssetName[]\n) {\n  let chart = am4core.create(containerId, am4charts.PieChart);\n  chart.data = data;\n\n  // Title\n  let chartTitle = chart.titles.push(new am4core.Label());\n  chartTitle.text = title;\n  chartTitle.fontSize = 20;\n  // chartTitle.marginBottom = 15;\n\n  chart.innerRadius = am4core.percent(30);\n\n  let series = chart.series.push(new am4charts.PieSeries());\n  series.dataFields.value = 'totalInBaseCurrency';\n  series.dataFields.category = 'assetName';\n\n  // NOTE: to move labels inside pie slices\n  // series.ticks.template.disabled = true;\n  // series.alignLabels = false;\n  // series.labels.template.radius = am4core.percent(-35);\n  // series.labels.template.fill = am4core.color('white');\n\n  series.slices.template.strokeWidth = 2;\n  series.slices.template.stroke = am4core.color('#000');\n  series.slices.template.tooltipText = `{value.value.formatNumber('${NUMBER_FORMAT}')} ${baseCurrency}`;\n\n  series.labels.template.text = `{category}: {value.percent.formatNumber('${PERCENT_FORMAT}')}%`;\n  return chart;\n}\n\nexport const AssetClassValuationAllocationPieCharts: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  const lastReport = _.maxBy(store.data.reports, r => r.datetime);\n  if (lastReport) {\n    const assetClasses = getNonZeroAssetClasses({\n      store: store,\n      report: lastReport,\n      mode: 'assets',\n    });\n    return (\n      <React.Fragment>\n        {_.map(assetClasses, (assetClass: fintrack.ASSET_TYPE) => {\n          return (\n            <AssetClassValuationAllocationChart\n              key={assetClass}\n              assetClass={assetClass}\n            />\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n  return null;\n};\n\nconst AssetClassValuationAllocationChart: React.FC<{\n  assetClass: fintrack.ASSET_TYPE;\n}> = ({ assetClass }) => {\n  const containerId = `asset_class_${assetClass}_nw_dist_by_name_chart`;\n  const store = useContext(StoreContext);\n  const reportCurrency = useContext(ReportCurrencyContext);\n\n  const lastReport = _.maxBy(store.data.reports, r => r.datetime);\n\n  let data: TotalInBaseCurrencyPerAssetName[] = [];\n  if (lastReport) {\n    const names = getNonZeroAssetClassNames({\n      store: store,\n      report: lastReport,\n      assetClass: assetClass,\n    });\n    data = names.map(assetName => {\n      return {\n        assetClass: assetClass,\n        assetName: assetName,\n        totalInBaseCurrency: getTotalForReport(\n          store,\n          lastReport,\n          reportCurrency,\n          (a: fintrack.Asset) => a.class === assetClass && a.name === assetName\n        ).toFixed(0),\n      };\n    });\n  }\n\n  useEffect(() => {\n    const chart = createChart(\n      `[bold]${assetClass}[/] allocation`,\n      containerId,\n      reportCurrency,\n      data\n    );\n    return () => {\n      chart.dispose();\n    };\n  }, [containerId, reportCurrency, data]);\n\n  return (\n    <div style={{ width: '50%', height: '200px' }}>\n      <div id={containerId} style={{ height: '200px' }} />\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport _ from 'lodash';\n\nimport { fintrack } from 'typings/fintrack';\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { getTotalForReport, getNonZeroAssetClasses } from 'src/Home';\nimport {\n  configureTimelineChart,\n  POSITIVE_PERCENT_FORMAT,\n  NUMBER_FORMAT,\n} from './utils';\n\nfunction createData(\n  store: fintrack.JSONShape,\n  currency: fintrack.Currency,\n  assetClasses: fintrack.ASSET_TYPE[],\n  accountStateFilterFunction?: (account: fintrack.AssetAccountState) => boolean,\n  valueProcessingFunction?: (t: number) => number\n) {\n  return _.map(store.data.reports, report => {\n    const totalsPerAssetClass = assetClasses.map(assetClass => {\n      return {\n        assetClass: assetClass,\n        totalInAssetClass: parseFloat(\n          getTotalForReport(\n            store,\n            report,\n            currency,\n            a => a.class === assetClass,\n            accountStateFilterFunction\n          ).toFixed(0)\n        ),\n      };\n    });\n    let result: any = {\n      date: new Date(report.datetime),\n    };\n    _.map(totalsPerAssetClass, t => {\n      if (valueProcessingFunction !== undefined) {\n        result[t.assetClass] = valueProcessingFunction(t.totalInAssetClass);\n      } else {\n        result[t.assetClass] = t.totalInAssetClass;\n      }\n    });\n    return result;\n  });\n}\n\nfunction createStackedChart(\n  name: string,\n  containerId: string,\n  data: any, // TODO set type\n  assetClasses: fintrack.ASSET_TYPE[],\n  currency: fintrack.Currency\n) {\n  if (!data) {\n    return null;\n  }\n\n  let chart = am4core.create(containerId, am4charts.XYChart);\n  configureTimelineChart(chart, false);\n  chart.data = data;\n\n  let title = chart.titles.push(new am4core.Label());\n  title.text = name;\n  title.fontSize = 25;\n  title.marginBottom = 15;\n\n  let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n  valueAxis.title.text = `${currency}`;\n  valueAxis.calculateTotals = true;\n\n  // exclude 'date' key\n  const seriesNames = _.filter(_.keys(data[0]), k =>\n    _.includes(assetClasses, k)\n  );\n\n  const NWHistory = _.map(data, d => {\n    // sum valuations in base currency for all classes in report, which is NW\n    return _.sum(_.map(seriesNames, klass => d[klass]));\n  });\n  const hasAnyNegativeNW = _.filter(NWHistory, nw => nw < 0).length > 0;\n  const hasAnyPositiveNW = _.filter(NWHistory, nw => nw > 0).length > 0;\n\n  _.map(seriesNames, seriesName => {\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = 'date';\n    series.dataFields.valueY = seriesName;\n    series.name = seriesName;\n    series.strokeWidth = 2;\n    series.tooltipText = `{name}: [bold]{valueY.value.formatNumber('${NUMBER_FORMAT}')} ${currency}[/]`;\n    // percents are not computed correctly when there are negative points\n    if (!(hasAnyNegativeNW && hasAnyPositiveNW)) {\n      series.tooltipText += ` ({valueY.totalPercent.formatNumber('${POSITIVE_PERCENT_FORMAT}')} %)`;\n    }\n    series.bullets.push(new am4charts.CircleBullet());\n    series.fillOpacity = 0.7;\n    series.stacked = true;\n    series.tensionX = 0.8;\n    // series.legendSettings.itemValueText = `[bold]{valueY.value} ${baseCurrency}[/]`;\n    return series;\n  });\n\n  return chart;\n}\n\nexport const NWValuationAllocationStackedTimelineChart: React.FC = () => {\n  const containerId = 'nw_valuation_allocation_stacked_timeline_chart';\n  const store = useContext(StoreContext);\n  const reportCurrency = useContext(ReportCurrencyContext);\n\n  const assetClasses = getNonZeroAssetClasses({ store });\n  const data = createData(\n    store,\n    reportCurrency,\n    assetClasses,\n    accState => true\n  );\n\n  useEffect(() => {\n    const chart = createStackedChart(\n      'Net worth valuation allocation history',\n      containerId,\n      data,\n      assetClasses,\n      reportCurrency\n    );\n    return () => {\n      chart?.dispose();\n    };\n  }, [data, assetClasses, reportCurrency, containerId]);\n\n  return (\n    <div\n      id={containerId}\n      style={{ width: '100%', height: '500px', marginBottom: '100px' }}\n    ></div>\n  );\n};\n\nexport const AssetsValuationAllocationStackedTimelineChart: React.FC = () => {\n  const containerId = 'assets_percentage_allocation_stacked_timeline_chart';\n  const store = useContext(StoreContext);\n  const reportCurrency = useContext(ReportCurrencyContext);\n\n  const assetClasses = getNonZeroAssetClasses({ store: store, mode: 'assets' });\n  const data = createData(\n    store,\n    reportCurrency,\n    assetClasses,\n    accState => parseFloat(accState.balance) >= 0\n  );\n\n  useEffect(() => {\n    const chart = createStackedChart(\n      'Assets valuation allocation history',\n      containerId,\n      data,\n      assetClasses,\n      reportCurrency\n    );\n    return () => {\n      chart?.dispose();\n    };\n  }, [reportCurrency, data, containerId, assetClasses]);\n\n  return (\n    <div\n      id={containerId}\n      style={{ width: '100%', height: '500px', marginBottom: '100px' }}\n    ></div>\n  );\n};\n\n// TODO: unify with AssetsPercentageAllocationStackedTimelineChart\nexport const LiabilitiesValuationAllocationStackedTimelineChart: React.FC = () => {\n  const containerId =\n    'liabilities_percentage_allocation_stacked_timeline_chart';\n  const store = useContext(StoreContext);\n  const reportCurrency = useContext(ReportCurrencyContext);\n\n  const assetClasses = getNonZeroAssetClasses({\n    store: store,\n    mode: 'liabilities',\n  });\n  const data = createData(\n    store,\n    reportCurrency,\n    assetClasses,\n    accState => parseFloat(accState.balance) < 0,\n    Math.abs // used to show liabilities in positive values\n  );\n\n  useEffect(() => {\n    const chart = createStackedChart(\n      'Liabilities valuation allocation history',\n      containerId,\n      data,\n      assetClasses,\n      reportCurrency\n    );\n    return () => {\n      chart?.dispose();\n    };\n  }, [reportCurrency, data, containerId, assetClasses]);\n\n  return (\n    <div\n      id={containerId}\n      style={{ width: '100%', height: '500px', marginBottom: '100px' }}\n    ></div>\n  );\n};\n\n// function createPercentageStackedChart(\n//   name: string,\n//   containerId: string,\n//   data: any,\n//   assetClasses: fintrack.ASSET_TYPE[]\n// ) {\n//   if (!data) {\n//     return null;\n//   }\n\n//   let chart = am4core.create(containerId, am4charts.XYChart);\n//   configureTimelineChart(chart, false);\n//   chart.data = data;\n\n//   let title = chart.titles.push(new am4core.Label());\n//   title.text = name;\n//   title.fontSize = 25;\n//   title.marginBottom = 15;\n\n//   let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n//   // valueAxis.title.text = `NW % distribution by asset class`;\n//   valueAxis.calculateTotals = true;\n//   valueAxis.min = 0;\n//   valueAxis.max = 100;\n//   valueAxis.strictMinMax = true;\n//   valueAxis.renderer.labels.template.adapter.add('text', text => text + '%');\n\n//   const seriesNames = _.filter(_.keys(data[0]), k =>\n//     _.includes(assetClasses, k)\n//   );\n//   _.map(seriesNames, seriesName => {\n//     let series = chart.series.push(new am4charts.LineSeries());\n//     series.dataFields.dateX = 'date';\n//     series.dataFields.valueY = seriesName;\n//     series.dataFields.valueYShow = 'totalPercent';\n//     series.name = seriesName;\n//     series.strokeWidth = 2;\n//     series.tooltipText = `{name}: [bold]{valueY.totalPercent.formatNumber('${PERCENT_FORMAT}')}%[/]`;\n//     series.bullets.push(new am4charts.CircleBullet());\n//     series.fillOpacity = 0.7;\n//     series.stacked = true;\n//     series.tensionX = 0.8;\n\n//     series.legendSettings.itemValueText = `[bold]{valueY.totalPercent.formatNumber('${PERCENT_FORMAT}')}%[/]`;\n//     return series;\n//   });\n\n//   return chart;\n// }\n","import React, { useContext, useState } from 'react';\nimport _ from 'lodash';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\nimport am4themes_material from '@amcharts/amcharts4/themes/material';\n\nimport { hadLiabilities, getNonZeroAssetClasses } from 'src/Home';\nimport {\n  StoreContext,\n  UserConfigContext,\n  ReportCurrencyContext,\n} from 'src/App';\nimport { NWDistByAssetClassTimelineChart } from './NWDistByAssetClassTimelineChart';\nimport { NWInCurrenciesTimelineChart } from './NWValuationInCurrenciesTimelineChart';\nimport { NWDiffInCurrenciesTimelineChart } from './NWValuationDiffInCurrenciesTimelineChart';\nimport { NWValuationAllocationChart } from './NWValuationAllocationChart';\nimport { AssetClassValuationAllocationPieCharts } from './AssetClassValuationAllocationPieCharts';\nimport {\n  NWValuationAllocationStackedTimelineChart,\n  AssetsValuationAllocationStackedTimelineChart,\n  LiabilitiesValuationAllocationStackedTimelineChart,\n} from './AllocationTimelineCharts';\nimport { fintrack } from 'typings/fintrack';\n\nam4core.useTheme(am4themes_animated);\nam4core.useTheme(am4themes_material);\n\nexport const ChartsRoot: React.FC = () => {\n  const userConfig = useContext(UserConfigContext);\n  const defaultReportCurreny = userConfig.reportCurrencies[0];\n  const [reportCurrency, setReportCurrency] = useState(defaultReportCurreny);\n\n  return (\n    <div>\n      <form>\n        <label>\n          Select report currency:\n          <select\n            value={reportCurrency}\n            onChange={e =>\n              setReportCurrency(e.target.value as fintrack.Currency)\n            }\n          >\n            <React.Fragment>\n              {_.map(userConfig.reportCurrencies, cur => {\n                return (\n                  <option key={cur} value={cur}>\n                    {cur}\n                  </option>\n                );\n              })}\n            </React.Fragment>\n          </select>\n        </label>\n      </form>\n      <ReportCurrencyContext.Provider value={reportCurrency}>\n        <Charts />\n      </ReportCurrencyContext.Provider>\n    </div>\n  );\n};\n\nexport const Charts: React.FC = () => {\n  const store = useContext(StoreContext);\n  const assetClassesNum = getNonZeroAssetClasses({ store: store }).length;\n  const assetsNum = getNonZeroAssetClasses({ store: store, mode: 'assets' })\n    .length;\n  const liabilitiesNum = getNonZeroAssetClasses({\n    store: store,\n    mode: 'liabilities',\n  }).length;\n  // Allocation is always 100% if there is only one class, so no reason to show\n  // this chart in this case (it would duplicate NWInCurrenciesTimelineChart)..\n  const nwValuationAllocationTimelineBlock =\n    assetClassesNum > 1 ? (\n      <div\n        style={{\n          width: '100%',\n          height: 300,\n          display: 'flex',\n          marginBottom: '300px',\n        }}\n      >\n        <div style={{ width: '100%', height: 300 }}>\n          <NWValuationAllocationStackedTimelineChart />\n        </div>\n      </div>\n    ) : null;\n\n  // const assetsAndLiabilitiesPresence = [\n  //   getNonZeroAssetClasses({ store: store, mode: 'assets' }).length > 1,\n  //   getNonZeroAssetClasses({ store: store, mode: 'liabilities' }).length > 1,\n  // ];\n\n  const assetsOrLiabilitiesAllocationTimelineBlockStyle = {\n    width: '100%',\n    height: 300,\n    display: 'flex',\n    marginBottom: '300px',\n  };\n\n  const assetsAllocationTimelineBlock =\n    assetsNum && liabilitiesNum ? (\n      <div style={assetsOrLiabilitiesAllocationTimelineBlockStyle}>\n        <div style={{ width: '100%', height: 300 }}>\n          <AssetsValuationAllocationStackedTimelineChart />\n        </div>\n      </div>\n    ) : null;\n\n  const liabilitiesAllocationTimelineBlock = liabilitiesNum ? (\n    <div style={assetsOrLiabilitiesAllocationTimelineBlockStyle}>\n      <div style={{ width: '100%', height: 300 }}>\n        <LiabilitiesValuationAllocationStackedTimelineChart />\n      </div>\n    </div>\n  ) : null;\n\n  return (\n    <div>\n      <h1>Charts</h1>\n      <div\n        style={{\n          width: '100%',\n          height: 300,\n          display: 'flex',\n          marginBottom: '300px',\n        }}\n      >\n        <div style={{ width: '50%', height: 300 }}>\n          <NWInCurrenciesTimelineChart stacked={false} />\n        </div>\n        <div style={{ width: '50%', height: 300 }}>\n          <NWDiffInCurrenciesTimelineChart stacked={false} />\n        </div>\n      </div>\n      {nwValuationAllocationTimelineBlock}\n      {assetsAllocationTimelineBlock}\n      {liabilitiesAllocationTimelineBlock}\n      <div\n        style={{\n          width: '100%',\n          height: '200px',\n          marginBottom: '300px',\n          display: 'flex',\n        }}\n      >\n        <div style={{ width: '100%', height: '300px' }}>\n          <NWValuationAllocationChart />\n        </div>\n      </div>\n      <div\n        style={{\n          width: '100%',\n          height: '300px',\n          marginTop: '300px',\n          marginBottom: '200px',\n          display: 'flex',\n        }}\n      >\n        <AssetClassValuationAllocationPieCharts />\n      </div>\n    </div>\n  );\n};\n","import BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport ShowChartOutlinedIcon from '@material-ui/icons/ShowChartOutlined';\nimport TableChartOutlinedIcon from '@material-ui/icons/TableChartOutlined';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport React, { useEffect } from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport _ from 'lodash';\nimport { AppBar } from '@material-ui/core';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    text: {\n      padding: theme.spacing(2, 2, 0),\n    },\n    paper: {\n      paddingBottom: 50,\n    },\n    list: {\n      marginBottom: theme.spacing(2),\n    },\n    subheader: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n    // list: {\n    //   width: 250,\n    // },\n    fullList: {\n      width: 'auto',\n    },\n  })\n);\n\nconst locations = {\n  0: '/',\n  1: '/assets-and-reports',\n  2: '/import-export',\n} as const;\n\ntype Locations = keyof typeof locations;\nconst locs = _.values(locations);\n\nconst doesMatch = (l: string, pathname: string): boolean =>\n  l === '/' ? pathname === '/' : pathname.startsWith(l);\n\nexport const BottomAppBar: React.FC = () => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  const [value, setValue] = React.useState<Locations | undefined>(undefined);\n\n  useEffect(() => {\n    if (!locs.some(l => doesMatch(l, location.pathname))) {\n      setValue(undefined);\n    }\n    const idx = locs.findIndex(l => doesMatch(l, location.pathname));\n    if (idx !== -1) {\n      setValue(idx as Locations);\n    }\n  }, [location.pathname, value]);\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          console.log({ event, newValue });\n          setValue(newValue);\n        }}\n        // showLabels\n      >\n        <BottomNavigationAction\n          component={Link}\n          to=\".\"\n          label=\"Charts\"\n          icon={<ShowChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"assets-and-reports\"\n          label=\"Data\"\n          icon={<TableChartOutlinedIcon />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to=\"import-export\"\n          label=\"Export/import\"\n          icon={<SettingsIcon />}\n        />\n      </BottomNavigation>\n    </AppBar>\n  );\n};\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        padding: theme.spacing(2, 1),\n      },\n      [theme.breakpoints.up('lg')]: {\n        padding: theme.spacing(4),\n      },\n    },\n  })\n);\n\nexport const ContentContainer: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.root}>{children}</div>;\n};\n","import React, { useContext } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Link } from 'react-router-dom';\nimport { Button, Grid } from '@material-ui/core';\nimport { Sort } from '@material-ui/icons';\n\nimport { StoreContext } from 'src/App';\nimport { getAssetAccounts, getInstitutions } from 'src/Home';\nimport { ContentContainer } from 'src/components/ContentContainer';\n\nexport const Insitutions: React.FC = () => {\n  const store = useContext(StoreContext);\n\n  return (\n    <ContentContainer>\n      <Grid container spacing={1}>\n        <Grid item>\n          <Button\n            startIcon={<Sort />}\n            to=\"sort\"\n            component={Link}\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n          >\n            sort\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            to=\"create\"\n            component={Link}\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n          >\n            add\n          </Button>\n        </Grid>\n      </Grid>\n\n      <Table stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell>type</TableCell>\n            <TableCell>name</TableCell>\n            <TableCell>used in</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {getInstitutions(store)?.map(inst => {\n            const assetAccountsWithCurrentInstitution = getAssetAccounts(\n              store\n            )!.filter(aa => aa.institutionId === inst.id);\n            return (\n              <TableRow hover key={inst.id} component={Link} to={inst.id}>\n                <TableCell>{inst.type}</TableCell>\n                <TableCell>{inst.name}</TableCell>\n                {/* <TableCell>{inst.sortIndex}</TableCell> */}\n                <TableCell>\n                  {assetAccountsWithCurrentInstitution.length}\n                </TableCell>\n                {/* <TableCell>\n                    {assetAccountsWithCurrentInstitution.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteInstitution(inst.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </TableCell> */}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </ContentContainer>\n  );\n};\n","import { Machine, assign } from 'xstate';\nimport { FormContextValues } from 'react-hook-form';\n\ninterface FormSchema {\n  states: {\n    idle: {};\n    validating: {};\n    submitting: {};\n    submitted: {};\n  };\n}\n\ntype FormEvent =\n  | {\n      type: 'SUBMIT';\n    }\n  | {\n      type: 'REINIT';\n    };\n\ninterface FormContext<T> {\n  form: FormContextValues<T>;\n}\n\nexport const formMachine = Machine<FormContext<any>, FormSchema, FormEvent>({\n  id: 'form',\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        SUBMIT: 'submitting',\n      },\n    },\n    validating: {},\n    submitting: {\n      entry: assign((context, e) => {\n        console.log(\n          'e',\n          e,\n          '---context.form.getValues();',\n          context.form.getValues(),\n        );\n        // send('SAVE', {\n        //   to: 'store',\n        // });\n        console.log('======');\n        return {};\n      }),\n      on: {\n        '': 'submitted',\n      },\n      // onDone: {\n      //   target: 'submitted'\n      // }\n      // entry: send('SAVE', {\n      //   to: 'store',\n      // })\n    },\n    submitted: {\n      on: {\n        'REINIT': 'idle',\n      },\n    },\n  },\n});\n","\nimport React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from 'src/App';\nimport { formMachine } from 'src/machines/form';\nimport { Table, Tr, Th, Td } from 'src/components/Table';\nimport { getAssetAccounts } from 'src/Home';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, any, any>;\n};\n\nconst fieldInstitutionId = 'institutionId';\nconst fieldAssetId = 'assetId';\nconst fieldName = 'name';\n\ntype FormValues = {\n  [fieldInstitutionId]: string;\n  [fieldAssetId]: string;\n  [fieldName]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const AssetAccounts: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assetAccounts',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAssetAccount = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assetAccounts',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Asset accounts {getAssetAccounts(store)?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={4}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>id</Th>\n              <Th>asset</Th>\n              <Th>institution</Th>\n              <Th>name</Th>\n              <Th>reports</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldAssetId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store.data.assets.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.class} {v.subclass} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <select\n                  name={fieldInstitutionId}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {store.data.institutions.map((v) => (\n                    <option key={v.id} value={v.id}>\n                      {v.type} {v.name}\n                    </option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {getAssetAccounts(store)?.map((assetAccount) => {\n              // actually store is definitely not undefined here\n              // as `getAssetAccounts` has returned data\n              if (store === undefined) {\n                return null;\n              }\n              const assetAccountStatesWithThisAssetAccount = store.data.assetAccountStates.filter(\n                (aas) => aas.assetAccountId === assetAccount.id\n              );\n              return (\n                <Tr key={assetAccount.id}>\n                  <Td>{assetAccount.id}</Td>\n                  <Td>\n                    {\n                      store.data.assets.find(\n                        (a) => a.id === assetAccount.assetId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>\n                    {\n                      store.data.institutions.find(\n                        (a) => a.id === assetAccount.institutionId\n                      )?.name\n                    }\n                  </Td>\n                  <Td>{assetAccount.name}</Td>\n                  <Td>{assetAccountStatesWithThisAssetAccount.length}</Td>\n                  <Td>\n                    {assetAccountStatesWithThisAssetAccount.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAssetAccount(assetAccount.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport { useForm, FormContextValues } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport { Interpreter } from 'xstate';\n\nimport { StoreContext } from 'src/App';\nimport { formMachine } from 'src/machines/form';\nimport { ALL_ASSET_TYPES } from 'src/constants';\nimport { Table, Tr, Th, Td } from 'src/components/Table';\nimport { StoreEvent } from 'src/machines/store';\nimport { getAssetAccounts } from 'src/Home';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldClass = 'class';\nconst fieldSubclass = 'subclass';\nconst fieldName = 'name';\nconst fieldCurrency = 'currency';\n\ntype FormValues = {\n  [fieldClass]: string;\n  [fieldSubclass]: string;\n  [fieldName]: string;\n  [fieldCurrency]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nexport const Assets: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const form = useForm<FormValues>();\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    // console.log(values);\n    formMachineSend('SUBMIT');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      storeService.send('UPDATE_DATA', {\n        actionType: 'create',\n        entity: 'assets',\n        data: formMachineState.context.form.getValues(),\n      });\n      formMachineSend('REINIT');\n    }\n  }, [formMachineState, formMachineSend, storeService]);\n\n  const deleteAsset = (id: string) => {\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'assets',\n      data: {\n        id,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h1>Assets {store.data.assets?.length}</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Table>\n          <thead>\n            <Tr>\n              <Th colspan={5}></Th>\n              <Th>Used in # of</Th>\n            </Tr>\n            <Tr>\n              <Th>ID</Th>\n              <Th>class</Th>\n              <Th>subclass</Th>\n              <Th>name</Th>\n              <Th>currency</Th>\n              <Th>asset accounts</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td></Td>\n              <Td>\n                <select\n                  name={fieldClass}\n                  ref={form.register({\n                    required: 'Required',\n                    // pattern: {\n                    //   value: /^(BANK|BROKER|PERSON|PHYSICAL_LOCATION)$/i,\n                    //   message: 'invalid type',\n                    // },\n                  })}\n                >\n                  {ALL_ASSET_TYPES.map((v) => (\n                    <option value={v}>{v}</option>\n                  ))}\n                </select>\n              </Td>\n              <Td>\n                <input\n                  name={fieldSubclass}\n                  ref={form.register({ required: 'Required' })}\n                />\n                {form.errors.subclass?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldName}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.name?.message}\n              </Td>\n              <Td>\n                <input\n                  name={fieldCurrency}\n                  ref={form.register({ required: 'Required' })}\n                />\n                <br />\n                {form.errors.currency?.message}\n              </Td>\n              <Td></Td>\n              <Td>\n                <button type=\"submit\">Save</button>\n              </Td>\n            </Tr>\n            {store.data.assets?.map((asset) => {\n              const assetAccountsWithCurrentAsset = getAssetAccounts(\n                store\n              )?.filter((aa) => aa.assetId === asset.id)!;\n              return (\n                <Tr key={asset.id}>\n                  <Td>{asset.id}</Td>\n                  <Td>{asset.class}</Td>\n                  <Td>{asset.subclass}</Td>\n                  <Td>{asset.name}</Td>\n                  <Td>{asset.currency}</Td>\n                  <Td>{assetAccountsWithCurrentAsset.length}</Td>\n                  <Td>\n                    {assetAccountsWithCurrentAsset.length === 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => deleteAsset(asset.id)}\n                      >\n                        delete\n                      </button>\n                    )}\n                  </Td>\n                </Tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Link } from 'react-router-dom';\n// import Box from '@material-ui/core/Box';\n// import Typography from '@material-ui/core/Typography';\n\n// interface TabPanelProps {\n//   children?: React.ReactNode;\n//   index: any;\n//   value: any;\n// }\n\n// function TabPanel(props: TabPanelProps) {\n//   const { children, value, index, ...other } = props;\n\n//   return (\n//     <div\n//       role=\"tabpanel\"\n//       hidden={value !== index}\n//       id={`simple-tabpanel-${index}`}\n//       aria-labelledby={`simple-tab-${index}`}\n//       {...other}\n//     >\n//       {value === index && (\n//         <Box p={3}>\n//           <Typography>{children}</Typography>\n//         </Box>\n//       )}\n//     </div>\n//   );\n// }\n\n// function a11yProps(index: any) {\n//   return {\n//     id: `simple-tab-${index}`,\n//     'aria-controls': `simple-tabpanel-${index}`,\n//   };\n// }\n\nexport const TopAppBar: React.FC = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          variant=\"scrollable\"\n          scrollButtons=\"desktop\"\n        >\n          <Tab label=\"Reports\" component={Link} to=\".\" />\n          <Tab label=\"Assets\" component={Link} to=\"assets\" />\n          <Tab label=\"Institutions\" component={Link} to=\"institutions\" />\n          <Tab label=\"Asset accounts\" component={Link} to=\"asset-accounts\" />\n        </Tabs>\n      </AppBar>\n      {/* <TabPanel value={value} index={0}>\n        Item One\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        Item Two\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        Item Three\n      </TabPanel> */}\n    </>\n  );\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Save as SaveIcon } from '@material-ui/icons';\n\nexport const SubmitButton: React.FC = () => {\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      startIcon={<SaveIcon />}\n      type=\"submit\"\n    >\n      Save\n    </Button>\n  );\n};\n","import _ from 'lodash';\nimport React, { useContext } from 'react';\nimport { Interpreter } from 'xstate';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport { IconButton } from '@material-ui/core';\nimport { Restore as RestoreIcon } from '@material-ui/icons';\nimport * as yup from 'yup';\nimport { useNavigate } from 'react-router';\n\nimport { StoreContext } from 'src/App';\nimport { fintrack } from 'typings/fintrack';\nimport { StoreEvent } from 'src/machines/store';\nimport { Table, Tr, Td } from 'src/components/Table';\nimport { getAssetAccounts, getInstitutions } from 'src/Home';\nimport { formatMoney } from 'src/utils';\nimport { SubmitButton } from 'src/components/forms/SubmitButton';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\ntype FormValues = {\n  date: string;\n  assetAccountStates: fintrack.AssetAccountState[];\n  exchangeRates: fintrack.ExchangeRateData;\n};\n\nexport const AddEditReport: React.FC<OwnProps> = ({ storeService }) => {\n  const store = useContext(StoreContext);\n  const params = useParams();\n\n  const assetAccounts = getAssetAccounts(store);\n\n  let report: fintrack.Report | undefined;\n  let assetAccountStates: fintrack.AssetAccountState[] | undefined;\n  let exchangeRates: fintrack.ExchangeRateData = {};\n  if (params.reportId !== undefined) {\n    report = store.data.reports.find(r => r.id === params.reportId);\n    const nonSortedAssetAccountStates = store.data.assetAccountStates.filter(\n      r => r.reportId === report?.id\n    );\n    const exchangeRate = store.data.exchangeRates.find(\n      er => er.reportId === report?.id\n    );\n    exchangeRates = exchangeRate!.data;\n    assetAccountStates = assetAccounts?.map(aa => {\n      const foundAas = nonSortedAssetAccountStates?.find(\n        aas => aas.assetAccountId === aa.id\n      );\n      if (foundAas !== undefined) {\n        return foundAas;\n      }\n      return {\n        assetAccountId: aa.id,\n        reportId: report?.id!,\n        balance: '0',\n        comment: '',\n      };\n    });\n  }\n\n  const assetIdsSchema = assetAccounts!.reduce((acc, aa) => {\n    return {\n      ...acc,\n      [aa.assetId]: yup.string().required('заполняй курс, сука'),\n    };\n  }, {});\n\n  const yupAssectAccountState = yup.object({\n    date: yup.date().required('дата!'),\n    assetAccountStates: yup.array().of(\n      yup.object({\n        balance: yup.string().required('заполняй, сука'),\n        assetAccountId: yup.string().required('заполняй, сука'),\n        // pricePerUnit: yup.string().required('заполняй, сука'),\n      })\n    ),\n    exchangeRates: yup.object(assetIdsSchema),\n  });\n\n  const form = useForm<FormValues>({\n    // validationResolver: superstructResolver(StructAssectAccountState),\n    // validationResolver: yupResolver(yupAssectAccountState),\n    validationSchema: yupAssectAccountState,\n    defaultValues: {\n      date: report?.datetime\n        ? new Date(report.datetime).toISOString().substr(0, 10)\n        : new Date().toISOString().substr(0, 10),\n      assetAccountStates,\n      exchangeRates,\n    },\n    // validationContext: {\n    //   'x': 'asd'\n    // }\n  });\n\n  const navigate = useNavigate();\n\n  const nowTimestmap = new Date().getTime();\n  const prevReport = _.maxBy(\n    _.filter(\n      store.data.reports,\n      r => r.datetime < (report ? report.datetime : nowTimestmap)\n    ),\n    r => r.datetime\n  );\n  const prevAssetAccountStates = store.data.assetAccountStates.filter(\n    aas => aas.reportId === prevReport?.id\n  );\n  const prevExRates = store.data.exchangeRates.find(\n    exr => exr.reportId === prevReport?.id\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('=====values', values.date, values);\n    if (report === undefined) {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'create',\n        entity: 'assetAccountStates',\n        data: values,\n      });\n    } else {\n      storeService.send({\n        type: 'UPDATE_DATA',\n        actionType: 'update',\n        entity: 'assetAccountStates',\n        data: {\n          reportId: report.id,\n          ...values,\n        },\n      });\n    }\n    navigate('/assets-and-reports');\n  };\n\n  console.log('-----form.errors', form.errors);\n\n  return (\n    <div>\n      <h1>Add report</h1>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <input type=\"date\" name=\"date\" ref={form.register} />\n        {form.errors.date?.message}\n        <br />\n        <br />\n\n        <Table>\n          <tbody>\n            {assetAccounts?.map((assetAccount, index) => {\n              const asset = store.data.assets.find(\n                aa => aa.id === assetAccount.assetId\n              )!;\n\n              const renderInstitutionHeader =\n                index === 0 ||\n                assetAccounts[index].institutionId !==\n                  assetAccounts[index - 1].institutionId;\n\n              const rowWithHeader = !renderInstitutionHeader ? null : (\n                <Tr key={`header${assetAccount.id}`}>\n                  <Td colspan={2}>\n                    <h3>\n                      {\n                        getInstitutions(store)?.find(\n                          i => i.id === assetAccount.institutionId\n                        )?.name\n                      }\n                    </h3>\n                  </Td>\n                </Tr>\n              );\n\n              const prevAssetAccountBalance: string =\n                prevAssetAccountStates?.find(\n                  laas => laas.assetAccountId === assetAccount.id\n                )?.balance || '0';\n\n              const prevAssetExRate: string =\n                prevExRates?.data[asset.id] || 'none';\n\n              const exchangeRateForThisAssetWasAbove =\n                assetAccounts\n                  ?.slice(0, index)\n                  .find(aa => aa.assetId === assetAccount.assetId) !==\n                undefined;\n\n              const watchExchangeRate =\n                exchangeRateForThisAssetWasAbove && form.watch('exchangeRates');\n\n              const rowWithData = (\n                <Tr key={`data${assetAccount.id}`}>\n                  <Td>\n                    <Controller\n                      as={TextField}\n                      label={assetAccount.name}\n                      InputLabelProps={{\n                        shrink: true,\n                        disableAnimation: true,\n                      }}\n                      InputProps={{\n                        endAdornment: (\n                          <IconButton\n                            aria-label=\"use last balance\"\n                            color=\"secondary\"\n                            size=\"small\"\n                            onClick={() =>\n                              form.setValue(\n                                `assetAccountStates[${index}].balance`,\n                                prevAssetAccountBalance\n                              )\n                            }\n                          >\n                            <RestoreIcon />\n                          </IconButton>\n                        ),\n                      }}\n                      name={`assetAccountStates[${index}].balance`}\n                      control={form.control}\n                      variant=\"outlined\"\n                      helperText={\n                        form.errors.assetAccountStates?.[index]?.balance !==\n                        undefined\n                          ? form.errors.assetAccountStates?.[index]?.balance!\n                              .message\n                          : `last balance: ${formatMoney(\n                              prevAssetAccountBalance\n                            )}`\n                      }\n                      error={Boolean(\n                        form.errors.assetAccountStates?.[index]?.balance\n                      )}\n                    />\n                    <input\n                      type=\"hidden\"\n                      name={`assetAccountStates[${index}].assetAccountId`}\n                      ref={form.register}\n                      value={assetAccount.id}\n                    />\n                  </Td>\n                  <Td>\n                    {!exchangeRateForThisAssetWasAbove ? (\n                      <Controller\n                        as={TextField}\n                        InputLabelProps={{\n                          shrink: true,\n                          disableAnimation: true,\n                        }}\n                        name={`exchangeRates[${assetAccount.assetId}]`}\n                        label={`1 ${asset.name} in ${asset.currency}`}\n                        control={form.control}\n                        variant=\"outlined\"\n                        // WTF any here\n                        // https://github.com/react-hook-form/react-hook-form/issues/987\n                        helperText={\n                          (form.errors.exchangeRates as any)?.[\n                            assetAccount.assetId\n                          ] !== undefined\n                            ? (form.errors.exchangeRates as any)?.[\n                                assetAccount.assetId\n                              ].message\n                            : `last ex. rate: ${prevAssetExRate}`\n                        }\n                        error={Boolean(\n                          (form.errors.exchangeRates as any)?.[\n                            assetAccount.assetId\n                          ]\n                        )}\n                      />\n                    ) : watchExchangeRate === false ? null : (\n                      watchExchangeRate[assetAccount.assetId]\n                    )}\n                  </Td>\n                </Tr>\n              );\n              return (\n                <React.Fragment key={assetAccount.id}>\n                  {rowWithHeader}\n                  {rowWithData}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </Table>\n\n        <SubmitButton />\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { DeleteForever as DeleteForeverIcon } from '@material-ui/icons';\n\nexport const DeleteButton: React.FC<{\n  onClick: () => void;\n  disabled?: boolean;\n}> = ({ onClick, disabled }) => {\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"secondary\"\n      startIcon={<DeleteForeverIcon />}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      Delete\n    </Button>\n  );\n};\n","import React, { useEffect, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { Interpreter } from 'xstate';\nimport { FormContextValues, useForm, Controller } from 'react-hook-form';\nimport { useMachine } from '@xstate/react';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField, Select, MenuItem, Grid } from '@material-ui/core';\n\nimport { StoreEvent } from 'src/machines/store';\nimport { ALL_INSTITUTION_TYPES } from 'src/constants';\nimport { getAssetAccounts } from 'src/Home';\nimport { StoreContext } from 'src/App';\nimport { formMachine } from 'src/machines/form';\nimport { fintrack } from 'typings/fintrack';\nimport { ContentContainer } from 'src/components/ContentContainer';\nimport { SubmitButton } from 'src/components/forms/SubmitButton';\nimport { DeleteButton } from 'src/components/forms/DeleteButton';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst fieldType = 'type';\nconst fieldName = 'name';\n\ntype FormValues = {\n  [fieldType]: string;\n  [fieldName]: string;\n};\n\ntype FormMachineShape = {\n  form: FormContextValues<FormValues>;\n};\n\nconst yupInstitution = yup.object({\n  [fieldType]: yup.string().required('required'),\n  [fieldName]: yup.string().required('required'),\n});\n\nexport const AddEditInstitution: React.FC<OwnProps> = ({ storeService }) => {\n  const params = useParams();\n  const store = useContext(StoreContext);\n  const navigate = useNavigate();\n\n  let inst: fintrack.Institution | undefined;\n  if (params.institutionId !== undefined) {\n    inst = store.data.institutions.find(i => i.id === params.institutionId);\n  }\n\n  const form = useForm<FormValues>({\n    validationSchema: yupInstitution,\n    defaultValues: {\n      type: inst?.type,\n      name: inst?.name,\n    },\n  });\n  const [formMachineState, formMachineSend] = useMachine<FormMachineShape, any>(\n    formMachine,\n    {\n      devTools: true,\n      context: {\n        form,\n      },\n    }\n  );\n\n  const onSubmit = (values: FormValues) => {\n    console.log('________', values);\n    formMachineSend('SUBMIT');\n  };\n\n  const deleteInstitution = () => {\n    console.log('----delete', inst?.id);\n    storeService.send({\n      type: 'UPDATE_DATA',\n      actionType: 'delete',\n      entity: 'institutions',\n      data: {\n        id: inst?.id,\n      },\n    });\n    navigate('..');\n  };\n\n  useEffect(() => {\n    if (formMachineState.matches('submitted')) {\n      if (inst === undefined) {\n        storeService.send('UPDATE_DATA', {\n          actionType: 'create',\n          entity: 'institutions',\n          data: {\n            ...yupInstitution.validateSync(\n              formMachineState.context.form.getValues()\n            ),\n            sortIndex: 0,\n          },\n        });\n      } else {\n        storeService.send('UPDATE_DATA', {\n          actionType: 'update',\n          entity: 'institutions',\n          data: {\n            id: inst.id,\n            ...yupInstitution.validateSync(\n              formMachineState.context.form.getValues()\n            ),\n          },\n        });\n      }\n      formMachineSend('REINIT');\n      navigate('..');\n    }\n  }, [formMachineState, formMachineSend, storeService, inst, navigate]);\n\n  const assetAccountsWithCurrentInstitution = getAssetAccounts(store)!.filter(\n    aa => aa.institutionId === inst?.id\n  );\n\n  return (\n    <ContentContainer>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <Grid container direction=\"column\" spacing={3}>\n          <Grid item>\n            <Typography variant=\"h1\">\n              {inst?.id !== undefined ? 'Edit' : 'Add'} Institution\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <Controller\n                  as={Select}\n                  name={fieldType}\n                  control={form.control}\n                  variant=\"outlined\"\n                  error={Boolean(form.errors[fieldType]?.message)}\n                >\n                  {ALL_INSTITUTION_TYPES.map(v => (\n                    <MenuItem value={v}>{v}</MenuItem>\n                  ))}\n                </Controller>\n              </Grid>\n              <Grid item>\n                <Controller\n                  as={TextField}\n                  name={fieldName}\n                  control={form.control}\n                  variant=\"outlined\"\n                  placeholder=\"Name\"\n                  label=\"Name\"\n                  error={Boolean(form.errors[fieldName]?.message)}\n                  helperText={form.errors[fieldName]?.message}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <SubmitButton />\n          </Grid>\n          {inst !== undefined && (\n            <Grid item>\n              <Grid container direction=\"column\" spacing={1}>\n                {assetAccountsWithCurrentInstitution.length !== 0 && (\n                  <Grid item>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                      used in {assetAccountsWithCurrentInstitution.length} of\n                      asset accounts thus can not be deleted\n                    </Typography>\n                  </Grid>\n                )}\n                <Grid item>\n                  <DeleteButton\n                    onClick={deleteInstitution}\n                    disabled={assetAccountsWithCurrentInstitution.length !== 0}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ContentContainer>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { Interpreter } from 'xstate';\nimport {\n  SortableContainer,\n  SortableElement,\n  SortEndHandler,\n  SortEnd,\n} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\n\nimport { getInstitutions } from 'src/Home';\nimport { StoreContext } from 'src/App';\nimport { StoreEvent } from 'src/machines/store';\n\ntype OwnProps = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nconst SortableItem = SortableElement(({ value }: { value: any }) => (\n  <ListItem ContainerComponent=\"div\">\n    <ListItemText primary={value} />\n    <ListItemSecondaryAction>\n      <DragHandleIcon />\n    </ListItemSecondaryAction>\n  </ListItem>\n));\n\nconst SortableContainer1 = SortableContainer(\n  ({ children }: { children: any }) => {\n    return <List component=\"div\">{children}</List>;\n  }\n);\n\nexport const InstitutionsSort: React.FC<OwnProps> = props => {\n  const store = useContext(StoreContext);\n  const institutions = getInstitutions(store)!;\n\n  const [items, setItems] = useState(institutions);\n\n  const onSortEnd: SortEndHandler = (sort: SortEnd) => {\n    const newArr = arrayMove(items, sort.oldIndex, sort.newIndex);\n    setItems(newArr);\n    newArr.forEach((inst, idx) => {\n      props.storeService.send('UPDATE_DATA', {\n        actionType: 'update',\n        entity: 'institutions',\n        data: {\n          ...inst,\n          sortIndex: idx + 1,\n        },\n      });\n    });\n  };\n\n  return (\n    <SortableContainer1 onSortEnd={onSortEnd}>\n      {items.map((value, index) => (\n        <SortableItem\n          key={`item-${value.id}`}\n          index={index}\n          value={value.name}\n        />\n      ))}\n    </SortableContainer1>\n  );\n};\n","import React from 'react';\nimport { Routes, Route } from 'react-router';\nimport { Interpreter } from 'xstate';\n\nimport { Insitutions } from 'src/Insitutions';\nimport { AssetAccounts } from 'src/AssetAccounts';\nimport { Assets } from 'src/Assets';\nimport { StoreEvent } from 'src/machines/store';\nimport { TopAppBar } from 'src/components/TopAppBar';\nimport { Home } from 'src/Home';\nimport { AddEditReport } from 'src/AddReport';\nimport { AddEditInstitution } from 'src/AddEditInstitution';\nimport { InstitutionsSort } from 'src/InstitutionsSort';\n\ntype Props = {\n  storeService: Interpreter<any, any, StoreEvent, any>;\n};\n\nexport const AssetsAndReports: React.FC<Props> = ({ storeService }) => {\n  return (\n    <>\n      <TopAppBar />\n      <Routes>\n        <Route path=\"institutions\" element={<Insitutions />} />\n        <Route\n          path=\"institutions/:institutionId\"\n          element={<AddEditInstitution storeService={storeService} />}\n        />\n        <Route\n          path=\"institutions/sort\"\n          element={<InstitutionsSort storeService={storeService} />}\n        />\n        <Route path=\"assets\" element={<Assets storeService={storeService} />} />\n        <Route\n          path=\"asset-accounts\"\n          element={<AssetAccounts storeService={storeService} />}\n        />\n        <Route element={<Home storeService={storeService} />} />\n        <Route\n          path=\"add-edit-report/:reportId\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n        <Route\n          path=\"add-edit-report\"\n          element={<AddEditReport storeService={storeService} />}\n        />\n      </Routes>\n    </>\n  );\n};\n","import React from 'react';\nimport { Interpreter } from 'xstate';\nimport { useNavigate } from 'react-router';\nimport Button from '@material-ui/core/Button';\n\nimport { StoreContext, StoreEvent } from 'src/machines/store';\n\ntype Props = {\n  state: any;\n  send: any;\n  storeService: Interpreter<StoreContext, any, StoreEvent, any>;\n};\n\nexport const ImportExport: React.FC<Props> = ({\n  state: state1,\n  send,\n  storeService,\n}) => {\n  const navigate = useNavigate();\n\n  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    var reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files![0]);\n\n    function onReaderLoad(event: ProgressEvent<FileReader>) {\n      console.log(event.target!.result);\n      var obj = JSON.parse(event.target!.result as string);\n      // alert_data(obj.name, obj.family);\n      send('LOAD_FROM_INPUT', {\n        data: obj,\n      });\n\n      navigate('/');\n    }\n  };\n\n  return (\n    <div>\n      {/* <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          send('SAVE');\n        }}\n        disabled={state1.matches('saving')}\n      >\n        prepare data for export\n      </Button> */}\n\n      <br />\n      <br />\n      {/* {state1.matches('saving') && (\n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          color=\"secondary\"\n          size=\"large\"\n          onClick={() => {\n            send('SAVE');\n          }}\n        >\n          <a\n            href={state1.context.urlDataToSave}\n            download=\"fintrack.json\"\n            onClick={() => {\n              setTimeout(() => {\n                send('SAVED');\n              }, 500);\n            }}\n          >\n            download\n          </a>\n        </Button>\n      )} */}\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n        onClick={() => {\n          function download(content: any) {\n            var file = new Blob([content], {\n              type: 'text/json;charset=UTF-8',\n            });\n            var reader = new FileReader();\n            reader.onload = function () {\n              // var popup = window.open();\n              var link = document.createElement('a');\n              link.setAttribute('href', reader.result as string);\n              link.setAttribute('download', 'fintrack.json');\n              // popup!.\n              document.body.appendChild(link);\n              link.click();\n            };\n            reader.readAsDataURL(file);\n          }\n\n          download(JSON.stringify(state1.context.db, null, 2));\n\n          // setTimeout(() => {\n          //   send('SAVED');\n          // }, 500);\n        }}\n      >\n        export\n      </Button>\n\n      <br />\n      <br />\n\n      <Button\n        variant=\"contained\"\n        component=\"label\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        import\n        <div style={{ display: 'none ' }}>\n          <input type=\"file\" onChange={handleFile} />\n        </div>\n      </Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport {\n  createMuiTheme,\n  ThemeProvider as ThemeProviderMaterial,\n} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { blue, deepOrange } from '@material-ui/core/colors';\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        breakpoints: {\n          values: {\n            xs: 320,\n            sm: 375,\n            md: 768,\n            lg: 1024,\n            xl: 1368,\n          },\n        },\n        spacing: 8,\n        typography: {\n          h1: {\n            fontSize: 30,\n          },\n          h2: {\n            fontSize: 26,\n          },\n          h3: {\n            fontSize: 22,\n          },\n        },\n        palette: {\n          primary: {\n            // Purple and green play nicely together.\n            main: blue[500],\n          },\n          secondary: {\n            main: deepOrange[400],\n          },\n          type: prefersDarkMode ? 'dark' : 'light',\n          // Used by `getContrastText()` to maximize the contrast between\n          // the background and the text.\n          // contrastThreshold: 3,\n          // Used by the functions below to shift a color's luminance by approximately\n          // two indexes within its tonal palette.\n          // E.g., shift from Red 500 to Red 300 or Red 700.\n          // tonalOffset: {\n          //   light: 0.2,\n          //   dark: 0.9\n          // },\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProviderMaterial theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProviderMaterial>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { useMachine } from '@xstate/react';\n\n// import { fetchMachine } from './machines/fetch';\nimport { storeMachine, initDbState } from 'src/machines/store';\nimport { fintrack } from 'typings/fintrack';\nimport { ChartsRoot } from 'src/components/charts/Charts';\nimport { BottomAppBar } from 'src/components/BottomAppBar';\nimport { AssetsAndReports } from 'src/AssetsAndReports';\nimport { ImportExport } from 'src/ImportExport';\nimport { BASE_CURRENCY } from 'src/constants';\nimport { ThemeProvider } from 'src/ThemeProvider';\n\nimport * as styles from './App.treat';\n\nexport const StoreContext = React.createContext<fintrack.JSONShape>(\n  initDbState\n);\n\ntype UserConfigType = {\n  baseCurrency: fintrack.Currency;\n  reportCurrencies: fintrack.Currency[];\n};\n\nexport const UserConfigContext = React.createContext<UserConfigType>({\n  reportCurrencies: ['USD', 'EUR', 'RUB'],\n  baseCurrency: BASE_CURRENCY,\n});\n\nexport const ReportCurrencyContext = React.createContext<fintrack.Currency>(\n  'USD'\n);\n\nconst App: React.FC = () => {\n  const [state1, send, storeService] = useMachine(storeMachine, {\n    devTools: true,\n  });\n\n  return (\n    <StoreContext.Provider value={state1.context.db.getState()}>\n      <UserConfigContext.Provider\n        value={{\n          baseCurrency: BASE_CURRENCY,\n          reportCurrencies: ['USD', 'EUR', 'RUB'],\n        }}\n      >\n        <BrowserRouter>\n          <React.Fragment>\n            <ThemeProvider>\n              <div className={styles.root}>\n                <div className={styles.content}>\n                  <Routes>\n                    <Route element={<ChartsRoot />} />\n                    <Route\n                      path=\"assets-and-reports/*\"\n                      element={<AssetsAndReports storeService={storeService} />}\n                    />\n                    <Route\n                      path=\"import-export\"\n                      element={\n                        <ImportExport\n                          state={state1}\n                          send={send}\n                          storeService={storeService}\n                        />\n                      }\n                    />\n                  </Routes>\n                </div>\n                <BottomAppBar />\n              </div>\n            </ThemeProvider>\n          </React.Fragment>\n        </BrowserRouter>\n      </UserConfigContext.Provider>\n    </StoreContext.Provider>\n  );\n};\n\nexport default App;\n","import \"!../node_modules/mini-css-extract-plugin/dist/loader.js!css-loader?{\\\"modules\\\":false,\\\"url\\\":false}!./App.treat.3I0oFzE.css\";\nexport var root = '_3QqL3';\nexport var nav = '_3m8Iv';\nexport var content = '_2KOUX';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'src/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}